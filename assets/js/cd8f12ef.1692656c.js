"use strict";(self.webpackChunkoverture_documentation=self.webpackChunkoverture_documentation||[]).push([[4780],{67929:(e,s,t)=>{t.r(s),t.d(s,{assets:()=>h,contentTitle:()=>c,default:()=>m,frontMatter:()=>d,metadata:()=>a,toc:()=>u});let a=JSON.parse('{"id":"guides/places","title":"Places","description":"53M places and points of interest around the world","source":"@site/docs/guides/places.mdx","sourceDirName":"guides","slug":"/guides/places","permalink":"/guides/places","draft":false,"unlisted":false,"tags":[],"version":"current","lastUpdatedAt":1737580646000,"frontMatter":{"title":"Places","description":"53M places and points of interest around the world"},"sidebar":"docs","previous":{"title":"Divisions","permalink":"/guides/divisions"},"next":{"title":"Transportation","permalink":"/guides/transportation"}}');var n=t(74848),r=t(28453),i=t(74235),o=t(15947),l=t(48821);let d={title:"Places",description:"53M places and points of interest around the world"},c=void 0,h={},u=[{value:"Overview",id:"overview",level:2},{value:"Dataset description",id:"dataset-description",level:2},{value:"Data access and retrieval",id:"data-access-and-retrieval",level:2},{value:"Data usage guidelines",id:"data-usage-guidelines",level:2},{value:"Data manipulation and analysis",id:"data-manipulation-and-analysis",level:2},{value:"Querying by properties",id:"querying-by-properties",level:3},{value:"Advanced examples",id:"advanced-examples",level:3},{value:"Tools and libraries",id:"tools-and-libraries",level:2},{value:"Rapid",id:"rapid",level:3}];function p(e){let s={a:"a",admonition:"admonition",code:"code",em:"em",h2:"h2",h3:"h3",img:"img",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,r.R)(),...e.components},{Details:a}=s;return a||function(e,s){throw Error("Expected "+(s?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(s.admonition,{type:"note",children:(0,n.jsxs)(s.p,{children:["This guide is focused on the Overture places ",(0,n.jsx)(s.strong,{children:"data"}),"\u2014its content, scope, properties, and use cases. Please see the ",(0,n.jsx)(s.a,{href:"/schema/reference/places/place",children:"schema reference documentation"})," for more information on the Overture places ",(0,n.jsx)(s.strong,{children:"schema"}),"."]})}),"\n",(0,n.jsx)(s.h2,{id:"overview",children:"Overview"}),"\n",(0,n.jsxs)(s.p,{children:["The Overture places theme has one feature type, called ",(0,n.jsx)(s.code,{children:"place"}),", and contains more than 53 million point representations of real-world entities: schools, businesses, hospitals, religious organizations, landmarks, mountain peaks, and much more. The theme is derived from a conflation of Meta and Microsoft data and is available under a ",(0,n.jsx)(s.a,{href:"https://cdla.dev/permissive-2-0/",children:"CDLA Permissive 2.0"})," license."]}),"\n",(0,n.jsxs)(s.table,{children:[(0,n.jsx)(s.thead,{children:(0,n.jsx)(s.tr,{children:(0,n.jsx)(s.th,{style:{textAlign:"center"},children:(0,n.jsx)(s.img,{alt:"Overture places theme coverage",src:t(78679).A+"",width:"1728",height:"1138"})})})}),(0,n.jsx)(s.tbody,{children:(0,n.jsx)(s.tr,{children:(0,n.jsx)(s.td,{style:{textAlign:"center"},children:(0,n.jsx)(s.em,{children:"Overture places data, styled by data source: purple for Meta, orange for Microsoft."})})})})]}),"\n",(0,n.jsxs)(s.table,{children:[(0,n.jsx)(s.thead,{children:(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.th,{children:"Primary source"}),(0,n.jsx)(s.th,{children:"Feature count, December 2024 release"})]})}),(0,n.jsxs)(s.tbody,{children:[(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{children:"Meta"}),(0,n.jsx)(s.td,{children:"~49.6 million"})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{children:"Microsoft"}),(0,n.jsx)(s.td,{children:"~5.9 million"})]})]})]}),"\n",(0,n.jsx)(s.h2,{id:"dataset-description",children:"Dataset description"}),"\n",(0,n.jsxs)(s.p,{children:["All Overture data, including places data, is distributed as GeoParquet, a column-based data structure. Below you'll find a table with column-by-column descriptions of the properties in the place feature type. Of particular interest to users is the categories property; we offer a complete list of available categories ",(0,n.jsx)(s.a,{href:"https://github.com/OvertureMaps/schema/blob/main/docs/schema/concepts/by-theme/places/overture_categories.csv",children:"here"}),"."]}),"\n",(0,n.jsxs)(a,{children:[(0,n.jsx)("summary",{children:"Schema for GeoParquet files in the places theme"}),(0,n.jsx)("div",{children:(0,n.jsx)(i.default,{children:(0,n.jsx)(o.default,{value:"places",label:"places",default:!0,children:(0,n.jsxs)(s.table,{children:[(0,n.jsx)(s.thead,{children:(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.th,{children:"column"}),(0,n.jsx)(s.th,{children:"type"}),(0,n.jsx)(s.th,{children:"description"})]})}),(0,n.jsxs)(s.tbody,{children:[(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{children:"id"}),(0,n.jsx)(s.td,{children:"VARCHAR"}),(0,n.jsx)(s.td,{children:"A feature ID. This may be an ID associated with the Global Entity Reference System (GERS) if\u2014and-only-if the feature represents an entity that is part of GERS."})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{children:"geometry"}),(0,n.jsx)(s.td,{children:"BLOB"}),(0,n.jsx)(s.td,{children:"The point representation of the Place's location. Place's geometry which MUST be a Point as defined by GeoJSON schema."})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{children:"bbox"}),(0,n.jsx)(s.td,{children:"STRUCT"}),(0,n.jsx)(s.td,{children:"Area defined by two longitudes and two latitudes: latitude is a decimal number between -90.0 and 90.0; longitude is a decimal number between -180.0 and 180.0."})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{children:"version"}),(0,n.jsx)(s.td,{children:"INTEGER"}),(0,n.jsx)(s.td,{children:"Version number of the feature, incremented in each Overture release where the geometry or attributes of this feature changed."})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{children:"sources"}),(0,n.jsx)(s.td,{children:"STRUCT"}),(0,n.jsx)(s.td,{children:"The array of source information for the properties of a given feature, with each entry being a source object which lists the property in JSON Pointer notation and the dataset that specific value came from. All features must have a root level source which is the default source if a specific property's source is not specified."})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{children:"names"}),(0,n.jsx)(s.td,{children:"STRUCT"}),(0,n.jsx)(s.td,{children:"Properties defining the names of a feature."})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{children:"categories"}),(0,n.jsx)(s.td,{children:"STRUCT"}),(0,n.jsxs)(s.td,{children:["The categories of the place. Complete list is available on GitHub: ",(0,n.jsx)(s.a,{href:"https://github.com/OvertureMaps/schema/blob/main/docs/schema/concepts/by-theme/places/overture_categories.csv",children:"https://github.com/OvertureMaps/schema/blob/main/docs/schema/concepts/by-theme/places/overture_categories.csv"})]})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{children:"confidence"}),(0,n.jsx)(s.td,{children:"DOUBLE"}),(0,n.jsx)(s.td,{children:"The confidence of the existence of the place. It's a number between 0 and 1. 0 means that we're sure that the place doesn't exist (anymore). 1 means that we're sure that the place exists. If there's no value for the confidence, it means that we don't have any confidence information."})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{children:"websites"}),(0,n.jsx)(s.td,{children:"VARCHAR[]"}),(0,n.jsx)(s.td,{children:"The websites of the place."})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{children:"socials"}),(0,n.jsx)(s.td,{children:"VARCHAR[]"}),(0,n.jsx)(s.td,{children:"The social media URLs of the place."})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{children:"emails"}),(0,n.jsx)(s.td,{children:"VARCHAR[]"}),(0,n.jsx)(s.td,{children:"The email addresses of the place."})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{children:"phones"}),(0,n.jsx)(s.td,{children:"VARCHAR[]"}),(0,n.jsx)(s.td,{children:"The phone numbers of the place."})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{children:"brand"}),(0,n.jsx)(s.td,{children:"STRUCT"}),(0,n.jsx)(s.td,{children:"The brand of the place. A location with multiple brands is modeled as multiple separate places, each with its own brand."})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{children:"addresses"}),(0,n.jsx)(s.td,{children:"STRUCT"}),(0,n.jsx)(s.td,{children:"The addresses of the place."})]})]})]})})})})]}),"\n",(0,n.jsx)(s.h2,{id:"data-access-and-retrieval",children:"Data access and retrieval"}),"\n",(0,n.jsx)(s.p,{children:"The latest places data can be obtained from AWS or Azure as GeoParquet files at the following locations."}),"\n",(0,n.jsxs)(s.table,{children:[(0,n.jsx)(s.thead,{children:(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.th,{children:"Provider"}),(0,n.jsx)(s.th,{children:"Location"})]})}),(0,n.jsxs)(s.tbody,{children:[(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{children:"Amazon S3"}),(0,n.jsx)(s.td,{children:(0,n.jsx)(l.A,{query:"s3://overturemaps-us-west-2/release/__OVERTURE_RELEASE/theme=places/type=place/",language:"text"})})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{children:"Azure Blob Storage"}),(0,n.jsx)(s.td,{children:(0,n.jsx)(l.A,{query:"https://overturemapswestus2.blob.core.windows.net/release/__OVERTURE_RELEASE/theme=places/type=place/",language:"text"})})]})]})]}),"\n",(0,n.jsxs)(s.p,{children:["More information can be found in the ",(0,n.jsx)(s.a,{href:"https://docs.overturemaps.org/getting-data/",children:"Getting Overture Data"})," section of this documentation. You can download the entire dataset directly from the S3 or Azure locations above. Warning: the output will be a very large file.\nDepending on your use case, these methods might be more practical for you:"]}),"\n",(0,n.jsxs)(i.default,{children:[(0,n.jsxs)(o.default,{value:"Python Command-line Tool",label:"Python Command-line Tool",default:!0,children:[(0,n.jsxs)(s.p,{children:["First, follow the ",(0,n.jsx)(s.a,{href:"/getting-data/overturemaps-py/",children:"setup guide for the Python Command-line Tool"}),"."]}),(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{children:"overturemaps download -f geoparquet --type=place -o places.geoparquet\n"})})]}),(0,n.jsxs)(o.default,{value:"DuckDB",label:"DuckDB",default:!0,children:[(0,n.jsxs)(s.p,{children:["First, follow the ",(0,n.jsx)(s.a,{href:"/getting-data/duckdb/",children:"setup guide for DuckDB"}),"."]}),(0,n.jsx)(l.A,{query:"LOAD spatial; -- noqa\nLOAD httpfs;  -- noqa\n-- Access the data on AWS in this example\nSET s3_region='us-west-2';\n\nCOPY (\nSELECT\n    *\nFROM read_parquet('s3://overturemaps-us-west-2/release/__OVERTURE_RELEASE/theme=places/*/*'))\nTO 'places.parquet';\n"})]})]}),"\n",(0,n.jsx)(s.h2,{id:"data-usage-guidelines",children:"Data usage guidelines"}),"\n",(0,n.jsx)(s.p,{children:"We recommend downloading only the Overture data you need. If you have a particular geographic area of interest, there are several options for using a simple bounding box to extract places data and output a GeoJSON file."}),"\n",(0,n.jsxs)(i.default,{children:[(0,n.jsxs)(o.default,{value:"Overture Maps Explorer",label:"Overture Maps Explorer",default:!0,children:[(0,n.jsxs)(s.p,{children:["To quickly view and download modest amounts of data, you can use the ",(0,n.jsx)(s.a,{href:"https://explore.overturemaps.org/#15.07/41.89731/12.47626",children:"Overture Maps Explorer website"}),"."]}),(0,n.jsxs)(s.p,{children:["To download data: Pan to the area you are interested in, turn off the other layers, then click ",(0,n.jsx)(s.code,{children:"Download Visible"}),"."]}),(0,n.jsx)(s.p,{children:"This will download the area visible on your screen."})]}),(0,n.jsxs)(o.default,{value:"Python Command-line Tool",label:"Python Command-line Tool",default:!0,children:[(0,n.jsxs)(s.p,{children:["First, follow the ",(0,n.jsx)(s.a,{href:"/getting-data/overturemaps-py/",children:"setup guide for the Python Command-line Tool"}),"."]}),(0,n.jsxs)(s.p,{children:["Simply alter the ",(0,n.jsx)(s.code,{children:"bbox"})," value to download a particular area."]}),(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{children:"overturemaps download --bbox=12.46,41.89,12.48,41.91 -f geojson --type=place -o rome.geojson\n"})})]}),(0,n.jsxs)(o.default,{value:"DuckDB",label:"DuckDB",default:!0,children:[(0,n.jsxs)(s.p,{children:["First, follow the ",(0,n.jsx)(s.a,{href:"/getting-data/duckdb/",children:"setup guide for DuckDB"}),"."]}),(0,n.jsxs)(s.p,{children:["Replace the ",(0,n.jsx)(s.code,{children:"bbox.xmin"})," and ",(0,n.jsx)(s.code,{children:"bbox.ymin"})," values with a new bounding box to run the query for a different area."]}),(0,n.jsx)(l.A,{query:"LOAD spatial; -- noqa\nLOAD httpfs;  -- noqa\n-- Access the data on AWS in this example\nSET s3_region='us-west-2';\n\nCOPY (\n    SELECT\n       id,\n       version,\n    -- We are casting these columns to JSON in order to ensure compatibility with our GeoJSON output.\n    -- These conversions may be not necessary for other output formats.\n       CAST(names AS JSON) AS names,\n       CAST(categories AS JSON) AS categories,\n       confidence,\n       CAST(websites AS JSON) AS websites,\n       CAST(socials AS JSON) AS socials,\n       CAST(emails AS JSON) AS emails,\n       CAST(phones AS JSON) AS phones,\n       CAST(brand AS JSON) AS brand,\n       CAST(addresses AS JSON) AS addresses,\n       CAST(sources AS JSON) AS sources,\n       geometry AS geometry -- DuckDB v.1.1.0 will autoload this as a `geometry` type\nFROM read_parquet('s3://overturemaps-us-west-2/release/__OVERTURE_RELEASE/theme=places/*/*')\nWHERE\n    -- Point geometry doesn't require looking at both min and max:\n      bbox.xmin BETWEEN 12.46 AND 12.48 AND\n      bbox.ymin BETWEEN 41.89 AND 41.91\n) TO 'rome_places.geojson' WITH (FORMAT GDAL, DRIVER 'GeoJSON', SRS 'EPSG:4326');\n"})]})]}),"\n",(0,n.jsx)(s.h2,{id:"data-manipulation-and-analysis",children:"Data manipulation and analysis"}),"\n",(0,n.jsx)(s.h3,{id:"querying-by-properties",children:"Querying by properties"}),"\n",(0,n.jsx)(s.p,{children:"These examples use data properties in the address, category, and confidence scores columns to filter the data in useful ways using DuckDB."}),"\n",(0,n.jsxs)(i.default,{children:[(0,n.jsxs)(o.default,{value:"Query by address",label:"Query by address",default:!0,children:[(0,n.jsxs)(s.p,{children:["The ",(0,n.jsx)(s.code,{children:"address"})," column can be used to quickly filter data down to a particular political unit. This example uses the country key to get all the data with addresses in Lithuania. Region can be likewise used to extract data from smaller units such as US states."]}),(0,n.jsx)(l.A,{query:"LOAD spatial; -- noqa\nLOAD httpfs;  -- noqa\n\n-- Access the data on AWS in this example\nSET s3_region='us-west-2';\n\nCOPY (\n    SELECT\n-- we can parse addresses into columns to make further filtering of the data simpler\n    addresses[1].freeform as street,\n    addresses[1].locality as locality,\n    addresses[1].postcode as postcode,\n    addresses[1].region as region,\n    addresses[1].country as country,\n    *\nFROM read_parquet('s3://overturemaps-us-west-2/release/__OVERTURE_RELEASE/theme=places/*/*')\nWHERE\n    addresses[1].country = 'LT'\n) TO 'lithuania_places.parquet';\n"})]}),(0,n.jsxs)(o.default,{value:"Query by category",label:"Query by category",default:!0,children:[(0,n.jsxs)(s.p,{children:["For filtering data by a particular type of place we can use the ",(0,n.jsx)(s.code,{children:"categories"})," column. In this example we'll extract all the places with categories of ",(0,n.jsx)(s.code,{children:"rice_mill"})," or ",(0,n.jsx)(s.code,{children:"flour_mill"})]}),(0,n.jsxs)(s.p,{children:["The full category list is available ",(0,n.jsx)(s.a,{href:"https://github.com/OvertureMaps/schema/blob/main/docs/schema/concepts/by-theme/places/overture_categories.csv",children:"here"}),"."]}),(0,n.jsx)(l.A,{query:"LOAD spatial; -- noqa\nLOAD httpfs;  -- noqa\n-- Access the data on AWS in this example\nSET s3_region='us-west-2';\n\nCOPY (\n    SELECT\n    names.primary as primary_name,\n    confidence,\n    addresses,\n    websites,\n    geometry -- DuckDB v.1.1.0 will autoload this as a `geometry` type\nFROM read_parquet('s3://overturemaps-us-west-2/release/__OVERTURE_RELEASE/theme=places/*/*')\nWHERE\n    categories.primary IN ('flour_mill', 'rice_mill')\n) TO 'mills.parquet';\n"})]}),(0,n.jsxs)(o.default,{value:"Query by confidence score",label:"Query by confidence score",default:!0,children:[(0,n.jsxs)(s.p,{children:["Suppose you only want data that definitely exists and is accurate. We can use the ",(0,n.jsx)(s.code,{children:"confidence"})," score to filter out data below a certain threshold to remove any suspect data."]}),(0,n.jsx)(l.A,{query:"LOAD spatial; -- noqa\nLOAD httpfs;  -- noqa\n\n-- Access the data on AWS in this example\nSET s3_region='us-west-2';\n\nCOPY (\n    SELECT\n    *\nFROM read_parquet('s3://overturemaps-us-west-2/release/__OVERTURE_RELEASE/theme=places/*/*')\nWHERE\n-- Only select data with a confidence score above .95\n    confidence > .95\n-- Further filtering for data within Massachusetts to limit the size of this query\n    AND addresses[1].region = 'MA'\n) TO 'MA_high_confidence_places.parquet';\n"})]})]}),"\n",(0,n.jsx)(s.h3,{id:"advanced-examples",children:"Advanced examples"}),"\n",(0,n.jsx)(s.p,{children:"These examples present some use cases that combine places data with other datasets."}),"\n",(0,n.jsxs)(i.default,{children:[(0,n.jsxs)(o.default,{value:"Conflate with OpenStreetMap",label:"Conflate with OpenStreetMap",default:!0,children:[(0,n.jsx)(s.p,{children:"Overture Places can be a valuable source for conflating with or enhancing your own existing dataset."}),(0,n.jsx)(s.p,{children:"In this example, suppose we want to use OpenStreetMap POIs for a project but would like to fill in any missing attributes such as addresses or phone numbers with Overture Place data."}),(0,n.jsx)(s.p,{children:"Using some basic matching logic, we can join these two datasets together to create a more robust final product. By also joining the GERS ID to our output dataset we could easily keep our now conflated dataset synced with future Overture releases with a simple join."}),(0,n.jsxs)(s.p,{children:["To run this example yourself, an Oregon PBF can be obtained from ",(0,n.jsx)(s.a,{href:"https://download.geofabrik.de/north-america/us/oregon.html",children:"Geofabrik"}),"."]}),(0,n.jsxs)(s.p,{children:["Note: Joining data with a CDLA Permissive 2.0 license to OSM is permitted but the resulting data may need to carry the Open Database License (ODbL) if it is a derivative database.  Please see the ",(0,n.jsx)(s.a,{href:"https://osmfoundation.org/wiki/Licence/Community_Guidelines/Collective_Database_Guideline_Guideline",children:"OSM Collective Database Guideline"})," for information on this topic."]}),(0,n.jsxs)(a,{children:[(0,n.jsx)("summary",{children:"Query"}),(0,n.jsx)("div",{children:(0,n.jsx)(l.A,{query:"LOAD spatial; -- noqa\nLOAD httpfs;  -- noqa\n-- Access the data on AWS in this example\nSET s3_region='us-west-2';\n\nCOPY (\n-- We'll first select OSM data from Oregon with amenity = restaurant\n    WITH osm AS (\n        SELECT kind,\n            id,\n            tags->>'name' AS name,\n            tags->>'addr:housenumber' AS housenumber,\n            tags->>'addr:street' AS street,\n            tags->>'addr:postcode' AS postcode,\n            tags->>'addr:city' AS city,\n            tags->>'website' AS website,\n            tags->>'phone' AS phone,\n            lat,\n            lon,\n            tags\n        FROM st_readosm(\n                'oregon-latest.osm.pbf'\n            )\n        WHERE tags->>'amenity' = 'restaurant'\n    ),\n-- Then select Overture data with any category containing the word restauarant in Oregon.\n    overture AS (\n        SELECT id,\n            names.primary AS \"names.primary\",\n            websites[1] AS website,\n            socials[1] AS social,\n            emails[1] AS email,\n            phones[1] AS phone,\n            addresses[1].freeform AS freeform,\n            addresses[1].locality AS locality,\n            addresses[1].postcode AS postcode,\n            addresses[1].region AS region,\n            addresses[1].country AS country,\n            geometry AS geometry  -- DuckDB v.1.1.0 will autoload this as a `geometry` type\n        FROM read_parquet('s3://overturemaps-us-west-2/release/__OVERTURE_RELEASE/theme=places/*/*')\n        WHERE region = 'OR'\n            AND country = 'US'\n            AND categories.primary ilike '%restaurant%'\n    )\n-- Now that we have our input data we will join them together.\n    SELECT\n        -- With the GERS ID joined to the final result this dataset can be quickly synced to future Overture releases\n        overture.id AS GERS_ID,\n        osm.name,\n        -- Using CASE statements, we'll favor OSM data when it is present but use Overture data wherever there are gaps\n        CASE\n            WHEN osm.housenumber IS NOT NULL\n            OR osm.street IS NOT NULL THEN concat(osm.housenumber, ' ', osm.street)\n            ELSE overture.freeform\n        END AS address,\n        CASE\n            WHEN osm.city IS NOT NULL THEN osm.city\n            ELSE overture.locality\n        END AS city,\n        CASE\n            WHEN osm.postcode IS NOT NULL THEN osm.postcode\n            ELSE overture.postcode\n        END AS postcode,\n        CASE\n            WHEN osm.website IS NOT NULL THEN osm.website\n            ELSE overture.website\n        END AS website,\n        CASE\n            WHEN osm.phone IS NOT NULL THEN osm.phone\n            ELSE overture.phone\n        END AS phone,\n        overture.social,\n        overture.email,\n        st_point(osm.lon, osm.lat) AS geometry\n    FROM osm\n-- To join the data, we'll first match features that have the same OR similar names\n        LEFT JOIN overture ON (\n            osm.name = overture.\"names.primary\"\n            OR osm.name ilike concat('%', overture.\"names.primary\", '%')\n            OR overture.\"names.primary\" ilike concat('%', osm.name, '%')\n            OR damerau_levenshtein(osm.name, overture.\"names.primary\") < 3\n        )\n-- Then use a small buffer to match features that are nearby to each other\n        AND st_intersects(\n            st_buffer(overture.geometry::geometry, 0.003),\n            st_point(osm.lon, osm.lat)\n        )\n) TO 'oregon_restaurants_combined.parquet';\n"})})]})]}),(0,n.jsxs)(o.default,{value:"Find building addresses",label:"Find building addresses",default:!0,children:[(0,n.jsxs)(s.p,{children:["Suppose you are interested in having address data attached to buildings. The ",(0,n.jsx)(s.a,{href:"/schema/reference/addresses/address/",children:"Overture addresses"})," theme might be a good place to check, but let's assume it does not cover the area you are interested in."]}),(0,n.jsx)(s.p,{children:"The places theme has wide coverage and many of the place point features have addresses associated with them. Using an intersect we can find places that fall inside buildings and then join the place's address to the building polygon."}),(0,n.jsxs)(a,{children:[(0,n.jsx)("summary",{children:"Query"}),(0,n.jsx)("div",{children:(0,n.jsx)(l.A,{query:"LOAD spatial; -- noqa\nLOAD httpfs;  -- noqa\n-- Access the data on AWS in this example\nSET s3_region='us-west-2';\n\nCOPY (\n    -- First query places with address data in the area we are interested in\n    WITH places AS\n        (\n        SELECT *\n        FROM read_parquet('s3://overturemaps-us-west-2/release/__OVERTURE_RELEASE/theme=places/*/*')\n        WHERE bbox.xmin BETWEEN 14.38 AND 14.44\n        AND bbox.ymin BETWEEN 50.07 AND 50.11\n        AND addresses[1].freeform IS NOT NULL\n        ),\n    -- Then get buildings in the same area\n    buildings as\n        (\n        SELECT *\n        FROM read_parquet('s3://overturemaps-us-west-2/release/__OVERTURE_RELEASE/theme=buildings/type=building/*')\n        WHERE bbox.xmin > 14.38 AND bbox.xmax < 14.44\n        AND bbox.ymin > 50.07 AND bbox.ymax < 50.11\n        )\n    -- Join the data using an intersect and select distinct to avoid duplicates\n    SELECT distinct(buildings.id), buildings.*, places.addresses\n    FROM buildings\n    LEFT JOIN places on st_intersects(places.geometry, buildings.geometry)\n    ORDER BY buildings.id\n) TO 'prague_places_in_buildings.parquet';\n"})})]})]})]}),"\n",(0,n.jsx)(s.h2,{id:"tools-and-libraries",children:"Tools and libraries"}),"\n",(0,n.jsx)(s.h3,{id:"rapid",children:"Rapid"}),"\n",(0,n.jsxs)(s.p,{children:["Rapid, an OpenStreetMap editor, is capable of displaying places data as a reference layer by following the guide ",(0,n.jsx)(s.a,{href:"/examples/rapid-id/",children:"here"}),"."]}),"\n",(0,n.jsx)(s.p,{children:"The license is compatible with OSM and this data can be used for mapping."})]})}function m(e={}){let{wrapper:s}={...(0,r.R)(),...e.components};return s?(0,n.jsx)(s,{...e,children:(0,n.jsx)(p,{...e})}):p(e)}},48821:(e,s,t)=>{t.d(s,{A:()=>i});var a=t(74848),n=t(76634),r=t(90062);function i(e){let{siteConfig:{customFields:s}}=(0,r.A)();var t=e.query.replace("__OVERTURE_RELEASE",s.overtureRelease);t=(t=t.replace("__ATHENA_OVERTURE_RELEASE","v"+s.overtureRelease.replaceAll(".","_").replaceAll("-","_"))).replace("__PMTILES_OVERTURE_RELEASE",s.overtureRelease.split(".",1));var i=e.language||"sql";return(0,a.jsx)(n.default,{language:i,title:e.title,children:t})}},78679:(e,s,t)=>{t.d(s,{A:()=>a});let a=t.p+"assets/images/places-coverage-e42e20322ffeaf2f9be9cb3f25719635.png"}}]);