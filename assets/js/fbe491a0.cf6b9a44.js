"use strict";(self.webpackChunkoverture_documentation=self.webpackChunkoverture_documentation||[]).push([[3373],{14376:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>f,contentTitle:()=>m,default:()=>E,frontMatter:()=>p,metadata:()=>g,toc:()=>b});var n=a(74848),r=a(28453),s=a(11470),l=a(19365),o=a(97577);const i="LOAD spatial;\nLOAD httpfs;\nSET s3_region='us-west-2';\n\nCOPY(\n    SELECT\n       id,\n       names.primary as name,\n       CAST(elevation * 3.28084 AS INT) AS elevation_ft,\n       ST_GeomFromWKB(geometry) as geometry,\n    FROM read_parquet('s3://overturemaps-us-west-2/release/__OVERTURE_RELEASE/theme=base/type=land/*', filename=true, hive_partitioning=1)\n    WHERE subtype = 'physical' AND class IN ('peak','volcano') AND elevation IS NOT NULL\n    AND bbox.xmin BETWEEN -124.71 AND -116.47\n    AND bbox.ymin BETWEEN 41.99 AND 46.30\n) TO 'oregon_peaks.geojson'\nWITH (FORMAT GDAL, DRIVER 'GeoJSON');\n",u="LOAD spatial;\nLOAD azure;\nSET azure_storage_connection_string = 'DefaultEndpointsProtocol=https;AccountName=overturemapswestus2;AccountKey=;EndpointSuffix=core.windows.net';\n\nCOPY(\n  SELECT\n    id,\n    names.primary as primary_name,\n    height,\n    ST_GeomFromWKB(geometry) as geometry\n  FROM read_parquet('azure://release/__OVERTURE_RELEASE/theme=buildings/type=building/*', filename=true, hive_partitioning=1)\n  WHERE names.primary IS NOT NULL\n  AND bbox.xmin BETWEEN -84.36 AND -82.42\n  AND bbox.ymin BETWEEN 41.71 AND 43.33\n) TO 'detroit_buildings.geojsonseq' WITH (FORMAT GDAL, DRIVER 'GeoJSONSeq');\n",d="LOAD spatial;\nLOAD httpfs;\nSET s3_region='us-west-2';\n\nCOPY(\n    SELECT\n        id,\n        division_id,\n        names.primary,\n        ST_GeomFromWKB(geometry) as geometry\n        FROM\n            read_parquet('s3://overturemaps-us-west-2/release/__OVERTURE_RELEASE/theme=divisions/type=division_area/*', hive_partitioning=1)\n        WHERE\n            subtype = 'county'\n            AND country = 'US'\n            AND region = 'US-PA'\n) TO 'pennsylvania_counties.gpkg' WITH (FORMAT GDAL, DRIVER 'GPKG');\n",c="LOAD spatial;\nLOAD httpfs;\nSET s3_region='us-west-2';\n\nCOPY(                                       -- COPY <query> TO <output> saves the results to disk.\n    SELECT\n       id,\n       names.primary as name,\n       confidence AS confidence,\n       CAST(socials AS JSON) as socials,    -- Ensure each attribute can be serialized to JSON\n       ST_GeomFromWKB(geometry) as geometry -- GDAL understands this to be the geometry\n    FROM read_parquet('s3://overturemaps-us-west-2/release/__OVERTURE_RELEASE/theme=places/type=place/*', filename=true, hive_partitioning=1)\n    WHERE categories.primary = 'pizza_restaurant'\n    AND bbox.xmin BETWEEN -75 AND -73       -- Only use the bbox min values\n    AND bbox.ymin BETWEEN 40 AND 41         -- because they are point geometries.\n\n) TO 'nyc_pizza.geojson' WITH (FORMAT GDAL, DRIVER 'GeoJSON');\n",h="LOAD spatial;\nLOAD httpfs;\nSET s3_region='us-west-2';\n\nCOPY(\n    SELECT\n       id,\n       names.primary as name,\n       class,\n       ST_GeomFromWKB(geometry) as geometry -- GDAL understands this to be the geometry\n    FROM read_parquet('s3://overturemaps-us-west-2/release/__OVERTURE_RELEASE/theme=transportation/type=segment/*', filename=true, hive_partitioning=1)\n    WHERE bbox.xmin > 2.276\n      AND bbox.ymin > 48.865\n      AND bbox.xmax < 2.314\n      AND bbox.ymax < 48.882\n) TO 'paris_roads.geojson' WITH (FORMAT GDAL, DRIVER 'GeoJSON');\n",p={title:"DuckDB"},m=void 0,g={id:"getting-data/duckdb",title:"DuckDB",description:"DuckDB is powerful analytics tool that allows you to query remote files and download only the data you want.",source:"@site/docs/getting-data/duckdb.mdx",sourceDirName:"getting-data",slug:"/getting-data/duckdb",permalink:"/getting-data/duckdb",draft:!1,unlisted:!1,tags:[],version:"current",lastUpdatedAt:172555341e4,frontMatter:{title:"DuckDB"},sidebar:"docs",previous:{title:"Getting Overture Data",permalink:"/getting-data/"},next:{title:"Python Command-line Tool",permalink:"/getting-data/overturemaps-py"}},f={},b=[{value:"Installation",id:"installation",level:2},{value:"Downloading Overture Data",id:"downloading-overture-data",level:2},{value:"Next steps",id:"next-steps",level:2}];function x(e){const t={a:"a",admonition:"admonition",code:"code",em:"em",h2:"h2",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,r.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)(t.p,{children:[(0,n.jsx)(t.a,{href:"https://duckdb.org/",children:"DuckDB"})," is powerful analytics tool that allows you to query remote files and download only the data you want."]}),"\n",(0,n.jsx)(t.h2,{id:"installation",children:"Installation"}),"\n",(0,n.jsxs)(t.p,{children:[(0,n.jsx)(t.a,{href:"https://duckdb.org/docs/installation/",children:"Install DuckDB"}),". You'll need extensions to work with spatial data in the cloud. Run the following commands in the DuckDB command line:"]}),"\n",(0,n.jsxs)(t.ol,{children:["\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.code,{children:"INSTALL SPATIAL;"})," to install the ",(0,n.jsx)(t.a,{href:"https://github.com/duckdblabs/duckdb_spatial",children:"duckdb_spatial"})," extension."]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.code,{children:"INSTALL httpfs;"})," or ",(0,n.jsx)(t.code,{children:"INSTALL azure;"})," to read from either Amazon S3 (",(0,n.jsx)(t.a,{href:"https://duckdb.org/docs/guides/import/s3_import.html",children:"httpfs"}),") or Microsoft Azure Blob Storage (",(0,n.jsx)(t.a,{href:"https://duckdb.org/docs/extensions/azure",children:"azure"}),")."]}),"\n"]}),"\n",(0,n.jsx)(t.h2,{id:"downloading-overture-data",children:"Downloading Overture Data"}),"\n",(0,n.jsx)(t.p,{children:"These SQL queries will access Overture data in the cloud and download only the attributes that you request."}),"\n",(0,n.jsxs)(s.default,{queryString:"query",children:[(0,n.jsxs)(l.default,{value:"Places",label:"Places",children:[(0,n.jsxs)(t.p,{children:["Download all pizza restaurants in New York City as a ",(0,n.jsx)(t.code,{children:"GeoJSON"})," file."]}),(0,n.jsx)(o.A,{query:c}),(0,n.jsxs)(t.p,{children:["See the ",(0,n.jsx)(t.a,{href:"/schema/reference/places/place",children:"places schema"})," to learn more about each attribute or the ",(0,n.jsx)(t.a,{href:"/schema/concepts/names/",children:"common schema concepts"})," to better understand ",(0,n.jsx)(t.code,{children:"names.primary"})," from ",(0,n.jsx)(t.code,{children:"names.common"}),"."]})]}),(0,n.jsxs)(l.default,{value:"Buildings",label:"Buildings",children:[(0,n.jsx)(t.p,{children:"Access Overture buildings data hosted on Azure to download named buildings around Detroit, Michigan. Saves as newline-delimited GeoJSON."}),(0,n.jsx)(o.A,{query:u})]}),(0,n.jsxs)(l.default,{value:"Roads",label:"Roads",children:[(0,n.jsxs)(t.p,{children:["Download roads in Paris around the ",(0,n.jsx)(t.em,{children:"Arc de Triomphe"})," and save as GeoJSON."]}),(0,n.jsx)(o.A,{query:h})]}),(0,n.jsxs)(l.default,{value:"Mountains",label:"Mountains",children:[(0,n.jsx)(t.p,{children:"Download mountain peaks in Oregon, USA from the base theme, convert the elevation attribute to feet, and save the result as a GeoJSON file."}),(0,n.jsx)(o.A,{query:i})]}),(0,n.jsxs)(l.default,{value:"Counties",label:"Counties",children:[(0,n.jsx)(t.p,{children:"County-level geometries for Pennsylvania from the divisions theme and outputs a GeoPackage."}),(0,n.jsx)(o.A,{query:d})]}),(0,n.jsxs)(l.default,{value:"geoparquet",label:"As GeoParquet (Experimental)",children:[(0,n.jsxs)(t.p,{children:["The ",(0,n.jsx)(t.a,{href:"https://duckdb.org/docs/installation/?version=main",children:(0,n.jsx)(t.em,{children:"Nightly build (bleeding edge)"})})," of DuckDB includes support for ",(0,n.jsx)(t.a,{href:"https://github.com/duckdb/duckdb/pull/12503",children:"reading and writing GeoParquet"}),". For example, using at least DuckDB v1.0.1-dev4917, you can run the following query:"]}),(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-sql",children:"COPY(\n    SELECT\n      *\n    FROM read_parquet('s3://overturemaps-us-west-2/release/2024-08-20.0/theme=places/type=place/*', filename=true, hive_partitioning=1)\n    LIMIT 100000\n) TO 'places.parquet';\n"})}),(0,n.jsxs)(t.p,{children:["DuckDB recognizes the input as geoparquet and will automatically cast the ",(0,n.jsx)(t.em,{children:"geometry"})," column to a ",(0,n.jsx)(t.code,{children:"GEOMETRY"})," type.\nThe ",(0,n.jsx)(t.code,{children:"COPY"})," command writes a parquet file of 100,000 places named ",(0,n.jsx)(t.code,{children:"places.parquet"})," with the appropriate geoparquet metadata."]})]})]}),"\n",(0,n.jsx)(t.hr,{}),"\n",(0,n.jsxs)(t.admonition,{type:"tip",children:[(0,n.jsxs)(t.p,{children:["To download the data as ",(0,n.jsx)(t.code,{children:"shapefile"}),", replace the last line of any of the above queries:"]}),(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-sql",children:") TO 'overture_data.shp' WITH (FORMAT GDAL, DRIVER 'ESRI Shapefile');\n"})}),(0,n.jsxs)(t.p,{children:["or as a ",(0,n.jsx)(t.code,{children:"geopackage"}),":"]}),(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-sql",children:") TO 'overture_data.gpkg' WITH (FORMAT GDAL, DRIVER 'GeoPackage');\n"})}),(0,n.jsxs)(t.p,{children:["The DuckDB Spatial extension supports more than ",(0,n.jsx)(t.a,{href:"https://duckdb.org/docs/extensions/spatial.html#st_read--read-spatial-data-from-files",children:"50 geospatial file formats"}),"."]})]}),"\n",(0,n.jsx)(t.h2,{id:"next-steps",children:"Next steps"}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsxs)(t.li,{children:["Visualize the data in ",(0,n.jsx)(t.a,{href:"/examples/QGIS",children:"QGIS"})," or ",(0,n.jsx)(t.a,{href:"/examples/kepler-gl",children:"kepler.gl"}),"."]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.a,{href:"/examples/build-a-map",children:"Make an interactive map"}),"."]}),"\n",(0,n.jsxs)(t.li,{children:["Consult one of our ",(0,n.jsx)(t.a,{href:"/guides/",children:"Data Guides"})," to learn more about the data and for more advanced queries."]}),"\n"]})]})}function E(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(x,{...e})}):x(e)}},19365:(e,t,a)=>{a.r(t),a.d(t,{default:()=>l});a(96540);var n=a(18215);const r={tabItem:"tabItem_Ymn6"};var s=a(74848);function l(e){let{children:t,hidden:a,className:l}=e;return(0,s.jsx)("div",{role:"tabpanel",className:(0,n.A)(r.tabItem,l),hidden:a,children:t})}},11470:(e,t,a)=>{a.r(t),a.d(t,{default:()=>A});var n=a(96540),r=a(18215),s=a(23104),l=a(56347),o=a(205),i=a(57485),u=a(31682),d=a(89466);function c(e){return n.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,n.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function h(e){const{values:t,children:a}=e;return(0,n.useMemo)((()=>{const e=t??function(e){return c(e).map((e=>{let{props:{value:t,label:a,attributes:n,default:r}}=e;return{value:t,label:a,attributes:n,default:r}}))}(a);return function(e){const t=(0,u.X)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,a])}function p(e){let{value:t,tabValues:a}=e;return a.some((e=>e.value===t))}function m(e){let{queryString:t=!1,groupId:a}=e;const r=(0,l.W6)(),s=function(e){let{queryString:t=!1,groupId:a}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!a)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return a??null}({queryString:t,groupId:a});return[(0,i.aZ)(s),(0,n.useCallback)((e=>{if(!s)return;const t=new URLSearchParams(r.location.search);t.set(s,e),r.replace({...r.location,search:t.toString()})}),[s,r])]}function g(e){const{defaultValue:t,queryString:a=!1,groupId:r}=e,s=h(e),[l,i]=(0,n.useState)((()=>function(e){let{defaultValue:t,tabValues:a}=e;if(0===a.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!p({value:t,tabValues:a}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${a.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const n=a.find((e=>e.default))??a[0];if(!n)throw new Error("Unexpected error: 0 tabValues");return n.value}({defaultValue:t,tabValues:s}))),[u,c]=m({queryString:a,groupId:r}),[g,f]=function(e){let{groupId:t}=e;const a=function(e){return e?`docusaurus.tab.${e}`:null}(t),[r,s]=(0,d.Dv)(a);return[r,(0,n.useCallback)((e=>{a&&s.set(e)}),[a,s])]}({groupId:r}),b=(()=>{const e=u??g;return p({value:e,tabValues:s})?e:null})();(0,o.A)((()=>{b&&i(b)}),[b]);return{selectedValue:l,selectValue:(0,n.useCallback)((e=>{if(!p({value:e,tabValues:s}))throw new Error(`Can't select invalid tab value=${e}`);i(e),c(e),f(e)}),[c,f,s]),tabValues:s}}var f=a(92303);const b={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var x=a(74848);function E(e){let{className:t,block:a,selectedValue:n,selectValue:l,tabValues:o}=e;const i=[],{blockElementScrollPositionUntilNextRender:u}=(0,s.a_)(),d=e=>{const t=e.currentTarget,a=i.indexOf(t),r=o[a].value;r!==n&&(u(t),l(r))},c=e=>{let t=null;switch(e.key){case"Enter":d(e);break;case"ArrowRight":{const a=i.indexOf(e.currentTarget)+1;t=i[a]??i[0];break}case"ArrowLeft":{const a=i.indexOf(e.currentTarget)-1;t=i[a]??i[i.length-1];break}}t?.focus()};return(0,x.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,r.A)("tabs",{"tabs--block":a},t),children:o.map((e=>{let{value:t,label:a,attributes:s}=e;return(0,x.jsx)("li",{role:"tab",tabIndex:n===t?0:-1,"aria-selected":n===t,ref:e=>i.push(e),onKeyDown:c,onClick:d,...s,className:(0,r.A)("tabs__item",b.tabItem,s?.className,{"tabs__item--active":n===t}),children:a??t},t)}))})}function v(e){let{lazy:t,children:a,selectedValue:r}=e;const s=(Array.isArray(a)?a:[a]).filter(Boolean);if(t){const e=s.find((e=>e.props.value===r));return e?(0,n.cloneElement)(e,{className:"margin-top--md"}):null}return(0,x.jsx)("div",{className:"margin-top--md",children:s.map(((e,t)=>(0,n.cloneElement)(e,{key:t,hidden:e.props.value!==r})))})}function y(e){const t=g(e);return(0,x.jsxs)("div",{className:(0,r.A)("tabs-container",b.tabList),children:[(0,x.jsx)(E,{...t,...e}),(0,x.jsx)(v,{...t,...e})]})}function A(e){const t=(0,f.A)();return(0,x.jsx)(y,{...e,children:c(e.children)},String(t))}},97577:(e,t,a)=>{a.d(t,{A:()=>l});var n=a(21432),r=a(44586),s=a(74848);function l(e){const{siteConfig:{customFields:t}}=(0,r.A)();var a=e.query.replace("__OVERTURE_RELEASE",t.overtureRelease);a=(a=a.replace("__ATHENA_OVERTURE_RELEASE","v"+t.overtureRelease.replaceAll(".","_").replaceAll("-","_"))).replace("__PMTILES_OVERTURE_RELEASE",t.overtureRelease.split(".",1));var l=e.language||"sql";return(0,s.jsx)(n.default,{language:l,title:e.title,children:a})}}}]);