"use strict";(self.webpackChunkoverture_schema=self.webpackChunkoverture_schema||[]).push([[177],{922:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>A,contentTitle:()=>C,default:()=>D,frontMatter:()=>_,metadata:()=>E,toc:()=>O});var n=a(7462),o=a(7294),l=a(3905),i=a(2403),r=a(4762),s=a(2425),p=a(4613),m=a.n(p),c=a(8999),d="#3063d2",u="#09bac6",g="#dce6ef",h="#a7bfd7",y="#071F3F",k="#071F3F",b="#dce6ef";const f={placeHighZoom:{id:"placeHighZoom",type:"symbol",source:"placenames","source-layer":"placenames",minzoom:9,maxzoom:24,layout:{"text-field":["get","name"],"text-font":["Noto Sans Bold"],"text-size":["step",["zoom"],14,10,["match",["get","localityType"],["borough"],14,["suburb"],12,0],12,["match",["get","localityType"],["borough"],16,["suburb"],14,["neighborhood"],10,0],14,["match",["get","localityType"],["borough"],18,["suburb"],16,["neighborhood"],12,0],15,["match",["get","localityType"],["borough"],20,["suburb"],18,["neighborhood"],14,0],16,["match",["get","localityType"],["borough"],20,["suburb"],18,["neighborhood"],14,["block"],12,0]],"text-transform":["step",["zoom"],"none",11,"uppercase"],"text-max-width":6,"symbol-avoid-edges":!0,"symbol-sort-key":["get","sort_key"],"text-padding":10,"text-justify":"auto"},paint:{"text-color":k,"text-halo-color":b,"text-halo-width":1}},placeMidZoom:{id:"placeMidZoom",type:"symbol",source:"placenames","source-layer":"placenames",minzoom:8,maxzoom:24,filter:["all",["has","name"],["step",["zoom"],["==","$type","Point"],8,["match",["get","localityType"],["settlement"],!0,!1],9,["match",["get","localityType"],["urban","settlement"],!0,!1]]],layout:{"text-field":["get","name"],"text-font":["Noto Sans Bold"],"text-size":["step",["zoom"],10,9,["match",["get","localityType"],["megacity"],20,["metropolis"],18,["city"],16,["municipality"],14,["town"],10,0],10,["match",["get","localityType"],["megacity"],22,["metropolis"],20,["city"],18,["municipality"],16,["town"],12,0],12,["match",["get","localityType"],["megacity"],22,["metropolis"],20,["city"],18,["municipality"],16,["town"],12,["village"],10,0],14,["match",["get","subclass"],["megacity"],22,["metropolis"],20,["city"],18,["municipality"],16,["town"],14,["village","hamlet"],12,0],15,["match",["get","subclass"],["megacity"],22,["metropolis"],20,["city"],18,["municipality"],16,["town"],14,["village","hamlet"],14,0],16,["match",["get","subclass"],["village","hamlet"],16,0]],"text-transform":["step",["zoom"],"none",11,"uppercase"],"text-padding":["step",["zoom"],10,9,8,10,5,12,3],"text-max-width":6,"symbol-avoid-edges":!0,"symbol-sort-key":["get","sort_key"],"text-justify":"auto"},paint:{"text-color":k,"text-halo-color":b,"text-halo-width":1}}},N={id:"buildings",type:"fill-extrusion",minzoom:12,maxzoom:24,source:"buildings","source-layer":"buildings",paint:{"fill-extrusion-color":"#dce6ef","fill-extrusion-opacity":.6,"fill-extrusion-base":0,"fill-extrusion-height":["case",["has","height"],["to-number",["get","height"]],3.2]}},T={id:"placesLabel",type:"symbol",source:"places","source-layer":"places",filter:["all",["has","name"],[">",["get","confidence"],.75]],minzoom:15,maxzoom:24,layout:{"text-field":["concat","\u25a0\n",["get","name"]],"text-font":["Noto Sans Bold"],"text-max-width":5,"text-size":10,"text-line-height":1,"text-justify":"center","text-anchor":"center","text-radial-offset":.8,"text-padding":4},paint:{"text-color":k,"text-halo-color":b,"text-halo-width":1}},x={footwayCasing:{id:"footwayCasing",type:"line",source:"roads","source-layer":"roads",minzoom:15,maxzoom:24,filter:["match",["get","class"],["footway"],!0,!1],layout:{"line-cap":"round","line-join":"round"},paint:{"line-width":["interpolate",["exponential",1.5],["zoom"],12,.25,20,1.3],"line-gap-width":["interpolate",["exponential",1.5],["zoom"],12,.5,16,3,22,25],"line-color":g}},footway:{id:"footway",type:"line",source:"roads","source-layer":"roads",minzoom:15,maxzoom:24,filter:["match",["get","class"],["footway"],!0,!1],layout:{"line-cap":"round","line-join":"round"},paint:{"line-width":["interpolate",["exponential",1.5],["zoom"],12,.5,16,3,22,25],"line-color":"#b9ccdf"}},parkingAisleUnknownCasing:{id:"parkingAisleUnknownCasing",type:"line",source:"roads","source-layer":"roads",minzoom:14,maxzoom:24,filter:["match",["get","class"],["parkingAisle","unknown"],!0,!1],layout:{"line-cap":"round","line-join":"round"},paint:{"line-width":["interpolate",["exponential",1.5],["zoom"],12,.25,20,1.3],"line-gap-width":["interpolate",["exponential",1.5],["zoom"],12,.5,16,3.5,22,75],"line-color":g}},residentialCasing:{id:"residentialCasing",type:"line",source:"roads","source-layer":"roads",minzoom:12,maxzoom:24,filter:["match",["get","class"],["residential"],!0,!1],layout:{"line-cap":"round","line-join":"round"},paint:{"line-width":["interpolate",["exponential",1.5],["zoom"],12,.75,20,1.3],"line-gap-width":["interpolate",["exponential",1.5],["zoom"],12,1,16,6,22,125],"line-color":g}},secondaryTertiaryCasing:{id:"secondaryTertiaryCasing",type:"line",source:"roads","source-layer":"roads",minzoom:11,maxzoom:24,filter:["match",["get","class"],["secondary","tertiary"],!0,!1],paint:{"line-width":["interpolate",["exponential",1.5],["zoom"],12,1,20,1.3],"line-gap-width":["interpolate",["exponential",1.5],["zoom"],10,.5,12,2.2,16,6.6,22,160],"line-color":g}},primaryCasing:{id:"primaryCasing",type:"line",source:"roads","source-layer":"roads",minzoom:8,maxzoom:24,filter:["match",["get","class"],["primary"],!0,!1],layout:{"line-cap":["step",["zoom"],"butt",16,"round"],"line-join":["step",["zoom"],"miter",16,"round"]},paint:{"line-width":["interpolate",["exponential",1.5],["zoom"],12,1,20,1.4],"line-gap-width":["interpolate",["exponential",1.5],["zoom"],8,.5,12,3.1,16,9.3,22,175],"line-color":g}},parkingAisleUnknown:{id:"parkingAisleUnknown",type:"line",source:"roads","source-layer":"roads",minzoom:14,maxzoom:24,filter:["match",["get","class"],["parkingAisle","unknown"],!0,!1],layout:{"line-cap":"round","line-join":"round"},paint:{"line-width":["interpolate",["exponential",1.5],["zoom"],12,.5,16,3.5,22,75],"line-color":h}},residential:{id:"residential",type:"line",source:"roads","source-layer":"roads",minzoom:12,maxzoom:24,filter:["match",["get","class"],["residential"],!0,!1],layout:{"line-cap":["step",["zoom"],"butt",13,"round"],"line-join":["step",["zoom"],"miter",13,"round"]},paint:{"line-width":["interpolate",["exponential",1.5],["zoom"],12,1,16,6,22,125],"line-color":h}},secondaryTertiary:{id:"secondaryTertiary",type:"line",source:"roads","source-layer":"roads",minzoom:10,maxzoom:24,filter:["match",["get","class"],["secondary","tertiary"],!0,!1],layout:{"line-cap":["step",["zoom"],"butt",13,"round"],"line-join":["step",["zoom"],"miter",13,"round"]},paint:{"line-width":["interpolate",["exponential",1.5],["zoom"],10,.5,12,2.2,16,6.6,22,160],"line-color":h}},primary:{id:"primary",type:"line",source:"roads","source-layer":"roads",minzoom:8,maxzoom:24,filter:["match",["get","class"],["primary"],!0,!1],layout:{"line-cap":["step",["zoom"],"butt",13,"round"],"line-join":["step",["zoom"],"miter",13,"round"]},paint:{"line-width":["interpolate",["exponential",1.5],["zoom"],8,.5,12,3.1,16,9.3,22,175],"line-color":h}},motorwayCasing:{id:"motorwayCasing",type:"line",source:"roads","source-layer":"roads",minzoom:6,maxzoom:24,filter:["match",["get","class"],["motorway"],!0,!1],layout:{"line-cap":["step",["zoom"],"butt",13,"round"],"line-join":["step",["zoom"],"miter",13,"round"]},paint:{"line-width":["interpolate",["exponential",1.5],["zoom"],12,1,20,1.4],"line-gap-width":["interpolate",["exponential",1.5],["zoom"],6,.5,12,3.3,16,9.9,22,175],"line-color":g}},motorway:{id:"motorway",type:"line",source:"roads","source-layer":"roads",minzoom:6,maxzoom:24,filter:["match",["get","class"],["motorway"],!0,!1],layout:{"line-cap":["step",["zoom"],"butt",12,"round"],"line-join":["step",["zoom"],"miter",12,"round"]},paint:{"line-width":["interpolate",["exponential",1.5],["zoom"],6,.5,12,3.3,16,9.9,22,175],"line-color":"#95b2d0"}},residentialLabel:{id:"residentialLabel",type:"symbol",source:"roads","source-layer":"roads",minzoom:13,maxzoom:24,filter:["match",["get","class"],["residential","unknown"],!0,!1],layout:{"text-transform":"uppercase","text-size":["interpolate",["linear"],["zoom"],13,9,18,["match",["get","class"],["access","path"],9,12]],"text-max-angle":30,"symbol-spacing":["interpolate",["linear"],["zoom"],13,200,16,400],"text-field":["get","name"],"text-font":["Noto Sans Bold"],"symbol-placement":"line","text-padding":5},paint:{"text-color":y,"text-halo-color":"hsl(0,0%,100%)","text-halo-width":1}},highwayLabel:{id:"highwayLabel",type:"symbol",source:"roads","source-layer":"roads",minzoom:13,maxzoom:24,filter:["match",["get","class"],["motorway","primary","secondary","tertiary"],!0,!1],layout:{"text-transform":"uppercase","text-size":["interpolate",["linear"],["zoom"],13,9,18,["match",["get","class"],["access","path"],9,12]],"text-max-angle":30,"symbol-spacing":["interpolate",["linear"],["zoom"],13,200,16,400],"text-field":["get","name"],"text-font":["Noto Sans Bold"],"symbol-placement":"line"},paint:{"text-color":y,"text-halo-color":"hsl(0,0%,100%)","text-halo-width":1}}},w={land:{id:"land",type:"fill",source:"base","source-layer":"land",filter:["match",["get","subType"],["land"],!0,!1],minzoom:0,maxzoom:24,paint:{"fill-color":"#ccdae8"}},sand:{id:"sand",type:"fill",source:"base","source-layer":"land",filter:["match",["get","subType"],["sand"],!0,!1],minzoom:0,maxzoom:24,paint:{"fill-color":"#EBD5BD"}},wetland:{id:"wetland",type:"fill",source:"base","source-layer":"land",filter:["match",["get","subType"],["wetland"],!0,!1],minzoom:0,maxzoom:24,paint:{"fill-color":"#00A9BF"}},forest:{id:"forest",type:"fill",source:"base","source-layer":"land",filter:["match",["get","subType"],["forest","grass","scrub"],!0,!1],minzoom:0,maxzoom:24,paint:{"fill-color":"#09bac6"}}},v={parks:{id:"parks",type:"fill",source:"base","source-layer":"landuse",filter:["match",["get","subType"],["park"],!0,!1],minzoom:0,maxzoom:24,paint:{"fill-color":u}},golfGreens:{id:"golfGreens",type:"fill",source:"base","source-layer":"landuse",filter:["==",["get","class"],"green"],minzoom:0,maxzoom:24,paint:{"fill-color":u}}},S={waterPolygons:{id:"water-fill",type:"fill",source:"base","source-layer":"water",filter:["==",["geometry-type"],"Polygon"],minzoom:0,maxzoom:24,paint:{"fill-color":d}},waterLinestrings:{id:"water-line",type:"line",source:"base","source-layer":"water",filter:["==",["geometry-type"],"LineString"],minzoom:0,maxzoom:24,paint:{"line-width":3,"line-color":d}}};function z(){const e=(0,o.useRef)(null),t=(0,o.useRef)(null),[a]=(0,o.useState)(-122.33),[n]=(0,o.useState)(47.6),[l]=(0,o.useState)(13);return(0,o.useEffect)((()=>{if(t.current)return;let o=new c.b$;m().addProtocol("pmtiles",o.tile),t.current=new(m().Map)({container:e.current,center:[a,n],zoom:l,pitch:45,hash:!0,cooperativeGestures:{windowsHelpText:"Use Ctrl + scroll to zoom the map.",macHelpText:"Use \u2318 + scroll to zoom the map.",mobileHelpText:"Use 2 fingers to move the map."},style:{light:{anchor:"viewport",color:"white",intensity:.8},version:8,glyphs:"https://demotiles.maplibre.org/font/{fontstack}/{range}.pbf",sources:{roads:{type:"vector",url:"pmtiles://../../example-map/tiles/roads.pmtiles"},places:{type:"vector",url:"pmtiles://../../example-map/tiles/places.pmtiles"},placenames:{type:"vector",url:"pmtiles://../../example-map/tiles/placenames.pmtiles"},buildings:{type:"vector",url:"pmtiles://../../example-map/tiles/buildings.pmtiles"},base:{type:"vector",url:"pmtiles://../../example-map/tiles/base.pmtiles"}},layers:[{id:"background",type:"background",minzoom:0,maxzoom:24,paint:{"background-color":"hsl(216,20%,95%)"}},w.land,w.sand,w.wetland,w.forest,v.parks,v.golfGreens,S.waterPolygons,S.waterLinestrings,x.footwayCasing,x.footway,x.parkingAisleUnknownCasing,x.residentialCasing,x.secondaryTertiaryCasing,x.primaryCasing,x.parkingAisleUnknown,x.residential,x.secondaryTertiary,x.primary,x.motorwayCasing,x.motorway,x.residentialLabel,x.highwayLabel,N,T,f.placeHighZoom,f.placeMidZoom]}}),t.current.addControl(new(m().NavigationControl),"top-right"),t.current.addControl(new(m().FullscreenControl));return t.current.addControl(new class{constructor(e){switch(this._options={...e},this._container=document.createElement("div"),this._container.classList.add("maplibregl-ctrl"),this._container.classList.add("closed"),this._options.expandDirection||"right"){case"top":this._container.classList.add("reverse");case"down":this._container.classList.add("column");break;case"left":this._container.classList.add("reverse");case"right":this._container.classList.add("row")}}onAdd(e){this._map=e;const t=document.createElement("input");t.type="range",t.value=50,t.addEventListener("change",(t=>{console.log(t.target.value),e.setFilter("placesLabel",["all",[">=",["number",["get","confidence"]],t.target.value/100]])}));const a=document.createElement("button");a.classList.add("layer"),a.classList.add("active"),a.innerHTML="Places",a.addEventListener("click",(()=>{"visible"==e.getLayoutProperty("placesLabel","visibility")?(e.setLayoutProperty("placesLabel","visibility","none"),a.classList.remove("active"),t.disabled=!0):(e.setLayoutProperty("placesLabel","visibility","visible"),a.classList.add("active"),t.disabled=!1)}));const n=document.createElement("div");return n.appendChild(a),n.appendChild(t),this._container.appendChild(n),this._container}onRemove(){this._container.parentNode?.removeChild(this._container),delete this._map}},"bottom-left"),t.current.addControl(new(m().AttributionControl)({customAttribution:'<a href="https://www.openstreetmap.org/copyright" target="_blank">&copy; OpenStreetMap contributors</a>, <a href="https://overturemaps.org" target="_blank">OvertureMaps Foundation</a>'}),"bottom-right"),()=>{m().removeProtocol("pmtiles")}}),[a,n,l]),o.createElement("div",{className:"map-wrap"},o.createElement("div",{ref:e,className:"map"}))}const _={title:"Build a Basemap"},C="Building a basemap with Overture",E={unversionedId:"using-the-data/build-a-map",id:"using-the-data/build-a-map",title:"Build a Basemap",description:"Step 1: Downloading and processing only what you need",source:"@site/docs/using-the-data/build-a-map.mdx",sourceDirName:"using-the-data",slug:"/using-the-data/build-a-map",permalink:"/using-the-data/build-a-map",draft:!1,tags:[],version:"current",frontMatter:{title:"Build a Basemap"},sidebar:"docs",previous:{title:"Locally (DuckDB)",permalink:"/accessing-the-data/locally"},next:{title:"Visualizing Places Data in Rapid",permalink:"/visualizing_places_data/visualizing-places"}},A={},O=[{value:"Step 1: Downloading and processing only what you need",id:"step-1-downloading-and-processing-only-what-you-need",level:3},{value:"Step 2: Creating a map with Maplibre + PMTiles",id:"step-2-creating-a-map-with-maplibre--pmtiles",level:3},{value:"Step 3: Styling the layers",id:"step-3-styling-the-layers",level:3}],R={toc:O},L="wrapper";function D(e){let{components:t,...a}=e;return(0,l.kt)(L,(0,n.Z)({},R,a,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"building-a-basemap-with-overture"},"Building a basemap with Overture"),(0,l.kt)(z,{mdxType:"Map"}),(0,l.kt)("h3",{id:"step-1-downloading-and-processing-only-what-you-need"},"Step 1: Downloading and processing only what you need"),(0,l.kt)("p",null,"Overture data is released as a single dataset in a cloud-native format (geoparquet), that is partitioned by theme. Accessing the data through a service that can take advantage of these properties provides the best performance. After downloading and converting the data to GeoJSON, we can use ",(0,l.kt)("a",{parentName:"p",href:"https://github.com/felt/tippecanoe"},"tippecanoe")," to create a ",(0,l.kt)("a",{parentName:"p",href:"https://github.com/protomaps/PMTiles"},(0,l.kt)("inlineCode",{parentName:"a"},"PMTiles"))," archive."),(0,l.kt)("p",null,"For illustration, this tutorial demonstrates multiple methods of downloading Overture data across the different themes. Performance tradeoffs are discussed for each theme."),(0,l.kt)(r.Z,{queryString:"theme-data",mdxType:"Tabs"},(0,l.kt)(s.Z,{value:"places",label:"Places",default:!0,mdxType:"TabItem"},(0,l.kt)("p",null,"The places data theme represents business and points of interest in the real world. Read more about the places data schema in the ",(0,l.kt)("a",{parentName:"p",href:"https://docs.overturemaps.org/reference/places/place"},"documentation"),"."),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("p",{parentName:"li"},"To download places data for a specific region, we can use the following DuckDB query to download the places data within a specific bounding box and generate a ",(0,l.kt)("inlineCode",{parentName:"p"},"GeoJSON")," file."),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"LOAD spatial;\nLOAD httpfs;\n-- Access the data on AWS in this example\nSET s3_region='us-west-2';\n\nCOPY (\n    SELECT\n        FILTER(names.common, x->x.language = 'local') [ 1 ].value as name,\n        categories.main as category,\n        ROUND(confidence,2) as confidence,\n        ST_GeomFromWKB(geometry) as geometry\n    FROM read_parquet('s3://overturemaps-us-west-2/release/2023-11-14-alpha.0/theme=places/type=*/*',\n                        filename=true, hive_partitioning=1)\n    WHERE\n        -- Point geometry doesn't require looking at both min and max:\n        bbox.minX BETWEEN -122.679404 AND -121.978275 AND\n        bbox.minY BETWEEN 47.360619 AND 47.786336)\nTO 'places.geojson'\nWITH (FORMAT GDAL, DRIVER 'GeoJSON', SRS 'EPSG:4326');\n"))),(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("p",{parentName:"li"},"Next, create a ",(0,l.kt)("inlineCode",{parentName:"p"},"pmtiles")," archive from ",(0,l.kt)("inlineCode",{parentName:"p"},"places.geojson")," with ",(0,l.kt)("a",{parentName:"p",href:"https://github.com/felt/tippecanoe"},"tippecanoe"),"."),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"tippecanoe -fo places.pmtiles -Z13 -z13 -l places places.geojson\n")),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Tippecanoe flag explanation"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"-fo places.pmtiles")," The output file will be places.pmtiles. It will be overwritten if it exists."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"-Z13")," and ",(0,l.kt)("inlineCode",{parentName:"li"},"-z13")," will produce a tileset starting at zoom 13 and going up to zoom 13 (only 1 zoom level)."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"-l places"),' names the layer "places"')))))),(0,l.kt)(s.Z,{value:"placenames",label:"Placenames",default:!0,mdxType:"TabItem"},"The admins theme contains named localities and their administrative boundaries. To add labels for populated places to the map, we query the admins theme and calculate centroids of administrative areas.",(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("p",{parentName:"li"},"Run the following DuckDB to download placenames from the admins theme for the bounding box to create ",(0,l.kt)("inlineCode",{parentName:"p"},"placenames.geojson")),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"LOAD spatial;\nLOAD azure;\n-- Access the data on Microsoft Azure in this example\nSET azure_storage_connection_string = 'DefaultEndpointsProtocol=https;AccountName=overturemapswestus2;AccountKey=;EndpointSuffix=core.windows.net';\nCOPY (\n    SELECT\n        subType,\n        localityType,\n        FILTER(names.common, x -> x.language = 'local')[1].value as name,\n        adminLevel,\n        ST_CENTROID(ST_GeomFromWKB(geometry)) as geometry\n    FROM read_parquet('azure://release/2023-11-14-alpha.0/theme=admins/type=locality/*',\n                        filename=true, hive_partitioning=1)\n    WHERE bbox.minX > -122.679404 AND bbox.maxX < -121.978275\n      AND bbox.minY > 47.360619 AND bbox.maxY < 47.786336\n) TO 'placenames.geojson'\nWITH (FORMAT GDAL, DRIVER 'GeoJSON', SRS 'EPSG:4326');\n"))),(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("p",{parentName:"li"},"Run ",(0,l.kt)("a",{parentName:"p",href:"https://github.com/felt/tippecanoe"},"tippecanoe")," to produce a ",(0,l.kt)("inlineCode",{parentName:"p"},"pmtiles")," archive from ",(0,l.kt)("inlineCode",{parentName:"p"},"placenames.geojson")),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"tippecanoe -o placenames.pmtiles -Z5 -z10 -l placenames placenames.geojson\n")),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Tippecanoe flag explanation"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"-fo buildings.pmtiles")," is our output file. It will be overwritten if it exists."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"-Z5")," and ",(0,l.kt)("inlineCode",{parentName:"li"},"-z10")," will produce a tileset starting at zoom 5 and going up to zoom 13."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"-l placenames"),' names the layer "placenames"')))))),(0,l.kt)(s.Z,{value:"buildings",label:"Buildings",default:!0,mdxType:"TabItem"},(0,l.kt)("p",null,"Since there are 1.3B buildings in the Overture data, we can first leverage Amazon Athena to filter for only the buildings in the bounding box."),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("p",{parentName:"li"},"Run this query in  Amazon Athena against the ",(0,l.kt)("inlineCode",{parentName:"p"},"overture_2023_10_19_alpha_0")," table, as set up in ",(0,l.kt)("a",{parentName:"p",href:"https://github.com/OvertureMaps/data#accessing-overture-maps-data-1"},"these instructions"),". Download the results as ",(0,l.kt)("inlineCode",{parentName:"p"},"buildings.csv")),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT class,\n    TRY(FILTER(names.common, x -> x.language = 'local')[1].value) as local_name,\n    height,\n    level,\n    CAST(sources AS JSON) as sources,\n    ST_ASTEXT(ST_GeomFromBinary(geometry)) as geometry_wkt\nFROM overture_2023_10_19_alpha_0\nWHERE theme = 'buildings' AND type = 'building'\n    AND bbox.minX > -122.679404 AND bbox.maxX < -121.978275\n    AND bbox.minY > 47.360619 AND bbox.maxY < 47.786336\n"))),(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("p",{parentName:"li"},"Use DuckDB to convert ",(0,l.kt)("inlineCode",{parentName:"p"},"buildings.csv")," into a GeoJSONSeq file."),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"LOAD spatial;\nCOPY (\n    SELECT\n        class, local_name as name, height, level,\n        ST_GeomFromText(geometry_wkt) as geometry\n    FROM read_csv('buildings.csv', header=True, auto_detect=True)\n    ) TO 'buildings.geojsonseq'\nWITH (FORMAT GDAL, DRIVER 'GeoJSONSeq', SRS 'EPSG:4326');\n"))),(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("p",{parentName:"li"},"Run ",(0,l.kt)("a",{parentName:"p",href:"https://github.com/felt/tippecanoe"},"tippecanoe")," to produce a ",(0,l.kt)("inlineCode",{parentName:"p"},"pmtiles")," archive from ",(0,l.kt)("inlineCode",{parentName:"p"},"buildings.geojsonseq")),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"tippecanoe -o buildings.pmtiles -Z13 -z13 -l buildings -P buildings.geojsonseq\n")),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Tippecanoe flag explanation"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"-fo buildings.pmtiles")," is our output file. It will be overwritten if it exists."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"-Z13")," and ",(0,l.kt)("inlineCode",{parentName:"li"},"-z13")," will produce a tileset starting at zoom 13 and going up to zoom 13 (so only 1 zoom level)."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"-l buildings"),' names the layer "buildings"'),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"-P")," allows tippecanoe to read the file in parallel. Since we created a GeoJSON sequence file instead of a single GeoJSON Feature Collection, tippecanoe can process the input data more efficiently.")))))),(0,l.kt)(s.Z,{value:"roads",label:"Roads",default:!0,mdxType:"TabItem"},"Similarly to buildings, we can first use Amazon Athena to generate a CSV of only the roads in our bounding box from the transportation theme.",(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("p",{parentName:"li"},"Run this query in Amazon Athena against the ",(0,l.kt)("inlineCode",{parentName:"p"},"overture_2023_10_19_alpha_0")," table, as set up in ",(0,l.kt)("a",{parentName:"p",href:"https://github.com/OvertureMaps/data#accessing-overture-maps-data-1"},"these instructions"),". Download the results as ",(0,l.kt)("inlineCode",{parentName:"p"},"roads.csv")),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT\n    level,\n    JSON_EXTRACT_SCALAR(road, '$.class') AS road_class,\n    JSON_EXTRACT_SCALAR(road, '$.roadNames.common[0].value') AS road_name,\n    sources[1].dataset AS source,\n    ST_ASTEXT(ST_GeomFromBinary(geometry)) as geometry_wkt\nFROM overture_2023_10_19_alpha_0\nWHERE theme = 'transportation' AND type = 'segment'\n    AND bbox.minX > -122.679404 AND bbox.maxX < -121.978275\n    AND bbox.minY > 47.360619 AND bbox.maxY < 47.786336\n"))),(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("p",{parentName:"li"},"Use DuckDB to convert ",(0,l.kt)("inlineCode",{parentName:"p"},"roads.csv")," into a GeoJSONSeq file."),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"LOAD spatial;\nCOPY (\n    SELECT\n        road_class as class,\n        road_name as name,\n        level,\n        ST_GeomFromText(geometry_wkt) as geometry\n    FROM 'roads.csv'\n    ) TO 'roads.geojsonseq'\nWITH (FORMAT GDAL, DRIVER 'GeoJSONSeq', SRS 'EPSG:4326');\n"))),(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("p",{parentName:"li"},"Run ",(0,l.kt)("a",{parentName:"p",href:"https://github.com/felt/tippecanoe"},"tippecanoe")," to produce a ",(0,l.kt)("inlineCode",{parentName:"p"},"pmtiles")," archive from ",(0,l.kt)("inlineCode",{parentName:"p"},"roads.geojsonseq")),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"tippecanoe -fo roads.pmtiles -Z10 -B10 -z13 -l roads -P roads.geojsonseq\n")),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Tippecanoe flag explanation"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"-fo roads.pmtiles")," is our output file. It will be overwritten if it exists."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"-Z10")," and ",(0,l.kt)("inlineCode",{parentName:"li"},"-z13")," will produce a tileset starting at zoom 10 and going up to zoom 13."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"-B10")," will ensure that all featuers are present from zoom level 10."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"-l roads"),' names the layer "roads"'),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"-P")," allows tippecanoe to read the file in parallel. Since we created a GeoJSON sequence file instead of a single GeoJSON Feature Collection, tippecanoe can process the input data more efficiently.")))))),(0,l.kt)(s.Z,{value:"base",label:"Base (Land, Land Use & Water)",default:!0,mdxType:"TabItem"},(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"Land"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"Landuse"),", and ",(0,l.kt)("inlineCode",{parentName:"p"},"Water")," are the three types available in the ",(0,l.kt)("inlineCode",{parentName:"p"},"Base")," theme. We can use 3 separate queries to obtain the features and then we can combine them into a single pmtiles archive with different layers."),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Athena query to produce `land.csv`"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT subType,\nclass,\nTRY(\n    FILTER(names.common, x->x.language = 'local') [ 1 ].value\n) as name,\nST_ASTEXT(ST_GeomFromBinary(geometry)) as geometry_wkt\nFROM overture_2023_10_19_alpha_0\nWHERE theme = 'base'\n    AND type IN 'land'\n    AND ST_INTERSECTS(\n        ST_ENVELOPE(\n            ST_MULTIPOINT( ARRAY [\n                ST_POINT(-122.679404, 47.360619),\n                ST_POINT(-121.978275, 47.360619),\n                ST_POINT(-122.679404, 47.786336),\n                ST_POINT(-121.978275, 47.786336)\n            ])\n        ),\n        ST_GeomFromBinary(geometry)\n)\n"))),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Athena query to produce `landuse.csv`"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT subType,\n    class,\n    surface,\n    TRY(\n        FILTER(names.common, x->x.language = 'local') [ 1 ].value\n    ) as name,\n    ST_ASTEXT(ST_GeomFromBinary(geometry)) as geometry_wkt\n    FROM overture_2023_10_19_alpha_0\n    WHERE theme = 'base'\n        AND type = 'landuse'\n        AND ST_INTERSECTS(\n            ST_ENVELOPE(\n                ST_MULTIPOINT( ARRAY [\n                    ST_POINT(-122.679404, 47.360619),\n                    ST_POINT(-121.978275, 47.360619),\n                    ST_POINT(-122.679404, 47.786336),\n                    ST_POINT(-121.978275, 47.786336)\n                ])\n            ),\n            ST_GeomFromBinary(geometry)\n    )\n"))),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Athena query to produce `water.csv`"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT subType,\n    class,\n    TRY(\n        FILTER(names.common, x->x.language = 'local') [ 1 ].value\n    ) as name,\n    ST_ASTEXT(ST_GeomFromBinary(geometry)) as geometry_wkt\nFROM overture_2023_10_19_alpha_0\nWHERE theme = 'base'\n    AND subType in ('ocean', 'lake', 'pond', 'reservoir', 'river', 'stream', 'water', 'canal')\n    AND ST_INTERSECTS(\n            ST_ENVELOPE(\n                ST_MULTIPOINT( ARRAY [\n                    ST_POINT(-122.679404, 47.360619),\n                    ST_POINT(-121.978275, 47.360619),\n                    ST_POINT(-122.679404, 47.786336),\n                    ST_POINT(-121.978275, 47.786336)\n                ])\n            ),\n            ST_GeomFromBinary(geometry)\n    )\n")))),(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("p",{parentName:"li"},"Use DuckDB to convert the ",(0,l.kt)("inlineCode",{parentName:"p"},"csv")," files into ",(0,l.kt)("inlineCode",{parentName:"p"},"GeoJSONSeq")," files."),(0,l.kt)("details",null,(0,l.kt)("summary",null,"DuckDB Query (SQL)"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"LOAD SPATIAL;\n  -- Land\n  COPY\n   (\n      SELECT\n          subtype, class, name,\n          ST_GeomFromText(geometry_wkt) as geometry\n      FROM read_csv('land.csv', auto_detect=True, header=True)\n      ) TO 'land.geojsonseq'\n  WITH (FORMAT GDAL, DRIVER 'GeoJSONSeq', SRS 'EPSG:4326');\n  -- LandUse\n  COPY (\n      SELECT\n          subtype, class, name, surface,\n          ST_GeomFromText(geometry_wkt) as geometry\n      FROM read_csv('landuse.csv', auto_detect=True, header=True)\n      ) TO 'landuse.geojsonseq'\n  WITH (FORMAT GDAL, DRIVER 'GeoJSONSeq', SRS 'EPSG:4326');\n  -- Water\n  COPY (\n      SELECT\n          subtype, class, name,\n          ST_GeomFromText(geometry_wkt) as geometry\n      FROM read_csv('water.csv', auto_detect=True, header=True)\n      ) TO 'water.geojsonseq'\n  WITH (FORMAT GDAL, DRIVER 'GeoJSONSeq', SRS 'EPSG:4326');\n")))),(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("p",{parentName:"li"},"Run ",(0,l.kt)("a",{parentName:"p",href:"https://github.com/felt/tippecanoe"},"tippecanoe")," to produce a ",(0,l.kt)("inlineCode",{parentName:"p"},"pmtiles")," archive with three ",(0,l.kt)("inlineCode",{parentName:"p"},"geojsonseq")," file as input:"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"tippecanoe -o base.pmtiles -Z8 -z13 -P \\\n    --named-layer=land:land.geojsonseq \\\n    --named-layer=landuse:landuse.geojsonseq \\\n    --named-layer=water:water.geojsonseq\n")),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Tippecanoe flag explanation"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"-fo tiles/base.pmtiles")," is our output file. It will be overwritten if it exists."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"-Z8")," and ",(0,l.kt)("inlineCode",{parentName:"li"},"-z13")," will produce a tileset starting at zoom 8 going up to zoom 13."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"--named-layer=land:land.geojsonseq")," creates the ",(0,l.kt)("inlineCode",{parentName:"li"},"land")," layer from the contents of ",(0,l.kt)("inlineCode",{parentName:"li"},"land.geojson")," (and similarly for the other files)"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"-P")," allows tippecanoe to read the file in parallel. Since we created a GeoJSON sequence file instead of a single GeoJSON Feature Collection, tippecanoe can process the input data more efficiently."))))))),(0,l.kt)("p",null,"At this point, we should have created five ",(0,l.kt)("inlineCode",{parentName:"p"},"PMTiles")," archives, one for each Overture theme."),(0,l.kt)("h3",{id:"step-2-creating-a-map-with-maplibre--pmtiles"},"Step 2: Creating a map with Maplibre + PMTiles"),(0,l.kt)("p",null,"The map on this page combines a ",(0,l.kt)("a",{parentName:"p",href:"https://docs.maptiler.com/react/maplibre-gl-js/how-to-use-maplibre-gl-js/"},"react maplibre example")," with ",(0,l.kt)("a",{parentName:"p",href:"https://codesandbox.io/s/black-dream-oycvf2?file=/src/App.js"},"PMTiles"),". You can ",(0,l.kt)("a",{parentName:"p",href:"https://github.com/OvertureMaps/how-to/tree/main/src/components/map.js"},"view the source")," for the above map on github for a complete example using react, or, check out the ",(0,l.kt)("a",{parentName:"p",href:"https://labs.overturemaps.org/overture-with-daylight"},"map based on July's release")," for a non-react implementation of PMTiles."),(0,l.kt)("p",null,"Using PMTiles with react requires adding the ",(0,l.kt)("a",{parentName:"p",href:"https://docs.protomaps.com/pmtiles/maplibre"},"PMtiles protocol"),", like this in react:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-javascript"},"import maplibregl from 'maplibre-gl';\nimport { Protocol } from 'pmtiles';\n\nuseEffect(() => {\n  let protocol = new Protocol();\n  maplibregl.addProtocol(\"pmtiles\",protocol.tile);\n\n  ... initialize your map here ...\n\n  return () => {\n    maplibregl.removeProtocol(\"pmtiles\");\n  }\n}, []);\n")),(0,l.kt)("p",null,"Then, reference the tile archives with a relative path when initializing the map:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-javascript"},'  style: {\n    sources: {\n      roads: {\n        type: "vector",\n        url: "pmtiles://../example-map/tiles/roads.pmtiles"\n      },\n      places: {\n        type: "vector",\n        url: "pmtiles://../example-map/tiles/places.pmtiles"\n      },\n    ...\n')),(0,l.kt)("h3",{id:"step-3-styling-the-layers"},"Step 3: Styling the layers"),(0,l.kt)("p",null,"Listed in each tab are the complete styles in the ",(0,l.kt)("a",{parentName:"p",href:"https://maplibre.org/maplibre-style-spec/"},"Maplibre Style Spec")," for the map on this page."),(0,l.kt)(r.Z,{queryString:"map-layer",mdxType:"Tabs"},(0,l.kt)(s.Z,{value:"places",label:"Places",default:!0,mdxType:"TabItem"},(0,l.kt)(i.Z,{language:"json",mdxType:"CodeBlock"},JSON.stringify(T,null,2))),(0,l.kt)(s.Z,{value:"placenames",label:"Placenames",default:!0,mdxType:"TabItem"},(0,l.kt)(i.Z,{language:"json",mdxType:"CodeBlock"},JSON.stringify(f,null,2))),(0,l.kt)(s.Z,{value:"buildings",label:"Buildings",default:!0,mdxType:"TabItem"},(0,l.kt)(i.Z,{language:"json",mdxType:"CodeBlock"},JSON.stringify(N,null,2))),(0,l.kt)(s.Z,{value:"roads",label:"Roads",default:!0,mdxType:"TabItem"},(0,l.kt)(i.Z,{language:"json",mdxType:"CodeBlock"},JSON.stringify(x,null,2))),(0,l.kt)(s.Z,{value:"land",label:"Land",default:!0,mdxType:"TabItem"},(0,l.kt)(i.Z,{language:"json",mdxType:"CodeBlock"},JSON.stringify(w,null,2))),(0,l.kt)(s.Z,{value:"landuse",label:"Landuse",default:!0,mdxType:"TabItem"},(0,l.kt)(i.Z,{language:"json",mdxType:"CodeBlock"},JSON.stringify(v,null,2))),(0,l.kt)(s.Z,{value:"water",label:"Water",default:!0,mdxType:"TabItem"},(0,l.kt)(i.Z,{language:"json",mdxType:"CodeBlock"},JSON.stringify(S,null,2)))))}D.isMDXComponent=!0}}]);