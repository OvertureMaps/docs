"use strict";(self.webpackChunkoverture_documentation=self.webpackChunkoverture_documentation||[]).push([[5499],{2594:(e,s,a)=>{a.d(s,{A:()=>i});var t=a(58069),n=a(40797),r=a(74848);function i(e){const{siteConfig:{customFields:s}}=(0,n.A)();var a=e.query.replaceAll("__OVERTURE_RELEASE",s.overtureRelease);a=(a=a.replaceAll("__ATHENA_OVERTURE_RELEASE","v"+s.overtureRelease.replaceAll(".","_").replaceAll("-","_"))).replaceAll("__PMTILES_OVERTURE_RELEASE",s.overtureRelease.split(".",1));var i=e.language||"sql";return(0,r.jsx)(t.default,{language:i,title:e.title,children:a})}},7968:(e,s,a)=>{a.d(s,{A:()=>t});const t=a.p+"assets/images/slc_hierarchy-a5f0c91ce91673c1b7ab50ca2d3298e3.jpg"},35352:(e,s,a)=>{a.d(s,{A:()=>t});const t=a.p+"assets/images/bootleg-0258a1c538eb23ce30de573f0f1784c0.jpg"},48337:(e,s,a)=>{a.r(s),a.d(s,{assets:()=>l,contentTitle:()=>o,default:()=>c,frontMatter:()=>i,metadata:()=>t,toc:()=>d});var t=a(65087),n=a(74848),r=a(28453);a(2594);const i={title:'Using the GERS "system"'},o=void 0,l={authorsImageUrls:[]},d=[{value:"Understanding GERS IDs",id:"understanding-gers-ids",level:2},{value:"Exploring Overture data with GERS",id:"exploring-overture-data-with-gers",level:2},{value:"Looking up IDs in the GERS Registry",id:"looking-up-ids-in-the-gers-registry",level:2},{value:"Using the data changelog",id:"using-the-data-changelog",level:2},{value:"Using bridge files",id:"using-bridge-files",level:2},{value:"Next steps",id:"next-steps",level:2}];function h(e){const s={a:"a",admonition:"admonition",code:"code",em:"em",h2:"h2",img:"img",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)(s.p,{children:["In the June release, we introduced new components of GERS, including a ",(0,n.jsx)(s.a,{href:"https://github.com/orgs/OvertureMaps/discussions/390",children:"new format for GERS IDs"})," and a ",(0,n.jsx)(s.a,{href:"https://docs.overturemaps.org/gers/registry/",children:"GERS Registry"}),'. In this blog post, we\'ll walk you through the GERS "system" and show you how to ask probing questions of the Overture datasets.']}),"\n",(0,n.jsx)(s.h2,{id:"understanding-gers-ids",children:"Understanding GERS IDs"}),"\n",(0,n.jsxs)(s.p,{children:["First, let's look at the new ID format for GERS. As of the June 2025 release, all GERS IDs are UUIDs: 128-bit, randomly-generated identifiers (",(0,n.jsx)(s.a,{href:"https://datatracker.ietf.org/doc/html/rfc4122",children:"UUID v4"}),") that Overture keeps stable across data releases and updates. These IDs are stored as strings with dashes: ",(0,n.jsx)(s.code,{children:"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"}),"."]}),"\n",(0,n.jsxs)(s.p,{children:["For this release only, we're providing Parquet files that map GERS IDs from the May release to the new GERS UUIDs in June release. These files are partitioned by ",(0,n.jsx)(s.code,{children:"theme"})," and 'type' and can be accessed here: ",(0,n.jsx)(s.code,{children:"s3://overturemaps-extras-us-west-2/june_to_may_id_mapping/"}),"."]}),"\n",(0,n.jsx)(s.h2,{id:"exploring-overture-data-with-gers",children:"Exploring Overture data with GERS"}),"\n",(0,n.jsxs)(s.p,{children:["Let's start our exploration by examining how GERS IDs work in one Overture dataset. The ",(0,n.jsxs)(s.a,{href:"https://docs.overturemaps.org/guides/divisions/",children:[(0,n.jsx)(s.code,{children:"divisions"})," theme"]})," contains administrative boundaries and points for global administrative areas. In this example, we'll use DuckDB to connect to Azure and read the Parquet files from Azure blob storage. You can also ",(0,n.jsx)(s.a,{href:"https://docs.overturemaps.org/getting-data/",children:"access the files"})," on Amazon S3."]}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-sql",children:"CREATE TABLE slc AS (\n    SELECT\n        *\n    FROM\n        read_parquet('az://overturemapswestus2.blob.core.windows.net/release/2025-06-25.0/theme=divisions/type=division/*')\n    WHERE\n    -- ID for Salt Lake City, Utah\n        id = 'c85948de-26de-4c4a-8479-1dac33fa8b04'\n);   \n"})}),"\n",(0,n.jsxs)(s.p,{children:["When we query that table, we can see the ",(0,n.jsx)(s.code,{children:"divisions"})," hierarchy: Salt Lake City is a locality in Salt Lake County, which is in the region of Utah, within the country of the United States."]}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-sql",children:"SELECT\n    h.name,\n    h.subtype,\n    h.division_id\nFROM\n    slc\nCROSS JOIN UNNEST(hierarchies[1]) AS t(h);\n"})}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{children:"\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502       name       \u2502 subtype  \u2502             division_id              \u2502\n\u2502     varchar      \u2502 varchar  \u2502               varchar                \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 United States    \u2502 country  \u2502 f39eb4af-5206-481b-b19e-bd784ded3f05 \u2502\n\u2502 Utah             \u2502 region   \u2502 506017c0-8932-44b5-b82c-92f9dcffdcf1 \u2502\n\u2502 Salt Lake County \u2502 county   \u2502 53d671bc-c294-44fb-a767-169bffedc5cb \u2502\n\u2502 Salt Lake City   \u2502 locality \u2502 c85948de-26de-4c4a-8479-1dac33fa8b04 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n"})}),"\n",(0,n.jsxs)(s.p,{children:["To retrieve the actual polygons for these entities, we can query the ",(0,n.jsx)(s.code,{children:"division_area"})," type of the ",(0,n.jsx)(s.code,{children:"divisions"})," theme, using ",(0,n.jsx)(s.code,{children:"division_id"})," as the foreign key that links the datasets. ",(0,n.jsx)(s.em,{children:"Note: This query will take a few minutes to run."})]}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-sql",children:"COPY(\n    SELECT\n        names.primary AS name,\n        subtype,\n        id,\n        geometry\n    FROM\n        read_parquet('az://overturemapswestus2.blob.core.windows.net/release/2025-06-25.0/theme=divisions/type=division_area/*') areas\n    WHERE\n        division_id IN (\n            SELECT\n                h.division_id\n            FROM\n                slc\n            CROSS JOIN UNNEST(hierarchies[1]) AS t(h)\n            )\n    ) TO 'slc_hierarchies.geojson' WITH (FORMAT GDAL, DRIVER GeoJSON);\n"})}),"\n",(0,n.jsxs)(s.p,{children:["Next we'll load ",(0,n.jsx)(s.code,{children:"slc_hierarchies.geojson"})," into ",(0,n.jsx)(s.a,{href:"https://kepler.gl/",children:"KeplerGL"})," so that we can see the complete hierarchy of divisions."]}),"\n",(0,n.jsx)(s.p,{children:(0,n.jsx)(s.img,{alt:"Salt lake City Hierarchies",src:a(7968).A+"",width:"1506",height:"1098"})}),"\n",(0,n.jsx)(s.admonition,{type:"info",children:(0,n.jsx)(s.p,{children:"GERS IDs are intended to be the key to unlock interoperability both inside and outside of Overture data. This example showed how Overture features within the same theme can reference one-another via GERS."})}),"\n",(0,n.jsx)(s.h2,{id:"looking-up-ids-in-the-gers-registry",children:"Looking up IDs in the GERS Registry"}),"\n",(0,n.jsxs)(s.p,{children:["Let's grab a GERS ID for an important place in Salt Lake City and see if it exists in the GERS Registry. The UUID for the Utah State Capitol is ",(0,n.jsx)(s.code,{children:"d724e74f-017a-4902-9031-bc784ffc1789"}),". Is that part of GERS? We can search the GERS Registry with this query:"]}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-sql",children:"SELECT \n    *\nFROM \n    read_parquet('s3://overturemaps-us-west-2/registry/*')   \nWHERE \n    id='d724e74f-017a-4902-9031-bc784ffc1789';\n"})}),"\n",(0,n.jsxs)(s.p,{children:["We can see that ",(0,n.jsx)(s.code,{children:"d724e74f-017a-4902-9031-bc784ffc1789"})," is a ",(0,n.jsx)(s.code,{children:"place"})," type that was first seen by the ",(0,n.jsx)(s.a,{href:"https://docs.overturemaps.org/gers/registry/",children:"GERS Registry"})," in the ",(0,n.jsx)(s.code,{children:"2025-06-25.0"})," release. (This makes sense because the GERS Registry didn't exist to ",(0,n.jsx)(s.em,{children:"see"})," any features before then!) It has a ",(0,n.jsx)(s.code,{children:"bbox "})," of ",(0,n.jsx)(s.code,{children:"{'xmin': -111.888214, 'xmax': -111.8882, 'ymin': 40.777214, 'ymax': 40.77722}"})," and it lives in this Parquet file: ",(0,n.jsx)(s.code,{children:"/theme=places/type=place/part-00001-f6d803dd-3ff7-47d7-a58f-7af6e054e9c4-c000.zstd.parquet"}),"."]}),"\n",(0,n.jsx)(s.h2,{id:"using-the-data-changelog",children:"Using the data changelog"}),"\n",(0,n.jsx)(s.admonition,{type:"note",children:(0,n.jsxs)(s.p,{children:["For the next part of this tutorial, we're using the data changelog from the May release (",(0,n.jsx)(s.code,{children:"2025-05-21.0"}),") to examine new places in Salt Lake City. Because of the switch to UUIDs in June, we did not generate a changelog in June. The next changelog will be published with the July release."]})}),"\n",(0,n.jsxs)(s.p,{children:["Every Overture release (except the June 2025 release) includes a ",(0,n.jsx)(s.a,{href:"https://docs.overturemaps.org/gers/changelog/",children:"changelog"})," with a high-level overview of data added, removed, or changed, based on the ID. The changelog is partitioned by ",(0,n.jsx)(s.code,{children:"theme"}),", ",(0,n.jsx)(s.code,{children:"type"}),", and ",(0,n.jsx)(s.code,{children:"change_type"}),". Let's query the changelog to identify all of the features added in Salt Lake City in Overture's May release."]}),"\n",(0,n.jsx)(s.p,{children:"Let's do query that dumps to the terminal all the new places in the May release for our area of interest."}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-sql",children:"SELECT\n    id\nFROM\n    read_parquet('s3://overturemaps-us-west-2/changelog/2025-05-21.0/theme=places/*/*/*.parquet')\nWHERE\n    change_type = 'added'\n    AND bbox.xmin > -112.461 AND bbox.xmax < -111.073\n    AND bbox.ymin > 40.296 AND bbox.ymax < 40.955;\n"})}),"\n",(0,n.jsxs)(s.p,{children:["This gives us 5,727 new places in the Salt Lake City area added to the May release. Now let's write a query to join this list of new places to the full May data release by ",(0,n.jsx)(s.code,{children:"id"})," and write out a new Parquet file:"]}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-sql",children:"COPY(\n    SELECT\n        places.id as id,\n        names.primary as name,\n        categories.primary as category,\n        confidence,\n        CAST(sources AS JSON) as sources,\n        geometry\n    FROM\n        read_parquet('s3://overturemaps-us-west-2/release/2025-05-21.0/theme=places/type=place/*') places\n    JOIN (\n        SELECT\n            id\n        FROM\n            read_parquet('s3://overturemaps-us-west-2/changelog/2025-05-21.0/theme=places/*/*/*.parquet')\n        WHERE \n            change_type = 'added'\n            AND bbox.xmin > -112.461 AND bbox.xmax < -111.073 \n            AND bbox.ymin > 40.296 AND bbox.ymax < 40.955\n            ) changelog\n        ON places.id = changelog.id\n        ORDER BY places.id ASC\n    ) TO 'new_places_slc_may.parquet';\n"})}),"\n",(0,n.jsx)(s.p,{children:"Let's go one step further and query the one-time May to June ID mapping to translate the May IDs in our list of new places to the new UUID system. Here's how we would do that:"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-sql",children:"COPY(\n    SELECT \n        newUUIDs.id\n     FROM \n         read_parquet('new_places_slc_may.parquet') oldIDs\n     JOIN (\n     SELECT\n        *\n     FROM read_parquet('s3://overturemaps-extras-us-west-2/june_to_may_id_mapping/theme=places/type=place/*')) newUUIDs\n     ON newUUIDs.previous_id = oldIDs.id\n     ) TO 'new_places_slc_may_UUIDs.parquet';\n"})}),"\n",(0,n.jsxs)(s.p,{children:["This tells us that all 5,727 new places in Salt Lake City that appeared in the May release were assigned new UUIDs before the June data release. Can we find all of those UUIDs in the June release? Let's take a look. ",(0,n.jsx)(s.em,{children:"Note: this query take several minutes to run."})]}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-sql",children:"COPY(\n     SELECT\n            june_places_UUID.id,\n            names.primary as name,\n            categories.primary as category,\n            confidence,\n            CAST(sources AS JSON) as sources,\n            geometry\n        FROM\n            read_parquet('s3://overturemaps-us-west-2/release/2025-06-25.0/theme=places/type=place/*') june_places_UUID\n        JOIN(\n            SELECT\n                id\n            FROM\n                read_parquet('new_places_slc_may_UUIDs.parquet')) may_places_UUID\n            ON \n                june_places_UUID.id = may_places_UUID.id\n    ) TO new_places_slc_may_to_june_UUIDs.parquet;\n"})}),"\n",(0,n.jsxs)(s.p,{children:["Only 1,546 of new places that appeared in the May release show up in the June release with their newly- assigned UUIDs. This is a known quality issue with our source datasets. As tedious as this process might be, it demonstrates how we can use the GERS tools to track features across releases and gauge churn and data quality from one release to another. Overture is aware that some of our source data providers have significant churn in their data ",(0,n.jsx)(s.em,{children:"before"})," the data is ingested in Overture pipelines each month. We're working hard to improve these issues. Transparency is the first step."]}),"\n",(0,n.jsx)(s.h2,{id:"using-bridge-files",children:"Using bridge files"}),"\n",(0,n.jsxs)(s.p,{children:["Now what? Let's move forward with our smaller-than-expected dataset of new places in the June release and see if we can find the Facebook pages for some of them. How might we do that? ",(0,n.jsx)(s.a,{href:"https://docs.overturemaps.org/gers/bridge-files/",children:"Bridge files"})," are published mappings of GERS ID to source IDs for the datasets that Overture ingests before each release. We only create bridge files for established datasets with a meaningful ",(0,n.jsx)(s.code,{children:"record_id"})," properites. ML-Derived buildings, for example, do not have stable meaningful input IDs, but place records from Meta have corresponding IDs that reference public Facebook pages."]}),"\n",(0,n.jsxs)(s.p,{children:["The ",(0,n.jsx)(s.code,{children:"sources"})," property in each Overture data release lists the original source of the data and any additional properties that Overture has added. We can use the bridge file for Meta's places data to map the GERS ID back to the source ID. Then we can look up the Facebook pages for the new places in Salt Lake City:"]}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-sql",children:"COPY(\n    SELECT\n        'https://facebook.com/' || cast(bridge.record_id as varchar) AS facebook_page,\n            slc_places.*\n    FROM read_parquet('new_places_slc_may_to_june_UUIDs.parquet') slc_places \n    JOIN(\n        SELECT\n            id,\n            record_id\n        FROM\n            read_parquet('s3://overturemaps-us-west-2/bridgefiles/2025-06-25.0/dataset=meta/theme=places/type=place/*')\n        ) bridge ON slc_places.id = bridge.id\n    ) TO 'new_places_slc_with_fb_pages.geojson' WITH (FORMAT GDAL, Driver GeoJSON);\n"})}),"\n",(0,n.jsxs)(s.p,{children:['One new place of note is the "Bootlegged Barber" in Sandy, Utah. On their ',(0,n.jsx)(s.a,{href:"https://www.facebook.com/bootleggedbarbersandy/",children:"Facebook page"}),', the proprietors advertise themselves as a "NeoTraditional Barbershop | Where tradition and style meet."']}),"\n",(0,n.jsx)(s.p,{children:(0,n.jsx)(s.img,{alt:"Bootleg Barbershop",src:a(35352).A+"",width:"1004",height:"1004"})}),"\n",(0,n.jsx)(s.h2,{id:"next-steps",children:"Next steps"}),"\n",(0,n.jsxs)(s.ul,{children:["\n",(0,n.jsxs)(s.li,{children:["Checkout our ",(0,n.jsx)(s.a,{href:"https://docs.overturemaps.org/gers/gers-tutorial/",children:"GERS tutorial"})]}),"\n",(0,n.jsxs)(s.li,{children:["Read more about the components of GERS in our ",(0,n.jsx)(s.a,{href:"https://docs.overturemaps.org/gers/",children:"docs"})]}),"\n",(0,n.jsxs)(s.li,{children:["Read our ",(0,n.jsx)(s.a,{href:"https://overturemaps.org/blog/2025/understanding-overtures-global-entity-reference-system/",children:'"GERS Deep Dive"'})," and ",(0,n.jsx)(s.a,{href:"https://overturemaps.org/blog/2025/introducing-bridge-files/",children:'"Introducing Bridge Files"'})," blog posts"]}),"\n"]})]})}function c(e={}){const{wrapper:s}={...(0,r.R)(),...e.components};return s?(0,n.jsx)(s,{...e,children:(0,n.jsx)(h,{...e})}):h(e)}},65087:e=>{e.exports=JSON.parse('{"permalink":"/blog/2025/06/25/getting-started-gers","source":"@site/blog/2025-06-25-getting-started-gers.mdx","title":"Using the GERS \\"system\\"","description":"In the June release, we introduced new components of GERS, including a new format for GERS IDs and a GERS Registry. In this blog post, we\'ll walk you through the GERS \\"system\\" and show you how to ask probing questions of the Overture datasets.","date":"2025-06-25T00:00:00.000Z","tags":[],"readingTime":6.62,"hasTruncateMarker":false,"authors":[],"frontMatter":{"title":"Using the GERS \\"system\\""},"unlisted":false,"nextItem":{"title":"2025-06-25 release notes","permalink":"/blog/2025/06/25/release-notes"}}')}}]);