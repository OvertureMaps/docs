"use strict";(self.webpackChunkoverture_how_to=self.webpackChunkoverture_how_to||[]).push([[289],{4878:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>E,contentTitle:()=>A,default:()=>L,frontMatter:()=>N,metadata:()=>O,toc:()=>R});var t=a(5893),o=a(1151),i=a(9286),s=a(4866),l=a(5162),r=a(7294),c=a(4613),d=a.n(c),m=a(8999),p="#3063d2",h="#09bac6",u="#dce6ef",g="#a7bfd7",x="#071F3F",y="#071F3F",j="#dce6ef";const b={placeHighZoom:{id:"placeHighZoom",type:"symbol",source:"placenames","source-layer":"placenames",minzoom:9,maxzoom:24,layout:{"text-field":["get","name"],"text-font":["Noto Sans Bold"],"text-size":["step",["zoom"],14,10,["match",["get","localityType"],["borough"],14,["suburb"],12,0],12,["match",["get","localityType"],["borough"],16,["suburb"],14,["neighborhood"],10,0],14,["match",["get","localityType"],["borough"],18,["suburb"],16,["neighborhood"],12,0],15,["match",["get","localityType"],["borough"],20,["suburb"],18,["neighborhood"],14,0],16,["match",["get","localityType"],["borough"],20,["suburb"],18,["neighborhood"],14,["block"],12,0]],"text-transform":["step",["zoom"],"none",11,"uppercase"],"text-max-width":6,"symbol-avoid-edges":!0,"symbol-sort-key":["get","sort_key"],"text-padding":10,"text-justify":"auto"},paint:{"text-color":y,"text-halo-color":j,"text-halo-width":1}},placeMidZoom:{id:"placeMidZoom",type:"symbol",source:"placenames","source-layer":"placenames",minzoom:8,maxzoom:24,filter:["all",["has","name"],["step",["zoom"],["==","$type","Point"],8,["match",["get","localityType"],["settlement"],!0,!1],9,["match",["get","localityType"],["urban","settlement"],!0,!1]]],layout:{"text-field":["get","name"],"text-font":["Noto Sans Bold"],"text-size":["step",["zoom"],10,9,["match",["get","localityType"],["megacity"],20,["metropolis"],18,["city"],16,["municipality"],14,["town"],10,0],10,["match",["get","localityType"],["megacity"],22,["metropolis"],20,["city"],18,["municipality"],16,["town"],12,0],12,["match",["get","localityType"],["megacity"],22,["metropolis"],20,["city"],18,["municipality"],16,["town"],12,["village"],10,0],14,["match",["get","subclass"],["megacity"],22,["metropolis"],20,["city"],18,["municipality"],16,["town"],14,["village","hamlet"],12,0],15,["match",["get","subclass"],["megacity"],22,["metropolis"],20,["city"],18,["municipality"],16,["town"],14,["village","hamlet"],14,0],16,["match",["get","subclass"],["village","hamlet"],16,0]],"text-transform":["step",["zoom"],"none",11,"uppercase"],"text-padding":["step",["zoom"],10,9,8,10,5,12,3],"text-max-width":6,"symbol-avoid-edges":!0,"symbol-sort-key":["get","sort_key"],"text-justify":"auto"},paint:{"text-color":y,"text-halo-color":j,"text-halo-width":1}}},f={id:"buildings",type:"fill-extrusion",minzoom:12,maxzoom:24,source:"buildings","source-layer":"buildings",paint:{"fill-extrusion-color":"#dce6ef","fill-extrusion-opacity":.6,"fill-extrusion-base":0,"fill-extrusion-height":["case",["has","height"],["to-number",["get","height"]],3.2]}},w={id:"placesLabel",type:"symbol",source:"places","source-layer":"places",filter:["all",["has","name"],[">",["get","confidence"],.75]],minzoom:15,maxzoom:24,layout:{"text-field":["concat","\u25a0\n",["get","name"]],"text-font":["Noto Sans Bold"],"text-max-width":5,"text-size":10,"text-line-height":1,"text-justify":"center","text-anchor":"center","text-radial-offset":.8,"text-padding":4},paint:{"text-color":y,"text-halo-color":j,"text-halo-width":1}},T={footwayCasing:{id:"footwayCasing",type:"line",source:"roads","source-layer":"roads",minzoom:15,maxzoom:24,filter:["match",["get","class"],["footway"],!0,!1],layout:{"line-cap":"round","line-join":"round"},paint:{"line-width":["interpolate",["exponential",1.5],["zoom"],12,.25,20,1.3],"line-gap-width":["interpolate",["exponential",1.5],["zoom"],12,.5,16,3,22,25],"line-color":u}},footway:{id:"footway",type:"line",source:"roads","source-layer":"roads",minzoom:15,maxzoom:24,filter:["match",["get","class"],["footway"],!0,!1],layout:{"line-cap":"round","line-join":"round"},paint:{"line-width":["interpolate",["exponential",1.5],["zoom"],12,.5,16,3,22,25],"line-color":"#b9ccdf"}},parkingAisleUnknownCasing:{id:"parkingAisleUnknownCasing",type:"line",source:"roads","source-layer":"roads",minzoom:14,maxzoom:24,filter:["match",["get","class"],["parkingAisle","unknown"],!0,!1],layout:{"line-cap":"round","line-join":"round"},paint:{"line-width":["interpolate",["exponential",1.5],["zoom"],12,.25,20,1.3],"line-gap-width":["interpolate",["exponential",1.5],["zoom"],12,.5,16,3.5,22,75],"line-color":u}},residentialCasing:{id:"residentialCasing",type:"line",source:"roads","source-layer":"roads",minzoom:12,maxzoom:24,filter:["match",["get","class"],["residential"],!0,!1],layout:{"line-cap":"round","line-join":"round"},paint:{"line-width":["interpolate",["exponential",1.5],["zoom"],12,.75,20,1.3],"line-gap-width":["interpolate",["exponential",1.5],["zoom"],12,1,16,6,22,125],"line-color":u}},secondaryTertiaryCasing:{id:"secondaryTertiaryCasing",type:"line",source:"roads","source-layer":"roads",minzoom:11,maxzoom:24,filter:["match",["get","class"],["secondary","tertiary"],!0,!1],paint:{"line-width":["interpolate",["exponential",1.5],["zoom"],12,1,20,1.3],"line-gap-width":["interpolate",["exponential",1.5],["zoom"],10,.5,12,2.2,16,6.6,22,160],"line-color":u}},primaryCasing:{id:"primaryCasing",type:"line",source:"roads","source-layer":"roads",minzoom:8,maxzoom:24,filter:["match",["get","class"],["primary"],!0,!1],layout:{"line-cap":["step",["zoom"],"butt",16,"round"],"line-join":["step",["zoom"],"miter",16,"round"]},paint:{"line-width":["interpolate",["exponential",1.5],["zoom"],12,1,20,1.4],"line-gap-width":["interpolate",["exponential",1.5],["zoom"],8,.5,12,3.1,16,9.3,22,175],"line-color":u}},parkingAisleUnknown:{id:"parkingAisleUnknown",type:"line",source:"roads","source-layer":"roads",minzoom:14,maxzoom:24,filter:["match",["get","class"],["parkingAisle","unknown"],!0,!1],layout:{"line-cap":"round","line-join":"round"},paint:{"line-width":["interpolate",["exponential",1.5],["zoom"],12,.5,16,3.5,22,75],"line-color":g}},residential:{id:"residential",type:"line",source:"roads","source-layer":"roads",minzoom:12,maxzoom:24,filter:["match",["get","class"],["residential"],!0,!1],layout:{"line-cap":["step",["zoom"],"butt",13,"round"],"line-join":["step",["zoom"],"miter",13,"round"]},paint:{"line-width":["interpolate",["exponential",1.5],["zoom"],12,1,16,6,22,125],"line-color":g}},secondaryTertiary:{id:"secondaryTertiary",type:"line",source:"roads","source-layer":"roads",minzoom:10,maxzoom:24,filter:["match",["get","class"],["secondary","tertiary"],!0,!1],layout:{"line-cap":["step",["zoom"],"butt",13,"round"],"line-join":["step",["zoom"],"miter",13,"round"]},paint:{"line-width":["interpolate",["exponential",1.5],["zoom"],10,.5,12,2.2,16,6.6,22,160],"line-color":g}},primary:{id:"primary",type:"line",source:"roads","source-layer":"roads",minzoom:8,maxzoom:24,filter:["match",["get","class"],["primary"],!0,!1],layout:{"line-cap":["step",["zoom"],"butt",13,"round"],"line-join":["step",["zoom"],"miter",13,"round"]},paint:{"line-width":["interpolate",["exponential",1.5],["zoom"],8,.5,12,3.1,16,9.3,22,175],"line-color":g}},motorwayCasing:{id:"motorwayCasing",type:"line",source:"roads","source-layer":"roads",minzoom:6,maxzoom:24,filter:["match",["get","class"],["motorway"],!0,!1],layout:{"line-cap":["step",["zoom"],"butt",13,"round"],"line-join":["step",["zoom"],"miter",13,"round"]},paint:{"line-width":["interpolate",["exponential",1.5],["zoom"],12,1,20,1.4],"line-gap-width":["interpolate",["exponential",1.5],["zoom"],6,.5,12,3.3,16,9.9,22,175],"line-color":u}},motorway:{id:"motorway",type:"line",source:"roads","source-layer":"roads",minzoom:6,maxzoom:24,filter:["match",["get","class"],["motorway"],!0,!1],layout:{"line-cap":["step",["zoom"],"butt",12,"round"],"line-join":["step",["zoom"],"miter",12,"round"]},paint:{"line-width":["interpolate",["exponential",1.5],["zoom"],6,.5,12,3.3,16,9.9,22,175],"line-color":"#95b2d0"}},residentialLabel:{id:"residentialLabel",type:"symbol",source:"roads","source-layer":"roads",minzoom:13,maxzoom:24,filter:["match",["get","class"],["residential","unknown"],!0,!1],layout:{"text-transform":"uppercase","text-size":["interpolate",["linear"],["zoom"],13,9,18,["match",["get","class"],["access","path"],9,12]],"text-max-angle":30,"symbol-spacing":["interpolate",["linear"],["zoom"],13,200,16,400],"text-field":["get","name"],"text-font":["Noto Sans Bold"],"symbol-placement":"line","text-padding":5},paint:{"text-color":x,"text-halo-color":"hsl(0,0%,100%)","text-halo-width":1}},highwayLabel:{id:"highwayLabel",type:"symbol",source:"roads","source-layer":"roads",minzoom:13,maxzoom:24,filter:["match",["get","class"],["motorway","primary","secondary","tertiary"],!0,!1],layout:{"text-transform":"uppercase","text-size":["interpolate",["linear"],["zoom"],13,9,18,["match",["get","class"],["access","path"],9,12]],"text-max-angle":30,"symbol-spacing":["interpolate",["linear"],["zoom"],13,200,16,400],"text-field":["get","name"],"text-font":["Noto Sans Bold"],"symbol-placement":"line"},paint:{"text-color":x,"text-halo-color":"hsl(0,0%,100%)","text-halo-width":1}}},v={land:{id:"land",type:"fill",source:"base","source-layer":"land",filter:["match",["get","subType"],["land"],!0,!1],minzoom:0,maxzoom:24,paint:{"fill-color":"#ccdae8"}},sand:{id:"sand",type:"fill",source:"base","source-layer":"land",filter:["match",["get","subType"],["sand"],!0,!1],minzoom:0,maxzoom:24,paint:{"fill-color":"#EBD5BD"}},wetland:{id:"wetland",type:"fill",source:"base","source-layer":"land",filter:["match",["get","subType"],["wetland"],!0,!1],minzoom:0,maxzoom:24,paint:{"fill-color":"#00A9BF"}},forest:{id:"forest",type:"fill",source:"base","source-layer":"land",filter:["match",["get","subType"],["forest","grass","scrub"],!0,!1],minzoom:0,maxzoom:24,paint:{"fill-color":"#09bac6"}}},S={parks:{id:"parks",type:"fill",source:"base","source-layer":"landuse",filter:["match",["get","subType"],["park"],!0,!1],minzoom:0,maxzoom:24,paint:{"fill-color":h}},golfGreens:{id:"golfGreens",type:"fill",source:"base","source-layer":"landuse",filter:["==",["get","class"],"green"],minzoom:0,maxzoom:24,paint:{"fill-color":h}}},z={waterPolygons:{id:"water-fill",type:"fill",source:"base","source-layer":"water",filter:["==",["geometry-type"],"Polygon"],minzoom:0,maxzoom:24,paint:{"fill-color":p}},waterLinestrings:{id:"water-line",type:"line",source:"base","source-layer":"water",filter:["==",["geometry-type"],"LineString"],minzoom:0,maxzoom:24,paint:{"line-width":3,"line-color":p}}};function _(){const e=(0,r.useRef)(null),n=(0,r.useRef)(null),[a]=(0,r.useState)(-122.33),[o]=(0,r.useState)(47.6),[i]=(0,r.useState)(13);return(0,r.useEffect)((()=>{if(n.current)return;let t=new m.b$;d().addProtocol("pmtiles",t.tile),n.current=new(d().Map)({container:e.current,center:[a,o],zoom:i,pitch:45,hash:!0,cooperativeGestures:{windowsHelpText:"Use Ctrl + scroll to zoom the map.",macHelpText:"Use \u2318 + scroll to zoom the map.",mobileHelpText:"Use 2 fingers to move the map."},style:{light:{anchor:"viewport",color:"white",intensity:.8},version:8,glyphs:"https://demotiles.maplibre.org/font/{fontstack}/{range}.pbf",sources:{roads:{type:"vector",url:"pmtiles://../../example-map/tiles/roads.pmtiles"},places:{type:"vector",url:"pmtiles://../../example-map/tiles/places.pmtiles"},placenames:{type:"vector",url:"pmtiles://../../example-map/tiles/placenames.pmtiles"},buildings:{type:"vector",url:"pmtiles://../../example-map/tiles/buildings.pmtiles"},base:{type:"vector",url:"pmtiles://../../example-map/tiles/base.pmtiles"}},layers:[{id:"background",type:"background",minzoom:0,maxzoom:24,paint:{"background-color":"hsl(216,20%,95%)"}},v.land,v.sand,v.wetland,v.forest,S.parks,S.golfGreens,z.waterPolygons,z.waterLinestrings,T.footwayCasing,T.footway,T.parkingAisleUnknownCasing,T.residentialCasing,T.secondaryTertiaryCasing,T.primaryCasing,T.parkingAisleUnknown,T.residential,T.secondaryTertiary,T.primary,T.motorwayCasing,T.motorway,T.residentialLabel,T.highwayLabel,f,w,b.placeHighZoom,b.placeMidZoom]}}),n.current.addControl(new(d().NavigationControl),"top-right"),n.current.addControl(new(d().FullscreenControl));return n.current.addControl(new class{constructor(e){switch(this._options={...e},this._container=document.createElement("div"),this._container.classList.add("maplibregl-ctrl"),this._container.classList.add("closed"),this._options.expandDirection||"right"){case"top":this._container.classList.add("reverse");case"down":this._container.classList.add("column");break;case"left":this._container.classList.add("reverse");case"right":this._container.classList.add("row")}}onAdd(e){this._map=e;const n=document.createElement("input");n.type="range",n.value=50,n.addEventListener("change",(n=>{console.log(n.target.value),e.setFilter("placesLabel",["all",[">=",["number",["get","confidence"]],n.target.value/100]])}));const a=document.createElement("button");a.classList.add("layer"),a.classList.add("active"),a.innerHTML="Places",a.addEventListener("click",(()=>{"visible"==e.getLayoutProperty("placesLabel","visibility")?(e.setLayoutProperty("placesLabel","visibility","none"),a.classList.remove("active"),n.disabled=!0):(e.setLayoutProperty("placesLabel","visibility","visible"),a.classList.add("active"),n.disabled=!1)}));const t=document.createElement("div");return t.appendChild(a),t.appendChild(n),this._container.appendChild(t),this._container}onRemove(){this._container.parentNode?.removeChild(this._container),delete this._map}},"bottom-left"),n.current.addControl(new(d().AttributionControl)({customAttribution:'<a href="https://www.openstreetmap.org/copyright" target="_blank">&copy; OpenStreetMap contributors</a>, <a href="https://overturemaps.org" target="_blank">OvertureMaps Foundation</a>'}),"bottom-right"),()=>{d().removeProtocol("pmtiles")}}),[a,o,i]),(0,t.jsx)("div",{className:"map-wrap",children:(0,t.jsx)("div",{ref:e,className:"map"})})}const N={title:"Build a Basemap"},A="Building a Basemap With Overture",O={id:"visualizing-data/build-a-map",title:"Build a Basemap",description:"Step 1: Downloading and processing only what you need",source:"@site/docs/visualizing-data/build-a-map.mdx",sourceDirName:"visualizing-data",slug:"/visualizing-data/build-a-map",permalink:"/how-to/visualizing-data/build-a-map",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{title:"Build a Basemap"},sidebar:"docs",previous:{title:"Visualizing Places Data in Rapid",permalink:"/how-to/visualizing-data/visualizing-places"},next:{title:"Release Notes",permalink:"/how-to/release-notes"}},E={},R=[{value:"Step 1: Downloading and processing only what you need",id:"step-1-downloading-and-processing-only-what-you-need",level:3},{value:"Option 1: Single DuckDB query (slow)",id:"option-1-single-duckdb-query-slow",level:4},{value:"Option 2: Obtain CSV with Amazon Athena then convert to GeoJSONSeq with DuckDB (faster)",id:"option-2-obtain-csv-with-amazon-athena-then-convert-to-geojsonseq-with-duckdb-faster",level:4},{value:"Step 2: Creating a map with Maplibre + PMTiles",id:"step-2-creating-a-map-with-maplibre--pmtiles",level:3},{value:"Step 3: Styling the layers",id:"step-3-styling-the-layers",level:3}];function D(e){const n={a:"a",code:"code",h1:"h1",h3:"h3",h4:"h4",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,o.a)(),...e.components},{Details:a}=n;return a||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h1,{id:"building-a-basemap-with-overture",children:"Building a Basemap With Overture"}),"\n",(0,t.jsx)(_,{}),"\n",(0,t.jsx)(n.h3,{id:"step-1-downloading-and-processing-only-what-you-need",children:"Step 1: Downloading and processing only what you need"}),"\n",(0,t.jsxs)(n.p,{children:["Overture data is released as a single dataset in a cloud-native format (geoparquet), that is partitioned by theme. Accessing the data through a service that can take advantage of these properties provides the best performance. After downloading and converting the data to GeoJSON, we can use ",(0,t.jsx)(n.a,{href:"https://github.com/felt/tippecanoe",children:"tippecanoe"})," to create a ",(0,t.jsx)(n.a,{href:"https://github.com/protomaps/PMTiles",children:(0,t.jsx)(n.code,{children:"PMTiles"})})," archive."]}),"\n",(0,t.jsx)(n.p,{children:"For illustration, this tutorial demonstrates multiple methods of downloading Overture data across the different themes. Performance tradeoffs are discussed for each theme."}),"\n",(0,t.jsxs)(s.Z,{queryString:"theme-data",children:[(0,t.jsxs)(l.Z,{value:"places",label:"Places",default:!0,children:[(0,t.jsxs)(n.p,{children:["The places data theme represents business and points of interest in the real world. Read more about the places data schema in the ",(0,t.jsx)(n.a,{href:"https://docs.overturemaps.org/reference/places/place",children:"documentation"}),"."]}),(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["To download places data for a specific region, we can use the following DuckDB query to download the places data within a specific bounding box and generate a ",(0,t.jsx)(n.code,{children:"GeoJSON"})," file."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",children:"LOAD spatial;\nLOAD httpfs;\n-- Access the data on AWS in this example\nSET s3_region='us-west-2';\n\nCOPY (\n    SELECT\n        FILTER(names.common, x->x.language = 'local') [ 1 ].value as name,\n        categories.main as category,\n        ROUND(confidence,2) as confidence,\n        ST_GeomFromWKB(geometry) as geometry\n    FROM read_parquet('s3://overturemaps-us-west-2/release/2023-11-14-alpha.0/theme=places/type=*/*',\n                        filename=true, hive_partitioning=1)\n    WHERE\n        -- Point geometry doesn't require looking at both min and max:\n        bbox.minX BETWEEN -122.679404 AND -121.978275 AND\n        bbox.minY BETWEEN 47.360619 AND 47.786336)\nTO 'places.geojson'\nWITH (FORMAT GDAL, DRIVER 'GeoJSON', SRS 'EPSG:4326');\n"})}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["Next, create a ",(0,t.jsx)(n.code,{children:"pmtiles"})," archive from ",(0,t.jsx)(n.code,{children:"places.geojson"})," with ",(0,t.jsx)(n.a,{href:"https://github.com/felt/tippecanoe",children:"tippecanoe"}),"."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"tippecanoe -fo places.pmtiles -Z13 -z13 -l places places.geojson\n"})}),"\n",(0,t.jsxs)(a,{children:[(0,t.jsx)("summary",{children:"Tippecanoe flag explanation"}),(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"-fo places.pmtiles"})," The output file will be places.pmtiles. It will be overwritten if it exists."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"-Z13"})," and ",(0,t.jsx)(n.code,{children:"-z13"})," will produce a tileset starting at zoom 13 and going up to zoom 13 (only 1 zoom level)."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"-l places"}),' names the layer "places"']}),"\n"]})]}),"\n"]}),"\n"]})]}),(0,t.jsxs)(l.Z,{value:"placenames",label:"Placenames",default:!0,children:[(0,t.jsx)(n.p,{children:"The admins theme contains named localities and their administrative boundaries. To add labels for populated places to the map, we query the admins theme and calculate centroids of administrative areas."}),(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["Run the following DuckDB to download placenames from the admins theme for the bounding box to create ",(0,t.jsx)(n.code,{children:"placenames.geojson"})]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",children:"LOAD spatial;\nLOAD azure;\n-- Access the data on Microsoft Azure in this example\nSET azure_storage_connection_string = 'DefaultEndpointsProtocol=https;AccountName=overturemapswestus2;AccountKey=;EndpointSuffix=core.windows.net';\nCOPY (\n    SELECT\n        subType,\n        localityType,\n        FILTER(names.common, x -> x.language = 'local')[1].value as name,\n        adminLevel,\n        ST_CENTROID(ST_GeomFromWKB(geometry)) as geometry\n    FROM read_parquet('azure://release/2023-11-14-alpha.0/theme=admins/type=locality/*',\n                        filename=true, hive_partitioning=1)\n    WHERE bbox.minX > -122.679404 AND bbox.maxX < -121.978275\n      AND bbox.minY > 47.360619 AND bbox.maxY < 47.786336\n) TO 'placenames.geojson'\nWITH (FORMAT GDAL, DRIVER 'GeoJSON', SRS 'EPSG:4326');\n"})}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["Run ",(0,t.jsx)(n.a,{href:"https://github.com/felt/tippecanoe",children:"tippecanoe"})," to produce a ",(0,t.jsx)(n.code,{children:"pmtiles"})," archive from ",(0,t.jsx)(n.code,{children:"placenames.geojson"})]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"tippecanoe -o placenames.pmtiles -Z5 -z10 -l placenames placenames.geojson\n"})}),"\n",(0,t.jsxs)(a,{children:[(0,t.jsx)("summary",{children:"Tippecanoe flag explanation"}),(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"-fo buildings.pmtiles"})," is our output file. It will be overwritten if it exists."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"-Z5"})," and ",(0,t.jsx)(n.code,{children:"-z10"})," will produce a tileset starting at zoom 5 and going up to zoom 13."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"-l placenames"}),' names the layer "placenames"']}),"\n"]})]}),"\n"]}),"\n"]})]}),(0,t.jsxs)(l.Z,{value:"buildings",label:"Buildings",default:!0,children:[(0,t.jsx)(n.p,{children:"Overture contains more than 1.3B buildings. While we can use DuckDB again to access the files without going through a cloud-service, it will take significantly longer. A better option in this case is to first leverage Amazon Athena to filter for only the buildings in the bounding box."}),(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["Download buildings from Overture as ",(0,t.jsx)(n.code,{children:"GeoJSONSeq"})]}),"\n",(0,t.jsx)(n.h4,{id:"option-1-single-duckdb-query-slow",children:"Option 1: Single DuckDB query (slow)"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",children:" LOAD spatial;\n LOAD azure;\n\n -- Access the data on Microsoft Azure in this example\n SET azure_storage_connection_string = 'DefaultEndpointsProtocol=https;AccountName=overturemapswestus2;AccountKey=;EndpointSuffix=core.windows.net';\n COPY (\n     SELECT\n         FILTER(names.common, x -> x.language = 'local')[1].value as name,\n         height,\n         level,\n         CAST(sources AS JSON) as sources,\n         ST_GeomFromWKB(geometry) as geometry\n     FROM read_parquet('azure://release/2023-11-14-alpha.0/theme=buildings/type=building/*', filename=true, hive_partitioning=1)\n     WHERE bbox.minX > -122.679404 AND bbox.maxX < -121.978275\n     AND bbox.minY > 47.360619 AND bbox.maxY < 47.786336\n ) TO 'buildings.geojsonseq'\n WITH (FORMAT GDAL, DRIVER 'GeoJSONSeq', SRS 'EPSG:4326');\n"})}),"\n",(0,t.jsx)(n.h4,{id:"option-2-obtain-csv-with-amazon-athena-then-convert-to-geojsonseq-with-duckdb-faster",children:"Option 2: Obtain CSV with Amazon Athena then convert to GeoJSONSeq with DuckDB (faster)"}),"\n",(0,t.jsxs)(n.p,{children:["First, run this query in  Amazon Athena against the ",(0,t.jsx)(n.code,{children:"overture_2023_11_14_alpha_0"})," table, as set up in ",(0,t.jsx)(n.a,{href:"https://github.com/OvertureMaps/data#accessing-overture-maps-data-1",children:"these instructions"}),". Download the results as ",(0,t.jsx)(n.code,{children:"buildings.csv"})]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",children:"SELECT class, height, level,\n    TRY(FILTER(names.common, x -> x.language = 'local')[1].value) as name,\n    ST_ASTEXT(ST_GeomFromBinary(geometry)) as geometry_wkt\nFROM overture_2023_10_19_alpha_0\nWHERE theme = 'buildings' AND type = 'building'\n    AND bbox.minX > -122.679404 AND bbox.maxX < -121.978275\n    AND bbox.minY > 47.360619 AND bbox.maxY < 47.786336\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Next, use DuckDB to convert ",(0,t.jsx)(n.code,{children:"buildings.csv"})," into a GeoJSONSeq file."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",children:"LOAD spatial;\nCOPY (\n    SELECT\n        class, name, height, level,\n        ST_GeomFromText(geometry_wkt) as geometry\n    FROM read_csv('buildings.csv', header=True, auto_detect=True)\n    ) TO 'buildings.geojsonseq'\nWITH (FORMAT GDAL, DRIVER 'GeoJSONSeq', SRS 'EPSG:4326');\n"})}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["Run ",(0,t.jsx)(n.a,{href:"https://github.com/felt/tippecanoe",children:"tippecanoe"})," to produce a ",(0,t.jsx)(n.code,{children:"pmtiles"})," archive from ",(0,t.jsx)(n.code,{children:"buildings.geojsonseq"})]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"tippecanoe -fo buildings.pmtiles -Z13 -z13 -l buildings -P buildings.geojsonseq\n"})}),"\n",(0,t.jsxs)(a,{children:[(0,t.jsx)("summary",{children:"Tippecanoe flag explanation"}),(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"-fo buildings.pmtiles"})," is our output file. It will be overwritten if it exists."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"-Z13"})," and ",(0,t.jsx)(n.code,{children:"-z13"})," will produce a tileset starting at zoom 13 and going up to zoom 13 (so only 1 zoom level)."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"-l buildings"}),' names the layer "buildings"']}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"-P"})," allows tippecanoe to read the file in parallel. Since we created a GeoJSON sequence file instead of a single GeoJSON Feature Collection, tippecanoe can process the input data more efficiently."]}),"\n"]})]}),"\n"]}),"\n"]})]}),(0,t.jsxs)(l.Z,{value:"roads",label:"Roads",default:!0,children:[(0,t.jsx)(n.p,{children:"Similarly to buildings, we can first use Amazon Athena to generate a CSV of only the roads in our bounding box from the transportation theme."}),(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["Run this query in Amazon Athena against the ",(0,t.jsx)(n.code,{children:"overture_2023_10_19_alpha_0"})," table, as set up in ",(0,t.jsx)(n.a,{href:"https://github.com/OvertureMaps/data#accessing-overture-maps-data-1",children:"these instructions"}),". Download the results as ",(0,t.jsx)(n.code,{children:"roads.csv"})]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",children:"SELECT\n    level,\n    JSON_EXTRACT_SCALAR(road, '$.class') AS road_class,\n    JSON_EXTRACT_SCALAR(road, '$.roadNames.common[0].value') AS road_name,\n    sources[1].dataset AS source,\n    ST_ASTEXT(ST_GeomFromBinary(geometry)) as geometry_wkt\nFROM overture_2023_10_19_alpha_0\nWHERE theme = 'transportation' AND type = 'segment'\n    AND bbox.minX > -122.679404 AND bbox.maxX < -121.978275\n    AND bbox.minY > 47.360619 AND bbox.maxY < 47.786336\n"})}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["Use DuckDB to convert ",(0,t.jsx)(n.code,{children:"roads.csv"})," into a GeoJSONSeq file."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",children:"LOAD spatial;\nCOPY (\n    SELECT\n        road_class as class,\n        road_name as name,\n        level,\n        ST_GeomFromText(geometry_wkt) as geometry\n    FROM 'roads.csv'\n    ) TO 'roads.geojsonseq'\nWITH (FORMAT GDAL, DRIVER 'GeoJSONSeq', SRS 'EPSG:4326');\n"})}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["Run ",(0,t.jsx)(n.a,{href:"https://github.com/felt/tippecanoe",children:"tippecanoe"})," to produce a ",(0,t.jsx)(n.code,{children:"pmtiles"})," archive from ",(0,t.jsx)(n.code,{children:"roads.geojsonseq"})]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"tippecanoe -fo roads.pmtiles -Z10 -B10 -z13 -l roads -P roads.geojsonseq\n"})}),"\n",(0,t.jsxs)(a,{children:[(0,t.jsx)("summary",{children:"Tippecanoe flag explanation"}),(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"-fo roads.pmtiles"})," is our output file. It will be overwritten if it exists."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"-Z10"})," and ",(0,t.jsx)(n.code,{children:"-z13"})," will produce a tileset starting at zoom 10 and going up to zoom 13."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"-B10"})," will ensure that all featuers are present from zoom level 10."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"-l roads"}),' names the layer "roads"']}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"-P"})," allows tippecanoe to read the file in parallel. Since we created a GeoJSON sequence file instead of a single GeoJSON Feature Collection, tippecanoe can process the input data more efficiently."]}),"\n"]})]}),"\n"]}),"\n"]})]}),(0,t.jsx)(l.Z,{value:"base",label:"Base (Land, Land Use & Water)",default:!0,children:(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"Land"}),", ",(0,t.jsx)(n.code,{children:"Landuse"}),", and ",(0,t.jsx)(n.code,{children:"Water"})," are the three types available in the ",(0,t.jsx)(n.code,{children:"Base"})," theme. We can use 3 separate queries to obtain the features and then we can combine them into a single pmtiles archive with different layers."]}),"\n",(0,t.jsxs)(a,{children:[(0,t.jsxs)("summary",{children:["Athena query to produce ",(0,t.jsx)(n.code,{children:"land.csv"})]}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",children:"SELECT subType,\nclass,\nTRY(\n    FILTER(names.common, x->x.language = 'local') [ 1 ].value\n) as name,\nST_ASTEXT(ST_GeomFromBinary(geometry)) as geometry_wkt\nFROM overture_2023_10_19_alpha_0\nWHERE theme = 'base'\n    AND type IN 'land'\n    AND ST_INTERSECTS(\n        ST_ENVELOPE(\n            ST_MULTIPOINT( ARRAY [\n                ST_POINT(-122.679404, 47.360619),\n                ST_POINT(-121.978275, 47.360619),\n                ST_POINT(-122.679404, 47.786336),\n                ST_POINT(-121.978275, 47.786336)\n            ])\n        ),\n        ST_GeomFromBinary(geometry)\n)\n"})})]}),"\n",(0,t.jsxs)(a,{children:[(0,t.jsxs)("summary",{children:["Athena query to produce ",(0,t.jsx)(n.code,{children:"landuse.csv"})]}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",children:"SELECT subType,\n    class,\n    surface,\n    TRY(\n        FILTER(names.common, x->x.language = 'local') [ 1 ].value\n    ) as name,\n    ST_ASTEXT(ST_GeomFromBinary(geometry)) as geometry_wkt\n    FROM overture_2023_10_19_alpha_0\n    WHERE theme = 'base'\n        AND type = 'landuse'\n        AND ST_INTERSECTS(\n            ST_ENVELOPE(\n                ST_MULTIPOINT( ARRAY [\n                    ST_POINT(-122.679404, 47.360619),\n                    ST_POINT(-121.978275, 47.360619),\n                    ST_POINT(-122.679404, 47.786336),\n                    ST_POINT(-121.978275, 47.786336)\n                ])\n            ),\n            ST_GeomFromBinary(geometry)\n    )\n"})})]}),"\n",(0,t.jsxs)(a,{children:[(0,t.jsxs)("summary",{children:["Athena query to produce ",(0,t.jsx)(n.code,{children:"water.csv"})]}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",children:"SELECT subType,\n    class,\n    TRY(\n        FILTER(names.common, x->x.language = 'local') [ 1 ].value\n    ) as name,\n    ST_ASTEXT(ST_GeomFromBinary(geometry)) as geometry_wkt\nFROM overture_2023_10_19_alpha_0\nWHERE theme = 'base'\n    AND subType in ('ocean', 'lake', 'pond', 'reservoir', 'river', 'stream', 'water', 'canal')\n    AND ST_INTERSECTS(\n            ST_ENVELOPE(\n                ST_MULTIPOINT( ARRAY [\n                    ST_POINT(-122.679404, 47.360619),\n                    ST_POINT(-121.978275, 47.360619),\n                    ST_POINT(-122.679404, 47.786336),\n                    ST_POINT(-121.978275, 47.786336)\n                ])\n            ),\n            ST_GeomFromBinary(geometry)\n    )\n"})})]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["Use DuckDB to convert the ",(0,t.jsx)(n.code,{children:"csv"})," files into ",(0,t.jsx)(n.code,{children:"GeoJSONSeq"})," files."]}),"\n",(0,t.jsxs)(a,{children:[(0,t.jsx)("summary",{children:"DuckDB Query (SQL)"}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",children:"LOAD SPATIAL;\n  -- Land\n  COPY\n   (\n      SELECT\n          subtype, class, name,\n          ST_GeomFromText(geometry_wkt) as geometry\n      FROM read_csv('land.csv', auto_detect=True, header=True)\n      ) TO 'land.geojsonseq'\n  WITH (FORMAT GDAL, DRIVER 'GeoJSONSeq', SRS 'EPSG:4326');\n  -- LandUse\n  COPY (\n      SELECT\n          subtype, class, name, surface,\n          ST_GeomFromText(geometry_wkt) as geometry\n      FROM read_csv('landuse.csv', auto_detect=True, header=True)\n      ) TO 'landuse.geojsonseq'\n  WITH (FORMAT GDAL, DRIVER 'GeoJSONSeq', SRS 'EPSG:4326');\n  -- Water\n  COPY (\n      SELECT\n          subtype, class, name,\n          ST_GeomFromText(geometry_wkt) as geometry\n      FROM read_csv('water.csv', auto_detect=True, header=True)\n      ) TO 'water.geojsonseq'\n  WITH (FORMAT GDAL, DRIVER 'GeoJSONSeq', SRS 'EPSG:4326');\n"})})]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["Run ",(0,t.jsx)(n.a,{href:"https://github.com/felt/tippecanoe",children:"tippecanoe"})," to produce a ",(0,t.jsx)(n.code,{children:"pmtiles"})," archive with three ",(0,t.jsx)(n.code,{children:"geojsonseq"})," file as input:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"tippecanoe -o base.pmtiles -Z8 -z13 -P \\\n    --named-layer=land:land.geojsonseq \\\n    --named-layer=landuse:landuse.geojsonseq \\\n    --named-layer=water:water.geojsonseq\n"})}),"\n",(0,t.jsxs)(a,{children:[(0,t.jsx)("summary",{children:"Tippecanoe flag explanation"}),(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"-fo tiles/base.pmtiles"})," is our output file. It will be overwritten if it exists."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"-Z8"})," and ",(0,t.jsx)(n.code,{children:"-z13"})," will produce a tileset starting at zoom 8 going up to zoom 13."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"--named-layer=land:land.geojsonseq"})," creates the ",(0,t.jsx)(n.code,{children:"land"})," layer from the contents of ",(0,t.jsx)(n.code,{children:"land.geojson"})," (and similarly for the other files)"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"-P"})," allows tippecanoe to read the file in parallel. Since we created a GeoJSON sequence file instead of a single GeoJSON Feature Collection, tippecanoe can process the input data more efficiently."]}),"\n"]})]}),"\n"]}),"\n"]})})]}),"\n",(0,t.jsx)("hr",{}),"\n",(0,t.jsx)(n.h3,{id:"step-2-creating-a-map-with-maplibre--pmtiles",children:"Step 2: Creating a map with Maplibre + PMTiles"}),"\n",(0,t.jsxs)(n.p,{children:["At this point, we should have created five ",(0,t.jsx)(n.code,{children:"PMTiles"})," archives, one for each Overture theme."]}),"\n",(0,t.jsxs)(n.p,{children:["The map on this page combines a ",(0,t.jsx)(n.a,{href:"https://docs.maptiler.com/react/maplibre-gl-js/how-to-use-maplibre-gl-js/",children:"react maplibre example"})," with ",(0,t.jsx)(n.a,{href:"https://codesandbox.io/s/black-dream-oycvf2?file=/src/App.js",children:"PMTiles"}),". You can ",(0,t.jsx)(n.a,{href:"https://github.com/OvertureMaps/how-to/tree/main/src/components/map.js",children:"view the source"})," for the above map on github for a complete example using react, or, check out the ",(0,t.jsx)(n.a,{href:"https://labs.overturemaps.org/overture-with-daylight",children:"map based on July's release"})," for a non-react implementation of PMTiles."]}),"\n",(0,t.jsxs)(n.p,{children:["Using PMTiles with react requires adding the ",(0,t.jsx)(n.a,{href:"https://docs.protomaps.com/pmtiles/maplibre",children:"PMtiles protocol"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"import maplibregl from 'maplibre-gl';\nimport { Protocol } from 'pmtiles';\n\nuseEffect(() => {\n  let protocol = new Protocol();\n  maplibregl.addProtocol(\"pmtiles\",protocol.tile);\n\n  ... initialize your map here ...\n\n  return () => {\n    maplibregl.removeProtocol(\"pmtiles\");\n  }\n}, []);\n"})}),"\n",(0,t.jsx)(n.p,{children:"Then, reference the tile archives with a relative path when initializing the map:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:'  style: {\n    sources: {\n      roads: {\n        type: "vector",\n        url: "pmtiles://../example-map/tiles/roads.pmtiles"\n      },\n      places: {\n        type: "vector",\n        url: "pmtiles://../example-map/tiles/places.pmtiles"\n      },\n    ...\n'})}),"\n",(0,t.jsx)(n.h3,{id:"step-3-styling-the-layers",children:"Step 3: Styling the layers"}),"\n",(0,t.jsxs)(n.p,{children:["Each tab below contains the complete styles in the ",(0,t.jsx)(n.a,{href:"https://maplibre.org/maplibre-style-spec/",children:"Maplibre Style Spec"})," for the map on this page."]}),"\n",(0,t.jsxs)(s.Z,{queryString:"map-layer",children:[(0,t.jsx)(l.Z,{value:"places",label:"Places",default:!0,children:(0,t.jsx)(i.Z,{language:"json",children:JSON.stringify(w,null,2)})}),(0,t.jsx)(l.Z,{value:"placenames",label:"Placenames",default:!0,children:(0,t.jsx)(i.Z,{language:"json",children:JSON.stringify(b,null,2)})}),(0,t.jsx)(l.Z,{value:"buildings",label:"Buildings",default:!0,children:(0,t.jsx)(i.Z,{language:"json",children:JSON.stringify(f,null,2)})}),(0,t.jsx)(l.Z,{value:"roads",label:"Roads",default:!0,children:(0,t.jsx)(i.Z,{language:"json",children:JSON.stringify(T,null,2)})}),(0,t.jsx)(l.Z,{value:"land",label:"Land",default:!0,children:(0,t.jsx)(i.Z,{language:"json",children:JSON.stringify(v,null,2)})}),(0,t.jsx)(l.Z,{value:"landuse",label:"Landuse",default:!0,children:(0,t.jsx)(i.Z,{language:"json",children:JSON.stringify(S,null,2)})}),(0,t.jsx)(l.Z,{value:"water",label:"Water",default:!0,children:(0,t.jsx)(i.Z,{language:"json",children:JSON.stringify(z,null,2)})})]})]})}function L(e={}){const{wrapper:n}={...(0,o.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(D,{...e})}):D(e)}}}]);