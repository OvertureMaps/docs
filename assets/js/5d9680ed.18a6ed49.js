"use strict";(self.webpackChunkoverture_documentation=self.webpackChunkoverture_documentation||[]).push([[4798],{38707:(e,i,t)=>{t.r(i),t.d(i,{assets:()=>b,contentTitle:()=>g,default:()=>A,frontMatter:()=>v,metadata:()=>y,toc:()=>w});var s=t(74848),n=t(28453),r=t(11470),o=t(19365),a=t(97577);const d="LOAD spatial;\nLOAD httpfs;\n-- Access the data on AWS in this example\nSET s3_region='us-west-2';\n\nCOPY (\n  SELECT\n    *\n  FROM\n    read_parquet('s3://overturemaps-us-west-2/release/__OVERTURE_RELEASE/theme=divisions/*/*')\n) TO 'all_divisions.parquet';",l="LOAD spatial;\nLOAD httpfs;\n-- Access the data on AWS in this example\nSET s3_region='us-west-2';\n\nSELECT\n  count(*)\nFROM\n  read_parquet('s3://overturemaps-us-west-2/release/__OVERTURE_RELEASE/theme=divisions/type=*/*', filename=true, hive_partitioning=1);",c="LOAD spatial;\nLOAD httpfs;\n-- Access the data on AWS in this example\nSET s3_region='us-west-2';\n\nSELECT\n  count(*)\nFROM\n  read_parquet('s3://overturemaps-us-west-2/release/__OVERTURE_RELEASE/theme=divisions/type=division/*', filename=true, hive_partitioning=1);",h="LOAD spatial;\nLOAD httpfs;\n-- Access the data on AWS in this example\nSET s3_region='us-west-2';\n\nSELECT\n  count(*)\nFROM\n  read_parquet('s3://overturemaps-us-west-2/release/__OVERTURE_RELEASE/theme=divisions/type=division_area/*', filename=true, hive_partitioning=1);\n",u="LOAD spatial;\nLOAD httpfs;\n-- Access the data on AWS in this example\nSET s3_region='us-west-2';\n\nSELECT\n  count(*)\nFROM\n  read_parquet('s3://overturemaps-us-west-2/release/__OVERTURE_RELEASE/theme=divisions/type=division_boundary/*', filename=true, hive_partitioning=1);\n",p="LOAD spatial;\nLOAD httpfs;\n-- Access the data on AWS in this example\nSET s3_region='us-west-2';\n\nSELECT\n  *\nFROM\n  read_parquet('s3://overturemaps-us-west-2/release/__OVERTURE_RELEASE/theme=divisions/type=division_boundary/*', filename=true, hive_partitioning=1)\nWHERE\n  id = '085db5bb7fffffff0173c9b945a8c25f';",x="LOAD spatial;\nLOAD httpfs;\n-- Access the data on AWS in this example\nSET s3_region='us-west-2';\n\nSELECT\n  *\nFROM\n  read_parquet('s3://overturemaps-us-west-2/release/__OVERTURE_RELEASE/theme=divisions/type=division_area/*', filename=true, hive_partitioning=1)\nWHERE\n  sources[1].record_id = 'R3766655';",j="LOAD spatial;\nLOAD httpfs;\n-- Access the data on AWS in this example\nSET s3_region='us-west-2';\n\nSELECT\n  *\nFROM\n  read_parquet('s3://overturemaps-us-west-2/release/__OVERTURE_RELEASE/theme=divisions/type=division_boundary/*', filename=true, hive_partitioning=1)\nWHERE\n  bbox.xmin > -119.13728323\n  AND bbox.xmax < -95.63020817\n  AND bbox.ymin > 24.93478418\n  AND bbox.ymax < 33.43995480\n  AND subtype = 'country';",f="LOAD spatial;\nLOAD httpfs;\n-- Access the data on AWS in this example\nSET s3_region='us-west-2';\n\nCOPY (\n  SELECT\n    id,\n    names.primary as name,\n    subtype,\n    ST_GeomFromWkb(geometry) AS geometry\n  FROM\n    read_parquet('s3://overturemaps-us-west-2/release/2024-07-22.0/theme=divisions/type=division/*', filename=true, hive_partitioning=1)\n  WHERE\n    country = 'DK'\n    AND subtype IN ('locality','neighborhood')\n)\nTO\n  'overture_denmark_locality_neighborhood.shp'\nWITH (\n  FORMAT GDAL,\n  DRIVER 'ESRI Shapefile',\n  SRS 'EPSG:4326'\n);",m="INSTALL spatial;\nLOAD spatial;\n\n-- Access the data on AWS in this example\nSET s3_region='us-west-2';\n\nCOPY (\n  -- Create a temp table with the locality of Philadelphia\n  WITH philly AS (\n    SELECT \n      id as philly_id,\n      names.primary as philly_name,\n      ST_GeomFromWKB(geometry) as philly_geom\n    FROM\n      read_parquet('s3://overturemaps-us-west-2/release/2024-07-22.0/theme=divisions/type=division_area/*', filename=true, hive_partitioning=1)\n    WHERE\n      subtype = 'locality'\n      AND country = 'US'\n      AND region = 'US-PA'\n      AND names.primary = 'Philadelphia'\n  ),\n\n  -- Use the geometry of Philadelphia to filter out places within the locality boundary\n  places AS (\n    SELECT\n      names.primary AS name,\n      categories.primary as category,\n      ROUND(confidence,2) as confidence,\n      ST_GeomFromWKB(geometry) as geometry\n    FROM\n      read_parquet('s3://overturemaps-us-west-2/release/2024-07-22.0/theme=places/type=*/*', filename=true, hive_partitioning=1)\n    INNER JOIN\n      philly\n    ON ST_WITHIN(ST_GeomFromWKB(geometry), philly.philly_geom)\n  )\n\n  -- Export the places selection to a Parquet file\n  SELECT\n    *\n  FROM\n    places\n)\nTO\n  'philly_places.parquet';",v={title:"Divisions",description:"Administrative Boundaries from countries to neighborhoods"},g=void 0,y={id:"guides/divisions",title:"Divisions",description:"Administrative Boundaries from countries to neighborhoods",source:"@site/docs/guides/divisions.mdx",sourceDirName:"guides",slug:"/guides/divisions",permalink:"/guides/divisions",draft:!1,unlisted:!1,tags:[],version:"current",lastUpdatedAt:1725639935e3,frontMatter:{title:"Divisions",description:"Administrative Boundaries from countries to neighborhoods"},sidebar:"docs",previous:{title:"Buildings",permalink:"/guides/buildings"},next:{title:"Places",permalink:"/guides/places"}},b={},w=[{value:"Overview",id:"overview",level:2},{value:"Dataset description",id:"dataset-description",level:2},{value:"Feature type descriptions",id:"feature-type-descriptions",level:3},{value:"Subtype descriptions",id:"subtype-descriptions",level:3},{value:"Data columns",id:"data-columns",level:3},{value:"Data access and retrieval",id:"data-access-and-retrieval",level:2},{value:"Data usage guidelines",id:"data-usage-guidelines",level:2},{value:"Data manipulation and analysis",id:"data-manipulation-and-analysis",level:2},{value:"Exporting locality and neighborhood divisions to a local shapefile",id:"exporting-locality-and-neighborhood-divisions-to-a-local-shapefile",level:4},{value:"Exporting places data within Philadelphia to a local Parquet file",id:"exporting-places-data-within-philadelphia-to-a-local-parquet-file",level:4},{value:"Revision history",id:"revision-history",level:2},{value:"Version info",id:"version-info",level:3},{value:"Support",id:"support",level:2},{value:"Feedback",id:"feedback",level:3},{value:"Discussions",id:"discussions",level:3},{value:"Issues",id:"issues",level:3}];function E(e){const i={a:"a",admonition:"admonition",code:"code",em:"em",h2:"h2",h3:"h3",h4:"h4",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,n.R)(),...e.components},{Details:v}=i;return v||function(e,i){throw new Error("Expected "+(i?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(i.h2,{id:"overview",children:"Overview"}),"\n",(0,s.jsxs)(i.p,{children:["The Overture divisions theme has three feature types: ",(0,s.jsx)(i.code,{children:"division"}),", ",(0,s.jsx)(i.code,{children:"division_area"}),", and ",(0,s.jsx)(i.code,{children:"division_boundary"}),"."]}),"\n",(0,s.jsxs)(i.p,{children:["There are more than 5.3 million point, line, and polygon representations of human settlements, such as countries, regions, states, cities, and even neighborhoods. The theme is derived from a conflation of ",(0,s.jsx)(i.a,{href:"https://www.openstreetmap.org/",children:"OpenStreetMap"})," data and ",(0,s.jsx)(i.a,{href:"https://www.geoboundaries.org/",children:"geoBoundaries"})," data and is available under an ",(0,s.jsx)(i.a,{href:"https://opendatacommons.org/licenses/odbl/",children:"ODbL"})," license. (See the ",(0,s.jsx)(i.a,{href:"https://docs.overturemaps.org/attribution/",children:"attribution page"})," for more information.)"]}),"\n",(0,s.jsx)(i.p,{children:"Divisions data can be used for many purposes, which can include, but are not limited to:"}),"\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsx)(i.li,{children:"reverse-geocoding"}),"\n",(0,s.jsx)(i.li,{children:"cartographic styling and map rendering"}),"\n",(0,s.jsx)(i.li,{children:"place labels"}),"\n",(0,s.jsx)(i.li,{children:"choropleth rendering"}),"\n",(0,s.jsx)(i.li,{children:"containment checks (e.g. point-in-polygon analysis)"}),"\n",(0,s.jsx)(i.li,{children:"choosing a geometry based on your use case"}),"\n"]}),"\n",(0,s.jsxs)(i.table,{children:[(0,s.jsx)(i.thead,{children:(0,s.jsx)(i.tr,{children:(0,s.jsx)(i.th,{style:{textAlign:"center"},children:(0,s.jsx)(i.img,{alt:"Overture divisions coverage - country and region boundaries",src:t(54870).A+"",width:"2486",height:"1700"})})})}),(0,s.jsx)(i.tbody,{children:(0,s.jsx)(i.tr,{children:(0,s.jsx)(i.td,{style:{textAlign:"center"},children:(0,s.jsx)(i.em,{children:"Overture divisions data, styled by subtype: countries in purple, region boundaries as green lines."})})})})]}),"\n",(0,s.jsx)(i.h2,{id:"dataset-description",children:"Dataset description"}),"\n",(0,s.jsx)(i.h3,{id:"feature-type-descriptions",children:"Feature type descriptions"}),"\n",(0,s.jsxs)(i.p,{children:["A ",(0,s.jsx)(i.code,{children:"division"})," is a feature type that represents an official or non-official organization of people: country, region, province, city, neighborhood, etc. \u2014 as seen from a given political perspective. It has a ",(0,s.jsx)(i.code,{children:"Point"})," geometry which gives an approximate location of the position most commonly associated with the feature. We encourage you to consult the ",(0,s.jsxs)(i.a,{href:"/schema/reference/divisions/division",children:["schema reference documentation for the ",(0,s.jsx)(i.code,{children:"division"})," feature type"]}),"."]}),"\n",(0,s.jsxs)(i.p,{children:["A ",(0,s.jsx)(i.code,{children:"division_area"})," is a feature type that captures the shape of the land area, or land and territorial sea (maritime), belonging to a ",(0,s.jsx)(i.code,{children:"division"})," feature. It has a ",(0,s.jsx)(i.code,{children:"Polygon"})," or ",(0,s.jsx)(i.code,{children:"MultiPolygon"})," geometry. We encourage you to consult the ",(0,s.jsxs)(i.a,{href:"/schema/reference/divisions/division_area",children:["schema reference documentation for the ",(0,s.jsx)(i.code,{children:"division_area"})," feature type"]}),"."]}),"\n",(0,s.jsxs)(i.p,{children:["A ",(0,s.jsx)(i.code,{children:"division_boundary"})," is a feature type that represents a shared border between two ",(0,s.jsx)(i.code,{children:"division"})," features. It has a ",(0,s.jsx)(i.code,{children:"LineString"})," geometry. The geometry of a ",(0,s.jsx)(i.code,{children:"divison_boundary"})," is either wholly non-maritime, or wholly maritime. A maritime boundary is the extension of a non-maritime boundary into the water. Please consult the ",(0,s.jsxs)(i.a,{href:"/schema/reference/divisions/division_boundary",children:["schema reference documentation for the ",(0,s.jsx)(i.code,{children:"division_boundary"})," feature type"]}),"."]}),"\n",(0,s.jsx)(i.admonition,{type:"warning",children:(0,s.jsxs)(i.p,{children:["The ",(0,s.jsx)(i.code,{children:"division_boundary"})," feature type was introduced in the July 2024 release. It replaced the ",(0,s.jsx)(i.code,{children:"boundary"})," feature type."]})}),"\n",(0,s.jsx)(i.h3,{id:"subtype-descriptions",children:"Subtype descriptions"}),"\n",(0,s.jsxs)(i.p,{children:["Subtypes can represent each feature's administrative level, from ",(0,s.jsx)(i.code,{children:"country"})," down to ",(0,s.jsx)(i.code,{children:"microhood"}),". Subtypes can also represent a place hierarchy within a country and offer a standardized place definition for divisions. See below for a list of subtypes and their descriptions in the divisions theme:"]}),"\n",(0,s.jsxs)(v,{children:[(0,s.jsx)("summary",{children:"List of all subtypes in the divisions theme"}),(0,s.jsxs)(i.table,{children:[(0,s.jsx)(i.thead,{children:(0,s.jsxs)(i.tr,{children:[(0,s.jsx)(i.th,{children:"Subtype"}),(0,s.jsx)(i.th,{children:"Description"}),(0,s.jsx)(i.th,{children:"Example"})]})}),(0,s.jsxs)(i.tbody,{children:[(0,s.jsxs)(i.tr,{children:[(0,s.jsx)(i.td,{children:(0,s.jsx)(i.strong,{children:"country"})}),(0,s.jsx)(i.td,{children:"Largest unit of independent sovereignty."}),(0,s.jsx)(i.td,{children:"United States"})]}),(0,s.jsxs)(i.tr,{children:[(0,s.jsx)(i.td,{children:(0,s.jsx)(i.strong,{children:"dependency"})}),(0,s.jsx)(i.td,{children:"A place that is not exactly a sub-region of a country but is dependent on a parent company for defence, passport control, subsidies, etc."}),(0,s.jsx)(i.td,{children:"Puerto Rico"})]}),(0,s.jsxs)(i.tr,{children:[(0,s.jsx)(i.td,{children:(0,s.jsx)(i.strong,{children:"macroregion"})}),(0,s.jsx)(i.td,{children:"A bundle of regions. These exist mainly in Europe."}),(0,s.jsx)(i.td,{children:"Scotland; \xcele-de-France"})]}),(0,s.jsxs)(i.tr,{children:[(0,s.jsx)(i.td,{children:(0,s.jsx)(i.strong,{children:"region"})}),(0,s.jsx)(i.td,{children:"States, provinces, regions. Largest sub-country administrative unit most countries, unless they have dependencies/macroregions."}),(0,s.jsx)(i.td,{children:"Alaska; Alberta"})]}),(0,s.jsxs)(i.tr,{children:[(0,s.jsx)(i.td,{children:(0,s.jsx)(i.strong,{children:"macrocounty"})}),(0,s.jsx)(i.td,{children:"A bundle of counties. Again, these exist mainly in Europe."}),(0,s.jsx)(i.td,{children:"Inverness"})]}),(0,s.jsxs)(i.tr,{children:[(0,s.jsx)(i.td,{children:(0,s.jsx)(i.strong,{children:"county"})}),(0,s.jsx)(i.td,{children:"Counties... Largest sub-region administrative unit in most countries, unless they have macrocounties."}),(0,s.jsx)(i.td,{children:"Kings County, NY"})]}),(0,s.jsxs)(i.tr,{children:[(0,s.jsx)(i.td,{children:(0,s.jsx)(i.strong,{children:"localadmin"})}),(0,s.jsx)(i.td,{children:"A level of government available in some parts of the world that contains localities or populated places that themselves have no authority. Often but not exclusively found in Europe."}),(0,s.jsx)(i.td,{children:"Paris"})]}),(0,s.jsxs)(i.tr,{children:[(0,s.jsx)(i.td,{children:(0,s.jsx)(i.strong,{children:"locality"})}),(0,s.jsx)(i.td,{children:"A populated place that may or may not have its own administrative authority. (It won't if it belongs to a localadmin.)"}),(0,s.jsx)(i.td,{children:"Taipei"})]}),(0,s.jsxs)(i.tr,{children:[(0,s.jsx)(i.td,{children:(0,s.jsx)(i.strong,{children:"borough"})}),(0,s.jsx)(i.td,{children:"A local government unit, below the locality placetype."}),(0,s.jsx)(i.td,{children:"Brooklyn, Queens, etc."})]}),(0,s.jsxs)(i.tr,{children:[(0,s.jsx)(i.td,{children:(0,s.jsx)(i.strong,{children:"macrohood"})}),(0,s.jsx)(i.td,{children:"A super-neighborhood that contains smaller divisions of type neighborhood."}),(0,s.jsx)(i.td,{children:"BoCoCa (Boerum Hill, Cobble Hill, and Carroll Gardens)"})]}),(0,s.jsxs)(i.tr,{children:[(0,s.jsx)(i.td,{children:(0,s.jsx)(i.strong,{children:"neighborhood"})}),(0,s.jsx)(i.td,{children:"A neighborhood. Most neighborhoods will be just this, unless there's enough granular division to warrant introducing macrohood and/or microhood divisions."}),(0,s.jsx)(i.td,{children:"Cobble Hill"})]}),(0,s.jsxs)(i.tr,{children:[(0,s.jsx)(i.td,{children:(0,s.jsx)(i.strong,{children:"microhood"})}),(0,s.jsx)(i.td,{children:"A mini-neighborhood that is contained within a division of type neighborhood."}),(0,s.jsx)(i.td,{children:"G\xe4tjensort in Hamburg"})]})]})]})]}),"\n",(0,s.jsx)(i.h3,{id:"data-columns",children:"Data columns"}),"\n",(0,s.jsx)(i.p,{children:"The addresses GeoParquet file contains the following properties:"}),"\n",(0,s.jsxs)(v,{children:[(0,s.jsx)("summary",{children:"Schema for the GeoParquet files in the divisions theme"}),(0,s.jsxs)(i.table,{children:[(0,s.jsx)(i.thead,{children:(0,s.jsxs)(i.tr,{children:[(0,s.jsx)(i.th,{children:"Property Name"}),(0,s.jsx)(i.th,{children:"Type"}),(0,s.jsx)(i.th,{children:"Description"})]})}),(0,s.jsxs)(i.tbody,{children:[(0,s.jsxs)(i.tr,{children:[(0,s.jsx)(i.td,{children:(0,s.jsx)(i.strong,{children:"id"})}),(0,s.jsx)(i.td,{children:"string"}),(0,s.jsx)(i.td,{children:"A feature ID. This may be an ID associated with the Global Entity Reference System (GERS) if\u2014and-only-if the feature represents an entity that is part of GERS."})]}),(0,s.jsxs)(i.tr,{children:[(0,s.jsx)(i.td,{children:(0,s.jsx)(i.strong,{children:"geometry"})}),(0,s.jsx)(i.td,{children:"blob"}),(0,s.jsx)(i.td,{children:"A WKB representation of the entity's geometry - a Point, Polygon, MultiPolygon, or LineString."})]}),(0,s.jsxs)(i.tr,{children:[(0,s.jsx)(i.td,{children:(0,s.jsx)(i.strong,{children:"bbox"})}),(0,s.jsx)(i.td,{children:"array"}),(0,s.jsxs)(i.td,{children:["The bounding box of an entity's geometry, represented with float values, in a ",(0,s.jsx)(i.code,{children:"xmin, xmax, ymin, ymax"})," format."]})]}),(0,s.jsxs)(i.tr,{children:[(0,s.jsx)(i.td,{children:(0,s.jsx)(i.strong,{children:"version"})}),(0,s.jsx)(i.td,{children:"integer"}),(0,s.jsx)(i.td,{children:"Version number of the feature, incremented in each Overture release where the geometry or attributes of this feature changed."})]}),(0,s.jsxs)(i.tr,{children:[(0,s.jsx)(i.td,{children:(0,s.jsx)(i.strong,{children:"update_time"})}),(0,s.jsx)(i.td,{children:"string"}),(0,s.jsx)(i.td,{children:"Timestamp when the feature was last updated."})]}),(0,s.jsxs)(i.tr,{children:[(0,s.jsx)(i.td,{children:(0,s.jsx)(i.strong,{children:"sources"})}),(0,s.jsx)(i.td,{children:"array"}),(0,s.jsx)(i.td,{children:"The array of source information for the properties of a given feature, with each entry being a source object which lists the property in JSON Pointer notation and the dataset that specific value came from. All features must have a root level source which is the default source if a specific property's source is not specified."})]}),(0,s.jsxs)(i.tr,{children:[(0,s.jsx)(i.td,{children:(0,s.jsx)(i.strong,{children:"subtype"})}),(0,s.jsx)(i.td,{children:"string"}),(0,s.jsx)(i.td,{children:"Category of the division from a finite, hierarchical, ordered list of categories (e.g. country, region, locality, etc.) similar to a Who's on First placetype."})]}),(0,s.jsxs)(i.tr,{children:[(0,s.jsx)(i.td,{children:(0,s.jsx)(i.strong,{children:"wikidata"})}),(0,s.jsx)(i.td,{children:"string"}),(0,s.jsxs)(i.td,{children:["A wikidata ID if available, as found on ",(0,s.jsx)(i.a,{href:"https://www.wikidata.org/",children:"https://www.wikidata.org/"}),"."]})]}),(0,s.jsxs)(i.tr,{children:[(0,s.jsx)(i.td,{children:(0,s.jsx)(i.strong,{children:"population"})}),(0,s.jsx)(i.td,{children:"integer"}),(0,s.jsx)(i.td,{children:"Population of the division."})]}),(0,s.jsxs)(i.tr,{children:[(0,s.jsx)(i.td,{children:(0,s.jsx)(i.strong,{children:"names"})}),(0,s.jsx)(i.td,{children:"array"}),(0,s.jsx)(i.td,{children:"A primary name of the entity, and a set of optional name translations. Name translations are represented in key, value pairs, where the key is an ISO language code and the value is the translated name."})]}),(0,s.jsxs)(i.tr,{children:[(0,s.jsx)(i.td,{children:(0,s.jsx)(i.strong,{children:"class"})}),(0,s.jsx)(i.td,{children:"string"}),(0,s.jsxs)(i.td,{children:["A value to represent whether an entity represents a ",(0,s.jsx)(i.code,{children:"maritime"})," or ",(0,s.jsx)(i.code,{children:"land"})," feature."]})]}),(0,s.jsxs)(i.tr,{children:[(0,s.jsx)(i.td,{children:(0,s.jsx)(i.strong,{children:"division_ids"})}),(0,s.jsx)(i.td,{children:"list"}),(0,s.jsx)(i.td,{children:"A list of the two division IDs that share this division boundary."})]}),(0,s.jsxs)(i.tr,{children:[(0,s.jsx)(i.td,{children:(0,s.jsx)(i.strong,{children:"is_disputed"})}),(0,s.jsx)(i.td,{children:"boolean"}),(0,s.jsx)(i.td,{children:'Indicator if there are entities disputing this division boundary. Information about entities disputing this boundary should be included in perspectives property. This property should also be true if boundary between two entities is unclear and this is "best guess". So having it true and no perspectives gives map creators reason not to fully trust the boundary, but use it if they have no other.'})]}),(0,s.jsxs)(i.tr,{children:[(0,s.jsx)(i.td,{children:(0,s.jsx)(i.strong,{children:"perspectives"})}),(0,s.jsx)(i.td,{children:"array"}),(0,s.jsx)(i.td,{children:"Political perspectives from which this division boundary is considered to be an accurate representation. If this property is absent, then this boundary is not known to be disputed from any political perspective. Consequently, there is only one boundary feature representing the entire real world entity. If this property is present, it means the boundary represents one of several alternative perspectives on the same real-world entity."})]}),(0,s.jsxs)(i.tr,{children:[(0,s.jsx)(i.td,{children:(0,s.jsx)(i.strong,{children:"local_type"})}),(0,s.jsx)(i.td,{children:"string"}),(0,s.jsx)(i.td,{children:"Local name for the subtype property, optionally localized. This property is localized using a standard Overture names structure."})]}),(0,s.jsxs)(i.tr,{children:[(0,s.jsx)(i.td,{children:(0,s.jsx)(i.strong,{children:"country"})}),(0,s.jsx)(i.td,{children:"string"}),(0,s.jsx)(i.td,{children:"ISO 3166-1 alpha-2 country code of the country or country-like entity, that this division represents or belongs to. If the entity this division represents has a country code, the country property contains it. If it does not, the country property contains the country code of the first division encountered by traversing the parent_division_id chain to the root."})]}),(0,s.jsxs)(i.tr,{children:[(0,s.jsx)(i.td,{children:(0,s.jsx)(i.strong,{children:"region"})}),(0,s.jsx)(i.td,{children:"string"}),(0,s.jsx)(i.td,{children:"ISO 3166-2 principal subdivision code of the subdivision-like entity this division represents or belongs to. If the entity this division represents has a principal subdivision code, the region property contains it. If it does not, the region property contains the principal subdivision code of the first division encountered by traversing the parent_division_id chain to the root."})]}),(0,s.jsxs)(i.tr,{children:[(0,s.jsx)(i.td,{children:(0,s.jsx)(i.strong,{children:"hierarchies"})}),(0,s.jsx)(i.td,{children:"Array"}),(0,s.jsx)(i.td,{children:"Hierarchies in which this division participates."})]}),(0,s.jsxs)(i.tr,{children:[(0,s.jsx)(i.td,{children:(0,s.jsx)(i.strong,{children:"parent_division_id"})}),(0,s.jsx)(i.td,{children:"string"}),(0,s.jsx)(i.td,{children:"Division ID of this division's parent division. Not allowed for top-level divisions (countries) and required for all other divisions. The default parent division is the parent division as seen from the default political perspective, if there is one, and is otherwise chosen somewhat arbitrarily. The hierarchies property can be used to inspect the exhaustive list of parent divisions."})]}),(0,s.jsxs)(i.tr,{children:[(0,s.jsx)(i.td,{children:(0,s.jsx)(i.strong,{children:"norms"})}),(0,s.jsx)(i.td,{children:"list"}),(0,s.jsx)(i.td,{children:"Collects information about local norms and rules within the division that are generally useful for mapping and map-related use cases. If the norms property or a desired sub-property of the norms property is missing on a division, but at least one of its ancestor divisions has the norms property and the desired sub-property, then the value from the nearest ancestor division may be assumed."})]}),(0,s.jsxs)(i.tr,{children:[(0,s.jsx)(i.td,{children:(0,s.jsx)(i.strong,{children:"capital_division_ids"})}),(0,s.jsx)(i.td,{children:"array"}),(0,s.jsx)(i.td,{children:"Division IDs of this division's capital divisions. If present, this property will refer to the division IDs of the capital cities, county seats, etc. of a division."})]}),(0,s.jsxs)(i.tr,{children:[(0,s.jsx)(i.td,{children:(0,s.jsx)(i.strong,{children:"division_id"})}),(0,s.jsx)(i.td,{children:"string"}),(0,s.jsx)(i.td,{children:"Division ID of the division this area belongs to."})]}),(0,s.jsxs)(i.tr,{children:[(0,s.jsx)(i.td,{children:(0,s.jsx)(i.strong,{children:"filename"})}),(0,s.jsx)(i.td,{children:"string"}),(0,s.jsx)(i.td,{children:"Name of the S3 file being queried."})]}),(0,s.jsxs)(i.tr,{children:[(0,s.jsx)(i.td,{children:(0,s.jsx)(i.strong,{children:"theme"})}),(0,s.jsx)(i.td,{children:"string"}),(0,s.jsx)(i.td,{children:"Name of the Overture theme being queried."})]}),(0,s.jsxs)(i.tr,{children:[(0,s.jsx)(i.td,{children:(0,s.jsx)(i.strong,{children:"type"})}),(0,s.jsx)(i.td,{children:"string"}),(0,s.jsx)(i.td,{children:"Name of the Overture feature type being queried."})]})]})]})]}),"\n",(0,s.jsx)(i.h2,{id:"data-access-and-retrieval",children:"Data access and retrieval"}),"\n",(0,s.jsx)(i.p,{children:"Overture's six data themes, including divisions, are freely available on both Amazon S3 and Microsoft Azure Blob Storage at these locations:"}),"\n",(0,s.jsxs)(i.table,{children:[(0,s.jsx)(i.thead,{children:(0,s.jsxs)(i.tr,{children:[(0,s.jsx)(i.th,{children:"Provider"}),(0,s.jsx)(i.th,{children:"Location"})]})}),(0,s.jsxs)(i.tbody,{children:[(0,s.jsxs)(i.tr,{children:[(0,s.jsx)(i.td,{children:"Amazon S3"}),(0,s.jsx)(i.td,{children:(0,s.jsx)(i.code,{children:"s3://overturemaps-us-west-2/release/"})})]}),(0,s.jsxs)(i.tr,{children:[(0,s.jsx)(i.td,{children:"Azure Blob Storage"}),(0,s.jsx)(i.td,{children:(0,s.jsx)(i.code,{children:"https://overturemapswestus2.blob.core.windows.net/release/"})})]})]})]}),"\n",(0,s.jsxs)(i.p,{children:["Overture distributes its datasets as ",(0,s.jsx)(i.a,{href:"https://geoparquet.org/",children:"GeoParquet"}),", a column-oriented spatial data format that is a backwards-compatible extension of ",(0,s.jsx)(i.a,{href:"https://parquet.apache.org/",children:"Apache Parquet"}),'. Parquet (and GeoParquet) is optimized for "cloud-native" queries, which means you can use many developer-friendly tools to efficiently fetch column "chunks" of cloud-hosted data. We encourage users who are new to GeoParquet to consult ',(0,s.jsx)(i.a,{href:"https://guide.cloudnativegeo.org/geoparquet/",children:"this guide"}),"."]}),"\n",(0,s.jsxs)(i.p,{children:[(0,s.jsx)(i.a,{href:"https://docs.overturemaps.org/getting-data/",children:"The Getting Data section of this documentation"})," offers instructions for using several tools to access Overture data, including DuckDB and Overture's Python command-line tool. See examples below for divisions."]}),"\n",(0,s.jsxs)(r.default,{children:[(0,s.jsxs)(o.default,{value:"Python Command-line Tool",label:"Python Command-line Tool",default:!0,children:[(0,s.jsxs)(i.p,{children:["You can find Overture's official Python command-line tool ",(0,s.jsx)(i.a,{href:"https://github.com/OvertureMaps/overturemaps-py",children:"here"}),"."]}),(0,s.jsx)(i.p,{children:"This tool helps to download Overture data within a region of interest and converts it to a few different file formats. In this example, a bounding box is passed to obtain all divisions data around Boston, MA:"}),(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{children:"overturemaps download --bbox=-71.068,42.353,-71.058,42.363 -f geojson --type=divisions -o boston.geojson\n"})}),(0,s.jsx)(i.p,{children:"Right now there is only one option to the overturemaps utility: download. It will download Overture Maps data with an optional bounding box into the specified file format. When specifying a bounding box, only the minimum data is transferred. The result is streamed out and can handle arbitrarily large bounding boxes."}),(0,s.jsx)(i.p,{children:"Command-line options:"}),(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsxs)(i.li,{children:[(0,s.jsx)(i.strong,{children:"--bbox"})," (optional): west, south, east, north longitude and latitude coordinates. When omitted the entire dataset for the specified type will be downloaded"]}),"\n",(0,s.jsxs)(i.li,{children:[(0,s.jsx)(i.strong,{children:"-f"}),' (required: one of "geojson", "geojsonseq", "geoparquet"): output format']}),"\n",(0,s.jsxs)(i.li,{children:[(0,s.jsx)(i.strong,{children:"--output/-o"})," (optional): Location of output file. When omitted output will be written to stdout."]}),"\n",(0,s.jsxs)(i.li,{children:[(0,s.jsx)(i.strong,{children:"--type/-t"})," (required): The Overture map data type to be downloaded. Examples of types are building for building footprints, place for POI places data, etc. Run overturemaps download --help for the complete list of allowed types"]}),"\n"]}),(0,s.jsx)(i.p,{children:"This downloads data directly from Overture's S3 bucket without interacting with any other servers. By including bounding box extents on each row in the Overture distribution, the underlying Parquet readers use the Parquet summary statistics to download the minimum amount of data necessary to extract data from the desired region."})]}),(0,s.jsxs)(o.default,{value:"DuckDB",label:"DuckDB",default:!0,children:[(0,s.jsxs)(i.p,{children:["First, follow the ",(0,s.jsx)(i.a,{href:"/getting-data/duckdb/",children:"setup guide for DuckDB"}),"."]}),(0,s.jsx)(a.A,{query:d}),(0,s.jsx)(i.p,{children:"Note: Running this query will result in a ~6.4GB file."})]})]}),"\n",(0,s.jsx)(i.h2,{id:"data-usage-guidelines",children:"Data usage guidelines"}),"\n",(0,s.jsx)(i.p,{children:"We recommend querying and downloading only the Overture data you need.\nIf you have a particular geographic area of interest, there are several options for using a simple bounding box to extract divisions data."}),"\n",(0,s.jsxs)(r.default,{children:[(0,s.jsxs)(o.default,{value:"Overture Maps Explorer",label:"Overture Maps Explorer",default:!0,children:[(0,s.jsxs)(i.p,{children:["To quickly view and download modest amounts of data, you can use the ",(0,s.jsx)(i.a,{href:"https://explore.overturemaps.org/#15.07/41.89731/12.47626",children:"Overture Maps Explorer website"}),"."]}),(0,s.jsxs)(i.p,{children:["To download data: Pan to the area you are interested in, turn off the other layers, then click ",(0,s.jsx)(i.code,{children:"Download Visible"}),"."]}),(0,s.jsx)(i.p,{children:"This will download the area visible on your screen."}),(0,s.jsxs)(i.table,{children:[(0,s.jsx)(i.thead,{children:(0,s.jsx)(i.tr,{children:(0,s.jsx)(i.th,{style:{textAlign:"center"},children:(0,s.jsx)(i.img,{alt:"Exploring divsions data in NYC",src:t(37576).A+"",width:"1447",height:"800"})})})}),(0,s.jsx)(i.tbody,{children:(0,s.jsx)(i.tr,{children:(0,s.jsx)(i.td,{style:{textAlign:"center"},children:(0,s.jsxs)(i.em,{children:["Exploring divisions data in NYC using ",(0,s.jsx)(i.a,{href:"https://explore.overturemaps.org/#10.35/40.802/-73.9407",children:"Overture's Explore tool"}),"."]})})})})]})]}),(0,s.jsxs)(o.default,{value:"Python Command-line Tool",label:"Python Command-line Tool",default:!0,children:[(0,s.jsxs)(i.p,{children:["First, follow the ",(0,s.jsx)(i.a,{href:"/getting-data/overturemaps-py/",children:"setup guide for the Python Command-line Tool"}),"."]}),(0,s.jsxs)(i.p,{children:["You can alter the ",(0,s.jsx)(i.code,{children:"bbox"})," value to download a particular area."]}),(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{children:"overturemaps download --bbox=-71.068,42.353,-71.058,42.363 -f geojson --type=divisions -o boston.geojson\n"})})]}),(0,s.jsxs)(o.default,{value:"DuckDB",label:"DuckDB",default:!0,children:[(0,s.jsxs)(i.p,{children:["First, follow the ",(0,s.jsx)(i.a,{href:"/getting-data/duckdb/",children:"setup guide for DuckDB"}),"."]}),(0,s.jsx)(i.p,{children:"DuckDB allows you to pass a bounding box in your query to select features in a specified geogrpahic area."}),(0,s.jsx)(i.p,{children:"This example returns results for the country boundary between the US and Mexico:"}),(0,s.jsx)(a.A,{query:j})]})]}),"\n",(0,s.jsx)(i.h2,{id:"data-manipulation-and-analysis",children:"Data manipulation and analysis"}),"\n",(0,s.jsx)(i.p,{children:"Using these queries, you can get counts for each feature type in divisions."}),"\n",(0,s.jsxs)(r.default,{children:[(0,s.jsx)(o.default,{value:"total counts",label:"total counts",default:!0,children:(0,s.jsx)(a.A,{query:l})}),(0,s.jsx)(o.default,{value:"division counts",label:"division counts",default:!0,children:(0,s.jsx)(a.A,{query:c})}),(0,s.jsx)(o.default,{value:"division_area counts",label:"division_area counts",default:!0,children:(0,s.jsx)(a.A,{query:h})}),(0,s.jsx)(o.default,{value:"division_boundary counts",label:"division_boundary counts",default:!0,children:(0,s.jsx)(a.A,{query:u})})]}),"\n",(0,s.jsxs)(r.default,{children:[(0,s.jsx)(o.default,{value:"query using an Overture ID",label:"query using an Overture ID",default:!0,children:(0,s.jsx)(a.A,{query:p})}),(0,s.jsx)(o.default,{value:"query using an OSM ID",label:"query using an OSM ID",default:!0,children:(0,s.jsx)(a.A,{query:x})})]}),"\n",(0,s.jsx)(i.h4,{id:"exporting-locality-and-neighborhood-divisions-to-a-local-shapefile",children:"Exporting locality and neighborhood divisions to a local shapefile"}),"\n",(0,s.jsx)(i.p,{children:"This query will return a subset of fields and the geometry for each locality and neighborhood division entity in Denmark."}),"\n",(0,s.jsxs)(v,{children:[(0,s.jsx)("summary",{children:"Query"}),(0,s.jsx)(a.A,{query:f})]}),"\n",(0,s.jsx)(i.h4,{id:"exporting-places-data-within-philadelphia-to-a-local-parquet-file",children:"Exporting places data within Philadelphia to a local Parquet file"}),"\n",(0,s.jsx)(i.p,{children:"This query will return Places theme data for any place within the locality of Philadelphia"}),"\n",(0,s.jsxs)(v,{children:[(0,s.jsx)("summary",{children:"Query"}),(0,s.jsx)(a.A,{query:m})]}),"\n",(0,s.jsx)(i.h2,{id:"revision-history",children:"Revision history"}),"\n",(0,s.jsx)(i.h3,{id:"version-info",children:"Version info"}),"\n",(0,s.jsxs)(i.p,{children:["You can find the most recent release notes ",(0,s.jsx)(i.a,{href:"https://docs.overturemaps.org/release/latest/",children:"here"}),"."]}),"\n",(0,s.jsx)(i.h2,{id:"support",children:"Support"}),"\n",(0,s.jsx)(i.h3,{id:"feedback",children:"Feedback"}),"\n",(0,s.jsxs)(i.p,{children:["You can find a list of Overture repositories ",(0,s.jsx)(i.a,{href:"https://github.com/orgs/OvertureMaps/repositories",children:"here"}),"."]}),"\n",(0,s.jsx)(i.p,{children:"Discussions are generally reserved for broader conversations around the divisions project as a whole (supporting a new workflow, adding a dataset, null attributes)."}),"\n",(0,s.jsx)(i.p,{children:"Issues are generally reserved for more specific concerns with specific entities in the dataset (geometry validation, missing entities, duplicate entities) or country-specific concerns."}),"\n",(0,s.jsx)(i.h3,{id:"discussions",children:"Discussions"}),"\n",(0,s.jsx)(i.p,{children:"You can start and add to discussions in each of the public Overture repositories. Some examples:"}),"\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsxs)(i.li,{children:[(0,s.jsx)(i.strong,{children:"General Overture Discussions"}),": ",(0,s.jsx)(i.a,{href:"https://github.com/orgs/OvertureMaps/discussions",children:"https://github.com/orgs/OvertureMaps/discussions"})]}),"\n",(0,s.jsxs)(i.li,{children:[(0,s.jsx)(i.strong,{children:"Data Discussions"}),": ",(0,s.jsx)(i.a,{href:"https://github.com/OvertureMaps/data/discussions",children:"https://github.com/OvertureMaps/data/discussions"})]}),"\n",(0,s.jsxs)(i.li,{children:[(0,s.jsx)(i.strong,{children:"Schema Discussions"}),": ",(0,s.jsx)(i.a,{href:"https://github.com/OvertureMaps/schema/discussions",children:"https://github.com/OvertureMaps/schema/discussions"})]}),"\n"]}),"\n",(0,s.jsx)(i.p,{children:"Discussions around Overture's divisions data should be filed in the Data repository."}),"\n",(0,s.jsx)(i.h3,{id:"issues",children:"Issues"}),"\n",(0,s.jsx)(i.p,{children:"You can start and add to issues in each of the public Overture repositories, too. Some examples:"}),"\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsxs)(i.li,{children:[(0,s.jsx)(i.strong,{children:"Data Issues"}),": ",(0,s.jsx)(i.a,{href:"https://github.com/OvertureMaps/data/issues",children:"https://github.com/OvertureMaps/data/issues"})]}),"\n",(0,s.jsxs)(i.li,{children:[(0,s.jsx)(i.strong,{children:"Schema Issues"}),": ",(0,s.jsx)(i.a,{href:"https://github.com/OvertureMaps/schema/issues",children:"https://github.com/OvertureMaps/schema/issues"})]}),"\n",(0,s.jsxs)(i.li,{children:[(0,s.jsx)(i.strong,{children:"Tiles issues"}),": ",(0,s.jsx)(i.a,{href:"https://github.com/OvertureMaps/overture-tiles/issues",children:"https://github.com/OvertureMaps/overture-tiles/issues"})]}),"\n"]}),"\n",(0,s.jsx)(i.p,{children:"Issues around Overture's divisions data should be filed in the data repository."})]})}function A(e={}){const{wrapper:i}={...(0,n.R)(),...e.components};return i?(0,s.jsx)(i,{...e,children:(0,s.jsx)(E,{...e})}):E(e)}},19365:(e,i,t)=>{t.r(i),t.d(i,{default:()=>o});t(96540);var s=t(18215);const n={tabItem:"tabItem_Ymn6"};var r=t(74848);function o(e){let{children:i,hidden:t,className:o}=e;return(0,r.jsx)("div",{role:"tabpanel",className:(0,s.A)(n.tabItem,o),hidden:t,children:i})}},11470:(e,i,t)=>{t.r(i),t.d(i,{default:()=>w});var s=t(96540),n=t(18215),r=t(23104),o=t(56347),a=t(205),d=t(57485),l=t(31682),c=t(89466);function h(e){return s.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,s.isValidElement)(e)&&function(e){const{props:i}=e;return!!i&&"object"==typeof i&&"value"in i}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function u(e){const{values:i,children:t}=e;return(0,s.useMemo)((()=>{const e=i??function(e){return h(e).map((e=>{let{props:{value:i,label:t,attributes:s,default:n}}=e;return{value:i,label:t,attributes:s,default:n}}))}(t);return function(e){const i=(0,l.X)(e,((e,i)=>e.value===i.value));if(i.length>0)throw new Error(`Docusaurus error: Duplicate values "${i.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[i,t])}function p(e){let{value:i,tabValues:t}=e;return t.some((e=>e.value===i))}function x(e){let{queryString:i=!1,groupId:t}=e;const n=(0,o.W6)(),r=function(e){let{queryString:i=!1,groupId:t}=e;if("string"==typeof i)return i;if(!1===i)return null;if(!0===i&&!t)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return t??null}({queryString:i,groupId:t});return[(0,d.aZ)(r),(0,s.useCallback)((e=>{if(!r)return;const i=new URLSearchParams(n.location.search);i.set(r,e),n.replace({...n.location,search:i.toString()})}),[r,n])]}function j(e){const{defaultValue:i,queryString:t=!1,groupId:n}=e,r=u(e),[o,d]=(0,s.useState)((()=>function(e){let{defaultValue:i,tabValues:t}=e;if(0===t.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(i){if(!p({value:i,tabValues:t}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${i}" but none of its children has the corresponding value. Available values are: ${t.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return i}const s=t.find((e=>e.default))??t[0];if(!s)throw new Error("Unexpected error: 0 tabValues");return s.value}({defaultValue:i,tabValues:r}))),[l,h]=x({queryString:t,groupId:n}),[j,f]=function(e){let{groupId:i}=e;const t=function(e){return e?`docusaurus.tab.${e}`:null}(i),[n,r]=(0,c.Dv)(t);return[n,(0,s.useCallback)((e=>{t&&r.set(e)}),[t,r])]}({groupId:n}),m=(()=>{const e=l??j;return p({value:e,tabValues:r})?e:null})();(0,a.A)((()=>{m&&d(m)}),[m]);return{selectedValue:o,selectValue:(0,s.useCallback)((e=>{if(!p({value:e,tabValues:r}))throw new Error(`Can't select invalid tab value=${e}`);d(e),h(e),f(e)}),[h,f,r]),tabValues:r}}var f=t(92303);const m={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var v=t(74848);function g(e){let{className:i,block:t,selectedValue:s,selectValue:o,tabValues:a}=e;const d=[],{blockElementScrollPositionUntilNextRender:l}=(0,r.a_)(),c=e=>{const i=e.currentTarget,t=d.indexOf(i),n=a[t].value;n!==s&&(l(i),o(n))},h=e=>{let i=null;switch(e.key){case"Enter":c(e);break;case"ArrowRight":{const t=d.indexOf(e.currentTarget)+1;i=d[t]??d[0];break}case"ArrowLeft":{const t=d.indexOf(e.currentTarget)-1;i=d[t]??d[d.length-1];break}}i?.focus()};return(0,v.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,n.A)("tabs",{"tabs--block":t},i),children:a.map((e=>{let{value:i,label:t,attributes:r}=e;return(0,v.jsx)("li",{role:"tab",tabIndex:s===i?0:-1,"aria-selected":s===i,ref:e=>d.push(e),onKeyDown:h,onClick:c,...r,className:(0,n.A)("tabs__item",m.tabItem,r?.className,{"tabs__item--active":s===i}),children:t??i},i)}))})}function y(e){let{lazy:i,children:t,selectedValue:n}=e;const r=(Array.isArray(t)?t:[t]).filter(Boolean);if(i){const e=r.find((e=>e.props.value===n));return e?(0,s.cloneElement)(e,{className:"margin-top--md"}):null}return(0,v.jsx)("div",{className:"margin-top--md",children:r.map(((e,i)=>(0,s.cloneElement)(e,{key:i,hidden:e.props.value!==n})))})}function b(e){const i=j(e);return(0,v.jsxs)("div",{className:(0,n.A)("tabs-container",m.tabList),children:[(0,v.jsx)(g,{...i,...e}),(0,v.jsx)(y,{...i,...e})]})}function w(e){const i=(0,f.A)();return(0,v.jsx)(b,{...e,children:h(e.children)},String(i))}},97577:(e,i,t)=>{t.d(i,{A:()=>o});var s=t(21432),n=t(44586),r=t(74848);function o(e){const{siteConfig:{customFields:i}}=(0,n.A)();var t=e.query.replace("__OVERTURE_RELEASE",i.overtureRelease);t=(t=t.replace("__ATHENA_OVERTURE_RELEASE","v"+i.overtureRelease.replaceAll(".","_").replaceAll("-","_"))).replace("__PMTILES_OVERTURE_RELEASE",i.overtureRelease.split(".",1));var o=e.language||"sql";return(0,r.jsx)(s.default,{language:o,title:e.title,children:t})}},54870:(e,i,t)=>{t.d(i,{A:()=>s});const s=t.p+"assets/images/divisions-admin0-admin1-coverage-ff1a8d4c6d68c88047b34d1f9c9109be.png"},37576:(e,i,t)=>{t.d(i,{A:()=>s});const s=t.p+"assets/images/divisions-us-a2446b490dd8e4932c0e515fbb238799.gif"}}]);