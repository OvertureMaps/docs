"use strict";(self.webpackChunkoverture_schema=self.webpackChunkoverture_schema||[]).push([[96],{7224:(e,a,t)=>{t.r(a),t.d(a,{assets:()=>D,contentTitle:()=>_,default:()=>O,frontMatter:()=>y,metadata:()=>R,toc:()=>E});var n=t(7462),l=t(7294),i=t(3905),o=(t(2403),t(6010)),r=t(2466),s=t(6550),u=t(1980),m=t(7392),p=t(12);function c(e){return function(e){return l.Children.map(e,(e=>{if(!e||(0,l.isValidElement)(e)&&function(e){const{props:a}=e;return!!a&&"object"==typeof a&&"value"in a}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}(e).map((e=>{let{props:{value:a,label:t,attributes:n,default:l}}=e;return{value:a,label:t,attributes:n,default:l}}))}function d(e){const{values:a,children:t}=e;return(0,l.useMemo)((()=>{const e=a??c(t);return function(e){const a=(0,m.l)(e,((e,a)=>e.value===a.value));if(a.length>0)throw new Error(`Docusaurus error: Duplicate values "${a.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[a,t])}function g(e){let{value:a,tabValues:t}=e;return t.some((e=>e.value===a))}function k(e){let{queryString:a=!1,groupId:t}=e;const n=(0,s.k6)(),i=function(e){let{queryString:a=!1,groupId:t}=e;if("string"==typeof a)return a;if(!1===a)return null;if(!0===a&&!t)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return t??null}({queryString:a,groupId:t});return[(0,u._X)(i),(0,l.useCallback)((e=>{if(!i)return;const a=new URLSearchParams(n.location.search);a.set(i,e),n.replace({...n.location,search:a.toString()})}),[i,n])]}function N(e){const{defaultValue:a,queryString:t=!1,groupId:n}=e,i=d(e),[o,r]=(0,l.useState)((()=>function(e){let{defaultValue:a,tabValues:t}=e;if(0===t.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(a){if(!g({value:a,tabValues:t}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${a}" but none of its children has the corresponding value. Available values are: ${t.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return a}const n=t.find((e=>e.default))??t[0];if(!n)throw new Error("Unexpected error: 0 tabValues");return n.value}({defaultValue:a,tabValues:i}))),[s,u]=k({queryString:t,groupId:n}),[m,c]=function(e){let{groupId:a}=e;const t=function(e){return e?`docusaurus.tab.${e}`:null}(a),[n,i]=(0,p.Nk)(t);return[n,(0,l.useCallback)((e=>{t&&i.set(e)}),[t,i])]}({groupId:n}),N=(()=>{const e=s??m;return g({value:e,tabValues:i})?e:null})();(0,l.useLayoutEffect)((()=>{N&&r(N)}),[N]);return{selectedValue:o,selectValue:(0,l.useCallback)((e=>{if(!g({value:e,tabValues:i}))throw new Error(`Can't select invalid tab value=${e}`);r(e),u(e),c(e)}),[u,c,i]),tabValues:i}}var b=t(2389);const h={tabList:"tabList_fbd4",tabItem:"tabItem_v5XY"};function f(e){let{className:a,block:t,selectedValue:i,selectValue:s,tabValues:u}=e;const m=[],{blockElementScrollPositionUntilNextRender:p}=(0,r.o5)(),c=e=>{const a=e.currentTarget,t=m.indexOf(a),n=u[t].value;n!==i&&(p(a),s(n))},d=e=>{let a=null;switch(e.key){case"Enter":c(e);break;case"ArrowRight":{const t=m.indexOf(e.currentTarget)+1;a=m[t]??m[0];break}case"ArrowLeft":{const t=m.indexOf(e.currentTarget)-1;a=m[t]??m[m.length-1];break}}a?.focus()};return l.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.Z)("tabs",{"tabs--block":t},a)},u.map((e=>{let{value:a,label:t,attributes:r}=e;return l.createElement("li",(0,n.Z)({role:"tab",tabIndex:i===a?0:-1,"aria-selected":i===a,key:a,ref:e=>m.push(e),onKeyDown:d,onClick:c},r,{className:(0,o.Z)("tabs__item",h.tabItem,r?.className,{"tabs__item--active":i===a})}),t??a)})))}function A(e){let{lazy:a,children:t,selectedValue:n}=e;const i=(Array.isArray(t)?t:[t]).filter(Boolean);if(a){const e=i.find((e=>e.props.value===n));return e?(0,l.cloneElement)(e,{className:"margin-top--md"}):null}return l.createElement("div",{className:"margin-top--md"},i.map(((e,a)=>(0,l.cloneElement)(e,{key:a,hidden:e.props.value!==n}))))}function C(e){const a=N(e);return l.createElement("div",{className:(0,o.Z)("tabs-container",h.tabList)},l.createElement(f,(0,n.Z)({},e,a)),l.createElement(A,(0,n.Z)({},e,a)))}function v(e){const a=(0,b.Z)();return l.createElement(C,(0,n.Z)({key:String(a)},e))}const S={tabItem:"tabItem__kUE"};function T(e){let{children:a,hidden:t,className:n}=e;return l.createElement("div",{role:"tabpanel",className:(0,o.Z)(S.tabItem,n),hidden:t},a)}const y={title:"Build a Basemap"},_="Building a Basemap from Overture Data",R={unversionedId:"getting_started/build-a-map",id:"getting_started/build-a-map",title:"Build a Basemap",description:"Part 1: Downloading the Data",source:"@site/docs/getting_started/build-a-map.mdx",sourceDirName:"getting_started",slug:"/getting_started/build-a-map",permalink:"/how-to/getting_started/build-a-map",draft:!1,tags:[],version:"current",frontMatter:{title:"Build a Basemap"},sidebar:"docs",previous:{title:"Accessing the Data",permalink:"/how-to/getting_started/access"},next:{title:"Amazon Athena",permalink:"/how-to/downloading/athena"}},D={},E=[{value:"Part 1: Downloading the Data",id:"part-1-downloading-the-data",level:3},{value:"Part 2: Make a map with maplibre",id:"part-2-make-a-map-with-maplibre",level:3}],w={toc:E},x="wrapper";function O(e){let{components:a,...t}=e;return(0,i.kt)(x,(0,n.Z)({},w,t,{components:a,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"building-a-basemap-from-overture-data"},"Building a Basemap from Overture Data"),(0,i.kt)("h3",{id:"part-1-downloading-the-data"},"Part 1: Downloading the Data"),(0,i.kt)("p",null,"For each theme, we can use Amazon Athena to efficiently extract a CSV of just the data in our bounding box. We can then use DuckDB and Tippecanoe to turn this CSV into a PMTiles archive."),(0,i.kt)(v,{mdxType:"Tabs"},(0,i.kt)(T,{value:"buildings",label:"Buildings",default:!0,mdxType:"TabItem"},(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Query the buildings theme using Amazon Athena and download the results as a CSV file, ",(0,i.kt)("inlineCode",{parentName:"p"},"buildings.csv"),":"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT class,\n    TRY(FILTER(names.common, x -> x.language = 'local')[1].value) as local_name,\n    height,\n    level,\n    CAST(sources AS JSON) as sources,\n    ST_ASTEXT(ST_GeomFromBinary(geometry)) as geometry_wkt\nFROM overture_2023_10_19_alpha_0\nWHERE theme = 'buildings' AND type = 'building'\n    AND bbox.minX > -122.679404 AND bbox.maxX < -121.978275\n    AND bbox.minY > 47.360619 AND bbox.maxY < 47.786336\n")))),(0,i.kt)("ol",{start:2},(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Use DuckDB to convert ",(0,i.kt)("inlineCode",{parentName:"p"},"buildings.csv")," into a GeoJSONSeq file."),(0,i.kt)("details",null,(0,i.kt)("summary",null,"DuckDB Query ( ",(0,i.kt)("code",null,"SQL")," )"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-sql"},"COPY (\n    SELECT\n        \"class\",\n        \"local_name\",\n        \"height\",\n        \"level\",\n        \"sources\",\n        ST_GeomFromText(geometry_wkt) as geometry\n    FROM read_csv('csv/buildings.csv', header=True,\n        COLUMNS={\n            'class':'VARCHAR',\n            'local_name':'VARCHAR',\n            'height':'DOUBLE',\n            'level':'VARCHAR',\n            'sources':'VARCHAR',\n            'geometry_wkt':'VARCHAR'\n        }\n    )\n    ) TO 'geojson/buildings.geojsonseq'\nWITH (FORMAT GDAL, DRIVER 'GeoJSONSeq');\n")))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Run ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/felt/tippecanoe"},"tippecanoe")," to produce a ",(0,i.kt)("inlineCode",{parentName:"p"},"pmtiles")," archive from ",(0,i.kt)("inlineCode",{parentName:"p"},"buildings.geojsonseq")),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"tippecanoe -o tiles/buildings.pmtiles -Z13 -z13 -l buildings -P geojson/buildings.geojsonseq\n")),(0,i.kt)("details",null,(0,i.kt)("summary",null,"Tippecanoe flag explanation"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"-o tiles/buildings.pmtiles")," is our output file."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"-Z13")," and ",(0,i.kt)("inlineCode",{parentName:"li"},"-z13")," will produce a tileset starting at zoom 13 and going up to zoom 13 (so only 1 zoom level)."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"-l buildings"),' names the layer "buildings"'),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"-P")," allows tippecanoe to read the file in parallel. Since we created a GeoJSON sequence file instead of a single GeoJSON Feature Collection, tippecanoe can process the input data more efficiently.")))))),(0,i.kt)(T,{value:"roads",label:"Roads",default:!0,mdxType:"TabItem"},(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Query the transportation theme using Amazon Athena and download the results as a CSV file, ",(0,i.kt)("inlineCode",{parentName:"p"},"roads.csv"),":"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT\n    level,\n    JSON_EXTRACT_SCALAR(road, '$.class') AS road_class,\n    JSON_EXTRACT_SCALAR(road, '$.roadNames.common[0].value') AS road_name,\n    sources[1].dataset AS source,\n    ST_ASTEXT(ST_GeomFromBinary(geometry)) as geometry_wkt\nFROM overture_2023_10_19_alpha_0\nWHERE theme = 'transportation' AND type = 'segment'\n    AND bbox.minX > -122.679404 AND bbox.maxX < -121.978275\n    AND bbox.minY > 47.360619 AND bbox.maxY < 47.786336\n"))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Use DuckDB to convert ",(0,i.kt)("inlineCode",{parentName:"p"},"roads.csv")," into a GeoJSONSeq file."),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-sql"},"COPY (\n    SELECT\n        road_class as class,\n        road_name as name,\n        level,\n        ST_GeomFromText(geometry_wkt) as geometry\n    FROM 'csv/roads.csv'\n    ) TO 'geojson/roads.geojsonseq'\nWITH (FORMAT GDAL, DRIVER 'GeoJSONSeq');\n"))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Run ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/felt/tippecanoe"},"tippecanoe")," to produce a ",(0,i.kt)("inlineCode",{parentName:"p"},"pmtiles")," archive from ",(0,i.kt)("inlineCode",{parentName:"p"},"roads.geojsonseq")),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"tippecanoe -o tiles/roads.pmtiles -Z10 -B10 -z13 -l roads -P geojson/roads.geojsonseq\n")),(0,i.kt)("details",null,(0,i.kt)("summary",null,"Tippecanoe flag explanation"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"-o tiles/roads.pmtiles")," is our output file."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"-Z10")," and ",(0,i.kt)("inlineCode",{parentName:"li"},"-z13")," will produce a tileset starting at zoom 10 and going up to zoom 13."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"-B10")," will ensure that all featuers are present from zoom level 10."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"-l roads"),' names the layer "roads"'),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"-P")," allows tippecanoe to read the file in parallel. Since we created a GeoJSON sequence file instead of a single GeoJSON Feature Collection, tippecanoe can process the input data more efficiently.")))))),(0,i.kt)(T,{value:"places",label:"Places",default:!0,mdxType:"TabItem"},(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Query the buildings theme using Amazon Athena and download the results as a CSV file, ",(0,i.kt)("inlineCode",{parentName:"p"},"buildings.csv"),":"),(0,i.kt)("details",null,(0,i.kt)("summary",null,"Athena Query ( ",(0,i.kt)("code",null,"SQL")," )"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT class,\n    TRY(FILTER(names.common, x -> x.language = 'local')[1].value) as local_name,\n    height,\n    level,\n    CAST(sources AS JSON) as sources,\n    ST_ASTEXT(ST_GeomFromBinary(geometry)) as geometry_wkt\nFROM overture_2023_10_19_alpha_0\nWHERE theme = 'buildings'\n    AND type = 'building'\n    AND bbox.minX > -122.679404\n    AND bbox.maxX < -121.978275\n    AND bbox.minY > 47.360619\n    AND bbox.maxY < 47.786336\n")))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Use DuckDB to convert ",(0,i.kt)("inlineCode",{parentName:"p"},"buildings.csv")," into a GeoJSONSeq file."),(0,i.kt)("details",null,(0,i.kt)("summary",null,"DuckDB Query ( ",(0,i.kt)("code",null,"SQL")," )"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-sql"},"COPY (\n    SELECT\n        \"class\",\n        \"local_name\",\n        \"height\",\n        \"level\",\n        \"sources\",\n        ST_GeomFromText(geometry_wkt) as geometry\n    FROM read_csv('csv/buildings.csv', header=True,\n        COLUMNS={\n            'class':'VARCHAR',\n            'local_name':'VARCHAR',\n            'height':'DOUBLE',\n            'level':'VARCHAR',\n            'sources':'VARCHAR',\n            'geometry_wkt':'VARCHAR'\n        }\n    )\n    ) TO 'geojson/buildings.geojsonseq'\nWITH (FORMAT GDAL, DRIVER 'GeoJSONSeq');\n")))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Run ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/felt/tippecanoe"},"tippecanoe")," to produce a ",(0,i.kt)("inlineCode",{parentName:"p"},"pmtiles")," archive from ",(0,i.kt)("inlineCode",{parentName:"p"},"buildings.geojsonseq")),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"tippecanoe -o tiles/buildings.pmtiles -Z13 -z13 -l buildings -P geojson/buildings.geojsonseq\n")),(0,i.kt)("details",null,(0,i.kt)("summary",null,"Tippecanoe flag explanation"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"-o tiles/buildings.pmtiles")," is our output file."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"-Z13")," and ",(0,i.kt)("inlineCode",{parentName:"li"},"-z13")," will produce a tileset starting at zoom 13 and going up to zoom 13 (so only 1 zoom level)."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"-l buildings"),' names the layer "buildings"'),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"-P")," allows tippecanoe to read the file in parallel. Since we created a GeoJSON sequence file instead of a single GeoJSON Feature Collection, tippecanoe can process the input data more efficiently.")))))),(0,i.kt)(T,{value:"water",label:"Water",default:!0,mdxType:"TabItem"},(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Query the buildings theme using Amazon Athena and download the results as a CSV file, ",(0,i.kt)("inlineCode",{parentName:"p"},"buildings.csv"),":"),(0,i.kt)("details",null,(0,i.kt)("summary",null,"Athena Query ( ",(0,i.kt)("code",null,"SQL")," )"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT class,\n    TRY(FILTER(names.common, x -> x.language = 'local')[1].value) as local_name,\n    height,\n    level,\n    CAST(sources AS JSON) as sources,\n    ST_ASTEXT(ST_GeomFromBinary(geometry)) as geometry_wkt\nFROM overture_2023_10_19_alpha_0\nWHERE theme = 'buildings'\n    AND type = 'building'\n    AND bbox.minX > -122.679404\n    AND bbox.maxX < -121.978275\n    AND bbox.minY > 47.360619\n    AND bbox.maxY < 47.786336\n")))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Use DuckDB to convert ",(0,i.kt)("inlineCode",{parentName:"p"},"buildings.csv")," into a GeoJSONSeq file."),(0,i.kt)("details",null,(0,i.kt)("summary",null,"DuckDB Query ( ",(0,i.kt)("code",null,"SQL")," )"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-sql"},"COPY (\n    SELECT\n        \"class\",\n        \"local_name\",\n        \"height\",\n        \"level\",\n        \"sources\",\n        ST_GeomFromText(geometry_wkt) as geometry\n    FROM read_csv('csv/buildings.csv', header=True,\n        COLUMNS={\n            'class':'VARCHAR',\n            'local_name':'VARCHAR',\n            'height':'DOUBLE',\n            'level':'VARCHAR',\n            'sources':'VARCHAR',\n            'geometry_wkt':'VARCHAR'\n        }\n    )\n    ) TO 'geojson/buildings.geojsonseq'\nWITH (FORMAT GDAL, DRIVER 'GeoJSONSeq');\n")))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Run ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/felt/tippecanoe"},"tippecanoe")," to produce a ",(0,i.kt)("inlineCode",{parentName:"p"},"pmtiles")," archive from ",(0,i.kt)("inlineCode",{parentName:"p"},"buildings.geojsonseq")),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"tippecanoe -o tiles/buildings.pmtiles -Z13 -z13 -l buildings -P geojson/buildings.geojsonseq\n")),(0,i.kt)("details",null,(0,i.kt)("summary",null,"Tippecanoe flag explanation"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"-o tiles/buildings.pmtiles")," is our output file."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"-Z13")," and ",(0,i.kt)("inlineCode",{parentName:"li"},"-z13")," will produce a tileset starting at zoom 13 and going up to zoom 13 (so only 1 zoom level)."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"-l buildings"),' names the layer "buildings"'),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"-P")," allows tippecanoe to read the file in parallel. Since we created a GeoJSON sequence file instead of a single GeoJSON Feature Collection, tippecanoe can process the input data more efficiently.")))))),(0,i.kt)(T,{value:"land",label:"Land",default:!0,mdxType:"TabItem"},(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Query the buildings theme using Amazon Athena and download the results as a CSV file, ",(0,i.kt)("inlineCode",{parentName:"p"},"buildings.csv"),":"),(0,i.kt)("details",null,(0,i.kt)("summary",null,"Athena Query ( ",(0,i.kt)("code",null,"SQL")," )"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT class,\n    TRY(FILTER(names.common, x -> x.language = 'local')[1].value) as local_name,\n    height,\n    level,\n    CAST(sources AS JSON) as sources,\n    ST_ASTEXT(ST_GeomFromBinary(geometry)) as geometry_wkt\nFROM overture_2023_10_19_alpha_0\nWHERE theme = 'buildings'\n    AND type = 'building'\n    AND bbox.minX > -122.679404\n    AND bbox.maxX < -121.978275\n    AND bbox.minY > 47.360619\n    AND bbox.maxY < 47.786336\n")))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Use DuckDB to convert ",(0,i.kt)("inlineCode",{parentName:"p"},"buildings.csv")," into a GeoJSONSeq file."),(0,i.kt)("details",null,(0,i.kt)("summary",null,"DuckDB Query ( ",(0,i.kt)("code",null,"SQL")," )"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-sql"},"COPY (\n    SELECT\n        \"class\",\n        \"local_name\",\n        \"height\",\n        \"level\",\n        \"sources\",\n        ST_GeomFromText(geometry_wkt) as geometry\n    FROM read_csv('csv/buildings.csv', header=True,\n        COLUMNS={\n            'class':'VARCHAR',\n            'local_name':'VARCHAR',\n            'height':'DOUBLE',\n            'level':'VARCHAR',\n            'sources':'VARCHAR',\n            'geometry_wkt':'VARCHAR'\n        }\n    )\n    ) TO 'geojson/buildings.geojsonseq'\nWITH (FORMAT GDAL, DRIVER 'GeoJSONSeq');\n")))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Run ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/felt/tippecanoe"},"tippecanoe")," to produce a ",(0,i.kt)("inlineCode",{parentName:"p"},"pmtiles")," archive from ",(0,i.kt)("inlineCode",{parentName:"p"},"buildings.geojsonseq")),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"tippecanoe -o tiles/buildings.pmtiles -Z13 -z13 -l buildings -P geojson/buildings.geojsonseq\n")),(0,i.kt)("details",null,(0,i.kt)("summary",null,"Tippecanoe flag explanation"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"-o tiles/buildings.pmtiles")," is our output file."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"-Z13")," and ",(0,i.kt)("inlineCode",{parentName:"li"},"-z13")," will produce a tileset starting at zoom 13 and going up to zoom 13 (so only 1 zoom level)."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"-l buildings"),' names the layer "buildings"'),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"-P")," allows tippecanoe to read the file in parallel. Since we created a GeoJSON sequence file instead of a single GeoJSON Feature Collection, tippecanoe can process the input data more efficiently.")))))),(0,i.kt)(T,{value:"landuse",label:"Land Use",default:!0,mdxType:"TabItem"},(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Query the buildings theme using Amazon Athena and download the results as a CSV file, ",(0,i.kt)("inlineCode",{parentName:"p"},"buildings.csv"),":"),(0,i.kt)("details",null,(0,i.kt)("summary",null,"Athena Query ( ",(0,i.kt)("code",null,"SQL")," )"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT class,\n    TRY(FILTER(names.common, x -> x.language = 'local')[1].value) as local_name,\n    height,\n    level,\n    CAST(sources AS JSON) as sources,\n    ST_ASTEXT(ST_GeomFromBinary(geometry)) as geometry_wkt\nFROM overture_2023_10_19_alpha_0\nWHERE theme = 'buildings'\n    AND type = 'building'\n    AND bbox.minX > -122.679404\n    AND bbox.maxX < -121.978275\n    AND bbox.minY > 47.360619\n    AND bbox.maxY < 47.786336\n")))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Use DuckDB to convert ",(0,i.kt)("inlineCode",{parentName:"p"},"buildings.csv")," into a GeoJSONSeq file."),(0,i.kt)("details",null,(0,i.kt)("summary",null,"DuckDB Query ( ",(0,i.kt)("code",null,"SQL")," )"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-sql"},"COPY (\n    SELECT\n        \"class\",\n        \"local_name\",\n        \"height\",\n        \"level\",\n        \"sources\",\n        ST_GeomFromText(geometry_wkt) as geometry\n    FROM read_csv('csv/buildings.csv', header=True,\n        COLUMNS={\n            'class':'VARCHAR',\n            'local_name':'VARCHAR',\n            'height':'DOUBLE',\n            'level':'VARCHAR',\n            'sources':'VARCHAR',\n            'geometry_wkt':'VARCHAR'\n        }\n    )\n    ) TO 'geojson/buildings.geojsonseq'\nWITH (FORMAT GDAL, DRIVER 'GeoJSONSeq');\n")))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Run ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/felt/tippecanoe"},"tippecanoe")," to produce a ",(0,i.kt)("inlineCode",{parentName:"p"},"pmtiles")," archive from ",(0,i.kt)("inlineCode",{parentName:"p"},"buildings.geojsonseq")),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"tippecanoe -o tiles/buildings.pmtiles -Z13 -z13 -l buildings -P geojson/buildings.geojsonseq\n")),(0,i.kt)("details",null,(0,i.kt)("summary",null,"Tippecanoe flag explanation"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"-o tiles/buildings.pmtiles")," is our output file."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"-Z13")," and ",(0,i.kt)("inlineCode",{parentName:"li"},"-z13")," will produce a tileset starting at zoom 13 and going up to zoom 13 (so only 1 zoom level)."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"-l buildings"),' names the layer "buildings"'),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"-P")," allows tippecanoe to read the file in parallel. Since we created a GeoJSON sequence file instead of a single GeoJSON Feature Collection, tippecanoe can process the input data more efficiently."))))))),(0,i.kt)("h3",{id:"part-2-make-a-map-with-maplibre"},"Part 2: Make a map with maplibre"))}O.isMDXComponent=!0}}]);