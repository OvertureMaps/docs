(self.webpackChunkoverture_documentation=self.webpackChunkoverture_documentation||[]).push([[1092],{91512:(e,n,t)=>{var r={"./admins/administrative_boundary.yaml":43660,"./admins/defs.yaml":3565,"./admins/locality.yaml":6652,"./admins/locality_area.yaml":38122,"./base/defs.yaml":93306,"./base/infrastructure.yaml":29233,"./base/land.yaml":41971,"./base/land_cover.yaml":92411,"./base/land_use.yaml":63655,"./base/water.yaml":61319,"./buildings/building.yaml":50100,"./buildings/building_part.yaml":42086,"./buildings/defs.yaml":91912,"./defs.yaml":43074,"./divisions/boundary.yaml":90161,"./divisions/defs.yaml":8851,"./divisions/division.yaml":89804,"./divisions/division_area.yaml":12058,"./places/place.yaml":41862,"./schema.yaml":69673,"./transportation/connector.yaml":62744,"./transportation/segment.yaml":37930};function i(e){var n=o(e);return t(n)}function o(e){if(!t.o(r,e)){var n=new Error("Cannot find module '"+e+"'");throw n.code="MODULE_NOT_FOUND",n}return r[e]}i.keys=function(){return Object.keys(r)},i.resolve=o,e.exports=i,i.id=91512},90577:(e,n,t)=>{var r={"./_schema/admins/administrative_boundary.yaml":43660,"./_schema/admins/defs.yaml":3565,"./_schema/admins/locality.yaml":6652,"./_schema/admins/locality_area.yaml":38122,"./_schema/base/defs.yaml":93306,"./_schema/base/infrastructure.yaml":29233,"./_schema/base/land.yaml":41971,"./_schema/base/land_cover.yaml":92411,"./_schema/base/land_use.yaml":63655,"./_schema/base/water.yaml":61319,"./_schema/buildings/building.yaml":50100,"./_schema/buildings/building_part.yaml":42086,"./_schema/buildings/defs.yaml":91912,"./_schema/defs.yaml":43074,"./_schema/divisions/boundary.yaml":90161,"./_schema/divisions/defs.yaml":8851,"./_schema/divisions/division.yaml":89804,"./_schema/divisions/division_area.yaml":12058,"./_schema/places/place.yaml":41862,"./_schema/schema.yaml":69673,"./_schema/transportation/connector.yaml":62744,"./_schema/transportation/segment.yaml":37930};function i(e){var n=o(e);return t(n)}function o(e){if(!t.o(r,e)){var n=new Error("Cannot find module '"+e+"'");throw n.code="MODULE_NOT_FOUND",n}return r[e]}i.keys=function(){return Object.keys(r)},i.resolve=o,e.exports=i,i.id=90577},38432:(e,n,t)=>{"use strict";t.r(n),t.d(n,{assets:()=>g,contentTitle:()=>m,default:()=>$,frontMatter:()=>h,metadata:()=>y,toc:()=>v});var r=t(74848),i=t(28453),o=t(21432),s=t(87595),a=t.n(s),p=t(99940),l=t(78285),d=t(41971);const c='---\nid: "overture:land:example:1"\ntype: Feature\ngeometry:\n  type: Polygon\n  coordinates: [[[34.4379197, 28.7592689], [34.4380109, 28.7595816], [34.4380173, 28.7601587], [34.4380538, 28.7606186],[34.4381540, 28.7609863], [34.4380735, 28.7612459], [34.4377346, 28.7608396], [34.4377158, 28.7606139],[34.4377105, 28.7605527], [34.4376300, 28.7604258], [34.4376407, 28.7603599], [34.4376488, 28.7602494],[34.4376863, 28.7599673], [34.4376675, 28.7597980], [34.4376890, 28.7596216], [34.4379197, 28.7592689]]]\nproperties:\n  theme: base\n  type: land\n  subtype: sand\n  class: dune\n  names:\n    primary: Hadeida\n  source_tags:\n    natural: dune\n    surface: sand\n  sources:\n    - record_id: w407753930@3\n      property: ""\n      dataset: OpenStreetMap\n  version: 0\n  update_time: "2023-09-27T00:00:00Z"\n';var f=t(11470),u=t(19365);const h={title:"land"},m="Land",y={id:"schema/reference/base/land",title:"land",description:"Features in the land theme come from OpenStreetMap features with the natural tag.",source:"@site/docs/schema/reference/base/land.mdx",sourceDirName:"schema/reference/base",slug:"/schema/reference/base/land",permalink:"/schema/reference/base/land",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{title:"land"},sidebar:"schema",previous:{title:"infrastructure",permalink:"/schema/reference/base/infrastructure"},next:{title:"land_cover",permalink:"/schema/reference/base/land_cover"}},g={},v=[{value:"Schema",id:"schema",level:2},{value:"Examples",id:"examples",level:2}];function b(e){const n={code:"code",h1:"h1",h2:"h2",p:"p",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h1,{id:"land",children:"Land"}),"\n",(0,r.jsxs)(n.p,{children:["Features in the land theme come from OpenStreetMap features with the ",(0,r.jsx)(n.code,{children:"natural"})," tag."]}),"\n",(0,r.jsx)("table",{children:(0,r.jsxs)("tbody",{children:[(0,r.jsxs)("tr",{children:[(0,r.jsx)("th",{children:"Geometry Type"}),(0,r.jsx)("td",{children:(0,r.jsxs)(n.p,{children:[(0,r.jsx)("code",{children:"Point"}),", ",(0,r.jsx)("code",{children:"LineString"}),", ",(0,r.jsx)("code",{children:"Polygon"}),", or ",(0,r.jsx)("code",{children:"MultiPolygon"})]})})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("th",{children:"Theme"}),(0,r.jsx)("td",{children:(0,r.jsx)("code",{children:"base"})})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("th",{children:"Type"}),(0,r.jsx)("td",{children:(0,r.jsx)("code",{children:"land"})})]})]})}),"\n",(0,r.jsx)(n.h2,{id:"schema",children:"Schema"}),"\n",(0,r.jsxs)(f.default,{children:[(0,r.jsx)(u.default,{value:"browsable",label:"Browsable",default:!0,children:(0,r.jsx)(a(),{schema:(0,l.A)(d.default),resolverOptions:(0,p.A)({remote:!0,yamlBasePath:"/base"})})}),(0,r.jsx)(u.default,{value:"yaml",label:"YAML",default:!0,children:(0,r.jsx)(o.default,{language:"jsx",children:d.default})})]}),"\n",(0,r.jsx)(n.h2,{id:"examples",children:"Examples"}),"\n",(0,r.jsx)(f.default,{children:(0,r.jsx)(u.default,{value:"1",label:"Sand Dune (Polygon)",default:!0,children:(0,r.jsx)(o.default,{language:"json",children:JSON.stringify((0,l.A)(c),null,2)})})})]})}function $(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(b,{...e})}):b(e)}},99940:(e,n,t)=>{"use strict";function r(e){return void 0===e&&(e="http"),{resolve:e=>new Promise(((n,t)=>{fetch(e.toString(),{headers:{Accept:"application/json"}}).then((e=>e.json())).then((e=>n(e))).catch((e=>t(e)))}))}}t.d(n,{A:()=>p});var i=t(20382);const o=t(91512);var s={};function a(e){return void 0===e&&(e=""),{resolve:n=>new Promise(((t,r)=>{Promise.resolve().then((function(){var t=function(e,n){void 0===n&&(n="");const t=e.toString().split("/");let r=n;for(let i=0;i<t.length;i++)if(".."===t[i])r=r.split("/").slice(0,-1).join("/");else{if("."===t[i])continue;r=`${r}/${t[i]}`}return r}(n,e);return s.hasOwnProperty(t)?s[t]:{}})).then((function(e){return t(e)})).catch((function(e){return r(e)}))}))}}function p(e){const{basePath:n,jsonPointer:t,remote:i,yamlBasePath:o}=e;let s={};return(o||""==o)&&(s.resolvers={file:a(o)}),i&&(void 0===s.resolvers&&(s.resolvers={}),s.resolvers.http=r("http"),s.resolvers.https=r("https")),t&&(s.jsonPointer=t),s}o.keys().forEach((function(e){s[e.replace("./","/")]=i.Ay.load(t(90577)("./_schema"+e.replace("./","/")).default)}))},78285:(e,n,t)=>{yaml=t(57210),n.A=function(e){return yaml.load(e)}},43660:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>r});const r='---\r\n"$schema": https://json-schema.org/draft/2020-12/schema\r\ntitle: administrative_boundary\r\ndescription: >-\r\n  An Administrative Boundary is a border surrounding an Administrative\r\n  Locality. Boundaries are compatible with GeoJSON LineString features.\r\ntype: object\r\nproperties:\r\n  id:\r\n    "$ref": ../defs.yaml#/$defs/propertyDefinitions/id\r\n  geometry:\r\n    unevaluatedProperties: false\r\n    oneOf:\r\n      - "$ref": https://geojson.org/schema/LineString.json\r\n  properties:\r\n    unevaluatedProperties: false\r\n    required: [admin_level]\r\n    allOf:\r\n      - "$ref": ../defs.yaml#/$defs/propertyContainers/overtureFeaturePropertiesContainer\r\n    properties:\r\n      admin_level: { "$ref": "./defs.yaml#/$defs/propertyDefinitions/adminLevel" }\r\n      is_maritime: { "$ref": "./defs.yaml#/$defs/propertyDefinitions/isMaritime" }\r\n      geopol_display:\r\n        description: Optional value that indicates if the boundary needs special rendering logic\r\n        type: string\r\n        enum: [disputed, hidden, visible]\r\n        "$comment": >-\r\n          disputed     = Indicates that an Administrative Boundary is subject of a dispute between two or more countries\r\n          hidden       = Indicates that the Administrative Boundary must not be display though coinciding with an Administrative Area\r\n          visible      = Indicates that the Administrative Boundary is to be displayed (i.e. used to override a maritime=yes flag)\r\n'},3565:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>r});const r='---\r\n"$schema": https://json-schema.org/draft/2020-12/schema\r\ntitle: Administrative entity property definitions\r\ndescription: Common schema definitions for admins theme\r\n"$defs":\r\n  propertyDefinitions:\r\n    localityType:\r\n      description: Describes the entity\'s type in the categorical nomenclature used locally.\r\n      type: string\r\n      enum: [country, county, state, region, province, district, city, town, village, hamlet, borough, suburb, neighborhood, municipality]\r\n      "$comment": >-\r\n        country      = Distinct geographical and political region or territory that is governed by a sovereign power or government. It is usually defined by its borders, which are recognized by other countries and international organizations\r\n                       Examples: United States\r\n                                 Japan\r\n                                 Brazil\r\n        county       = Political and administrative division of a state, providing certain local governmental services\r\n                       Examples: Suffolk County, Massachusetts, United States\r\n                                 Essex County, Ontario, Canada\r\n                                 Oxfordshire, England, United Kingdom\r\n        state        = Nation or territory considered as an organized political community under one government\r\n                       Examples: California, United States\r\n                                 Bavaria, Germany\r\n                                 New South Wales, Australia\r\n        region       = Area or division, especially part of a country or the world having definable characteristics but not always fixed boundaries\r\n                       Examples: Tuscany, Italy\r\n                                 Provence-Alpes-C\xf4te d\'Azur, France\r\n                                 Andalusia, Spain\r\n        province     = Principal administrative division of certain countries\r\n                       Examples: Ontario, Canada\r\n                                 Yunnan, China\r\n                                 Buenos Aires, Argentina\r\n        district     = Area of a country or city, especially one regarded as a distinct unit because of a particular characteristic\r\n                       Examples: Central District, Hong Kong\r\n                                 Kreuzberg, Berlin, German\r\n                                 Le Marais, Paris, France\r\n        city         = Large town\r\n                       Examples: New York City, United States\r\n                                 London, United Kingdom\r\n                                 Paris, France\r\n        town         = Urban area that has a name, defined boundaries, and local government, and that is generally larger than a village and smaller than a city\r\n                       Examples: Stratford-upon-Avon, England, United Kingdom\r\n                                 Salem, Massachusetts, United States\r\n                                 Szentendre, Hungary\r\n        village      = Group of houses and associated buildings, larger than a hamlet and smaller than a town, situated in a rural area\r\n                       Examples: Bibury, England, United Kingdom\r\n                                 Giethoorn, Netherlands\r\n                                 Shirakawa-go, Japan\r\n        hamlet       = Small settlement, generally one smaller than a village\r\n                       Examples: Beulle, Maule, Yvelines, France\r\n                                 Levittown, New York, United States\r\n                                 Jhakar Bigha, Rohtas, Bihar, India\r\n        borough      = Town or district which is an administrative unit\r\n                       Examples: Brooklyn, New York City, United States\r\n                                 Southwark, London, United Kingdom\r\n                                 S\xf6dermalm, Stockholm, Sweden\r\n        suburb       = Outlying district of a city, especially a residential one\r\n                       Examples: Paddington, Sydney, Australia\r\n                                 Mount Eden, Auckland, New Zealand\r\n                                 Clontarf, Dublin, Ireland\r\n        neighborhood = District, especially one forming a community within a town or city\r\n                       Examples: Montmartre, Paris, France\r\n                                 Trastevere, Rome, Italy\r\n                                 La Boca, Buenos Aires, Argentina\r\n        municipality = City or town that has corporate status and local government\r\n                       Examples: Arame, Maranh\xe3o, Brazil\r\n                                 Vra\u010dar, Belgrade, Serbia\r\n                                 Arecibo, Puerto Rico\r\n    adminLevel:\r\n      description: Hierarchical level for administrative entity or border. E.g. in United States, Country locality representing United States has adminLevel=1, States have adminLevel=2, Counties have adminLevel=3.\r\n      type: integer\r\n      minimum: 0\r\n      maximum: 6\r\n    isoCountryCodeAlpha2:\r\n      description: ISO 3166-1 alpha-2 country code.\r\n      allOf:\r\n        - "$ref":  "../defs.yaml#/$defs/propertyDefinitions/iso3166_1Alpha2CountryCode"\r\n    isoSubCountryCode:\r\n      description: ISO-3166-2 Country subdivision code.\r\n      allOf:\r\n        - "$ref":  "../defs.yaml#/$defs/propertyDefinitions/iso3166_2SubdivisionCode"\r\n    defaultLanguage:\r\n      description: Most common language used within the area.\r\n      "$ref": "../defs.yaml#/$defs/propertyDefinitions/language"\r\n    drivingSide:\r\n      description: Left-hand traffic (LHT) or right-hand traffic (RHT).\r\n      type: string\r\n      enum: [left, right]\r\n    isMaritime:\r\n      description: Flag that specifies if feature is maritime (i.e., a boundary at a particular distance from a jurisdiction\'s coastline)\r\n      type: boolean\r\n  propertyContainers:\r\n    adminPropertiesContainer:\r\n      title: "Administrative Properties"\r\n      description: Top-level properties shared by all admin features\r\n      type: object\r\n      required: [admin_level]\r\n      properties:\r\n        admin_level: { "$ref": "#/$defs/propertyDefinitions/adminLevel" }\r\n        iso_country_code_alpha_2: { "$ref": "#/$defs/propertyDefinitions/isoCountryCodeAlpha2" }\r\n        iso_sub_country_code: { "$ref": "#/$defs/propertyDefinitions/isoSubCountryCode" }\r\n        default_language: { "$ref": "#/$defs/propertyDefinitions/defaultLanguage" }\r\n        driving_side: { "$ref": "#/$defs/propertyDefinitions/drivingSide" }\r\n'},6652:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>r});const r='---\r\n"$schema": https://json-schema.org/draft/2020-12/schema\r\ntitle: locality\r\ndescription: >-\r\n  Localities are named, populated areas. If a locality is a country or\r\n  an official subdivision of a country, it will have adminLevel property\r\n  set and its subtype will be an administrative_locality. Otherwise, the\r\n  admin_level property will not be set and its subtype will be a\r\n  named_locality.\r\ntype: object\r\nproperties:\r\n  id:\r\n    "$ref": ../defs.yaml#/$defs/propertyDefinitions/id\r\n  geometry:\r\n    unevaluatedProperties: false\r\n    oneOf:\r\n      - "$ref": https://geojson.org/schema/Point.json\r\n  properties:\r\n    unevaluatedProperties: false\r\n    required: [subtype, locality_type, names]\r\n    allOf:\r\n      - title: Conditional Properties\r\n        if: { properties: {subtype: { enum: [administrative_locality] }}}\r\n        then:\r\n          allOf:\r\n          - "$ref": "./defs.yaml#/$defs/propertyContainers/adminPropertiesContainer"\r\n          - title: "Conditional Properties"\r\n            if: {properties: {admin_level: { minimum: 2 }}}\r\n            then:\r\n              required: [context_id]\r\n      - "$ref": ../defs.yaml#/$defs/propertyContainers/overtureFeaturePropertiesContainer\r\n      - "$ref": ../defs.yaml#/$defs/propertyContainers/namesContainer\r\n    properties:\r\n      subtype:\r\n        description: populated area types\r\n        type: string\r\n        enum: [administrative_locality, named_locality]\r\n      locality_type: { "$ref": "./defs.yaml#/$defs/propertyDefinitions/localityType" }\r\n      wikidata: { "$ref": "../defs.yaml#/$defs/propertyDefinitions/wikidata" }\r\n      context_id:\r\n        description: Context entity is the most granular entity that logically contains given entity (but doesn\'t have to contain it spatially due to minor discrepancies in geometries)\r\n        type: string\r\n      population:\r\n        description: Population in the locality.\r\n        type: integer\r\n'},38122:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>r});const r='---\r\n"$schema": https://json-schema.org/draft/2020-12/schema\r\ntitle: locality_area\r\ndescription: >-\r\n  Adds land or maritime area polygon to locality.\r\ntype: object\r\nproperties:\r\n  id:\r\n    "$ref": ../defs.yaml#/$defs/propertyDefinitions/id\r\n  geometry:\r\n    unevaluatedProperties: false\r\n    oneOf:\r\n      - "$ref": https://geojson.org/schema/Polygon.json\r\n      - "$ref": https://geojson.org/schema/MultiPolygon.json\r\n  properties:\r\n    unevaluatedProperties: false\r\n    required: [locality_id]\r\n    allOf:\r\n      - "$ref": ../defs.yaml#/$defs/propertyContainers/overtureFeaturePropertiesContainer\r\n    properties:\r\n      locality_id:\r\n        description: References specific feature of locality type\r\n        type: string\r\n'},93306:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>r});const r='---\n"$schema": https://json-schema.org/draft/2020-12/schema\ntitle: Base layer properties\ndescription: Common schema definitions the base theme (primarily from OSM)\n"$defs":\n  propertyDefinitions:\n    sourceTags:\n      description: Any attributes/tags from the original source data that should be passed through.\n      type: object\n    elevation:\n      description: Elevation above sea level (in meters) of the feature.\n      type: integer\n      maximum: 9000\n    surface:\n      description: Surface material, mostly from the OSM tag, with some normalization.\n      type: string\n      enum:\n        - asphalt\n        - cobblestone\n        - compacted\n        - concrete\n        - concrete_plates\n        - dirt\n        - earth\n        - fine_gravel\n        - grass\n        - gravel\n        - ground\n        - paved\n        - paving_stones\n        - pebblestone\n        - recreation_grass\n        - recreation_paved\n        - recreation_sand\n        - rubber\n        - sand\n        - sett\n        - tartan\n        - unpaved\n        - wood\n        - woodchips\n  propertyContainers:\n    osmPropertiesContainer:\n      title: "OSM Properties"\n      description: OSM Properties\n      type: object\n      properties:\n        source_tags: { "$ref": "#/$defs/propertyDefinitions/sourceTags" }\n        wikidata: { "$ref": "../defs.yaml#/$defs/propertyDefinitions/wikidata" }\n'},29233:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>r});const r='---\n"$schema": https://json-schema.org/draft/2020-12/schema\ntitle: Infrastructure Schema\ndescription: Various features from OpenStreetMap such as bridges, airport runways, aerialways, or communication towers and lines.\ntype: object\nproperties:\n  id:\n    "$ref": ../defs.yaml#/$defs/propertyDefinitions/id\n  geometry:\n    unevaluatedProperties: false\n    oneOf:\n      - "$ref": https://geojson.org/schema/Point.json\n      - "$ref": https://geojson.org/schema/LineString.json\n      - "$ref": https://geojson.org/schema/Polygon.json\n      - "$ref": https://geojson.org/schema/MultiPolygon.json\n  properties:\n    unevaluatedProperties: false\n    allOf:\n      - "$ref": ../defs.yaml#/$defs/propertyContainers/overtureFeaturePropertiesContainer\n      - "$ref": ../defs.yaml#/$defs/propertyContainers/namesContainer\n      - "$ref": ../defs.yaml#/$defs/propertyContainers/levelContainer\n      - "$ref": ./defs.yaml#/$defs/propertyContainers/osmPropertiesContainer\n    required:\n      - subtype\n      - class\n    properties:\n      subtype:\n        description: Further description of the type of infrastructure.\n        type: string\n        enum:\n          - aerialway\n          - airport\n          - barrier\n          - bridge\n          - communication\n          - manhole\n          - pedestrian\n          - pier\n          - power\n          - recreation\n          - tower\n          - transit\n          - utility\n          - waste_management\n          - water\n      class:\n        description: Further classification of the infrastructure type\n        type: string\n        enum:\n          - aerialway_station\n          - airport\n          - airstrip\n          - aqueduct\n          - atm\n          - barrier\n          - bell_tower\n          - bench\n          - bicycle_parking\n          - block\n          - boardwalk\n          - bollard\n          - bridge\n          - bus_route\n          - bus_station\n          - bus_stop\n          - cable\n          - cable_car\n          - cable_distribution\n          - camp_site\n          - cantilever\n          - catenary_mast\n          - cattle_grid\n          - chain\n          - chair_lift\n          - city_wall\n          - communication_line\n          - communication_pole\n          - communication_tower\n          - connection\n          - cooling\n          - covered\n          - cutline\n          - cycle_barrier\n          - dam\n          - defensive\n          - ditch\n          - diving\n          - drag_lift\n          - drain\n          - entrance\n          - ferry_terminal\n          - generator\n          - gondola\n          - guard_rail\n          - hedge\n          - height_restrictor\n          - heliostat\n          - helipad\n          - heliport\n          - hose\n          - information\n          - insulator\n          - international_airport\n          - jersey_barrier\n          - kerb\n          - kissing_gate\n          - lift_gate\n          - lighting\n          - lightning_protection\n          - manhole\n          - military_airport\n          - minaret\n          - minor_line\n          - mixed_lift\n          - mobile_phone_tower\n          - monitoring\n          - movable\n          - municipal_airport\n          - observation\n          - parking\n          - parking_space\n          - pedestrian_crossing\n          - picnic_table\n          - pier\n          - pipeline\n          - plant\n          - platform\n          - portal\n          - post_box\n          - power_line\n          - power_pole\n          - power_tower\n          - private_airport\n          - pylon\n          - radar\n          - railway_halt\n          - railway_station\n          - recycling\n          - regional_airport\n          - retaining_wall\n          - runway\n          - seaplane_airport\n          - sewer\n          - silo\n          - siren\n          - stile\n          - stop_position\n          - storage_tank\n          - sub_station\n          - substation\n          - swing_gate\n          - switch\n          - t-bar\n          - taxiway\n          - terminal\n          - toilets\n          - toll_booth\n          - transformer\n          - trestle\n          - utility_pole\n          - vending_machine\n          - viaduct\n          - viewpoint\n          - wall\n          - waste_basket\n          - waste_disposal\n          - watchtower\n          - water_tower\n          - weir\n      surface: { "$ref": ./defs.yaml#/$defs/propertyDefinitions/surface }\n'},41971:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>r});const r='---\n"$schema": https://json-schema.org/draft/2020-12/schema\ntitle: land\ndescription: Physical representations of land surfaces. Global land derived from the inverse of OSM Coastlines. Translates `natural` tags from OpenStreetMap.\ntype: object\nproperties:\n  id:\n    "$ref": ../defs.yaml#/$defs/propertyDefinitions/id\n  geometry:\n    unevaluatedProperties: false\n    oneOf:\n      - "$ref": https://geojson.org/schema/Point.json\n      - "$ref": https://geojson.org/schema/LineString.json\n      - "$ref": https://geojson.org/schema/Polygon.json\n      - "$ref": https://geojson.org/schema/MultiPolygon.json\n  properties:\n    unevaluatedProperties: false\n    allOf:\n      - "$ref": ../defs.yaml#/$defs/propertyContainers/overtureFeaturePropertiesContainer\n      - "$ref": ../defs.yaml#/$defs/propertyContainers/namesContainer\n      - "$ref": ../defs.yaml#/$defs/propertyContainers/levelContainer\n      - "$ref": ./defs.yaml#/$defs/propertyContainers/osmPropertiesContainer\n    required:\n      - subtype\n      - class\n    properties:\n      subtype:\n        description: Further description of the type of land cover, such as forest, glacier, grass, or a physical feature, such as a mountain peak.\n        default: [land]\n        type: string\n        enum:\n          - desert\n          - forest\n          - glacier\n          - grass\n          - land\n          - physical\n          - reef\n          - rock\n          - sand\n          - shrub\n          - tree\n          - wetland\n      class:\n        description: Further classification of type of landcover\n        default: [land]\n        type: string\n        enum:\n          - archipelago\n          - bare_rock\n          - beach\n          - cave_entrance\n          - cliff\n          - desert\n          - dune\n          - fell\n          - forest\n          - glacier\n          - grass\n          - grassland\n          - heath\n          - hill\n          - island\n          - islet\n          - land\n          - mountain_range\n          - peak\n          - peninsula\n          - plateau\n          - reef\n          - ridge\n          - rock\n          - saddle\n          - sand\n          - scree\n          - scrub\n          - shingle\n          - shrub\n          - shrubbery\n          - stone\n          - tree\n          - tree_row\n          - tundra\n          - valley\n          - volcano\n          - wetland\n          - wood\n      elevation: { "$ref": ./defs.yaml#/$defs/propertyDefinitions/elevation }\n      surface: { "$ref": ./defs.yaml#/$defs/propertyDefinitions/surface }\n'},92411:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>r});const r='---\n"$schema": https://json-schema.org/draft/2020-12/schema\ntitle: land_cover\ndescription: Representation of the Earth\'s natural surfaces\ntype: object\nproperties:\n  id:\n    "$ref": ../defs.yaml#/$defs/propertyDefinitions/id\n  geometry:\n    unevaluatedProperties: false\n    oneOf:\n      - "$ref": https://geojson.org/schema/Polygon.json\n      - "$ref": https://geojson.org/schema/MultiPolygon.json\n  properties:\n    unevaluatedProperties: false\n    allOf:\n      - "$ref": ../defs.yaml#/$defs/propertyContainers/overtureFeaturePropertiesContainer\n      - "$ref": ../defs.yaml#/$defs/propertyContainers/levelContainer\n      - "$ref": ../defs.yaml#/$defs/propertyContainers/cartographyContainer\n    required:\n      - subtype\n    properties:\n      subtype:\n        description: type of surface represented\n        type: string\n        enum:\n          - barren\n          - crop\n          - forest\n          - grass\n          - mangrove\n          - moss\n          - shrub\n          - snow\n          - urban\n          - wetland\n'},63655:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>r});const r='---\n"$schema": https://json-schema.org/draft/2020-12/schema\ntitle: land_use\ndescription: Land use features from OpenStreetMap\ntype: object\nproperties:\n  id:\n    "$ref": ../defs.yaml#/$defs/propertyDefinitions/id\n  geometry:\n    description: Classifications of the human use of a section of land. Translates `landuse` from OpenStreetMap tag from OpenStreetMap.\n    unevaluatedProperties: false\n    oneOf:\n      - "$ref": https://geojson.org/schema/Point.json\n      - "$ref": https://geojson.org/schema/LineString.json\n      - "$ref": https://geojson.org/schema/Polygon.json\n      - "$ref": https://geojson.org/schema/MultiPolygon.json\n  properties:\n    unevaluatedProperties: false\n    allOf:\n      - "$ref": ../defs.yaml#/$defs/propertyContainers/overtureFeaturePropertiesContainer\n      - "$ref": ../defs.yaml#/$defs/propertyContainers/namesContainer\n      - "$ref": ../defs.yaml#/$defs/propertyContainers/levelContainer\n      - "$ref": ./defs.yaml#/$defs/propertyContainers/osmPropertiesContainer\n    required:\n      - subtype\n      - class\n    properties:\n      subtype:\n        description: Broad type of land\n        type: string\n        enum:\n          - agriculture\n          - airport\n          - aquaculture\n          - campground\n          - cemetery\n          - conservation\n          - construction\n          - developed\n          - education\n          - entertainment\n          - golf\n          - grass\n          - horticulture\n          - landfill\n          - managed\n          - medical\n          - military\n          - park\n          - pedestrian\n          - protected\n          - public\n          - recreation\n          - religious\n          - residential\n          - resource_extraction\n          - transportation\n          - winter_sports\n      class:\n        description: Further classification of the land use\n        type: string\n        enum:\n          - aboriginal_land\n          - aerodrome\n          - airfield\n          - allotments\n          - animal_keeping\n          - aquaculture\n          - barracks\n          - base\n          - beach_resort\n          - brownfield\n          - bunker\n          - camp_site\n          - cemetery\n          - churchyard\n          - civic_admin\n          - clinic\n          - college\n          - commercial\n          - common\n          - conservation\n          - construction\n          - danger_area\n          - depot\n          - doctors\n          - dog_park\n          - driving_range\n          - education\n          - environmental\n          - fairway\n          - farmland\n          - farmyard\n          - flowerbed\n          - forest\n          - garages\n          - garden\n          - golf_course\n          - grass\n          - grave_yard\n          - green\n          - greenfield\n          - greenhouse_horticulture\n          - helipad\n          - heliport\n          - highway\n          - hospital\n          - industrial\n          - institutional\n          - landfill\n          - lateral_water_hazard\n          - logging\n          - marina\n          - meadow\n          - military\n          - military_other\n          - national_park\n          - natural_monument\n          - nature_reserve\n          - naval_base\n          - nuclear_explosion_site\n          - obstacle_course\n          - orchard\n          - park\n          - peat_cutting\n          - pedestrian\n          - pitch\n          - plant_nursery\n          - playground\n          - plaza\n          - protected_landscape_seascape\n          - public\n          - quarry\n          - range\n          - recreation_ground\n          - religious\n          - residential\n          - retail\n          - rough\n          - salt_pond\n          - school\n          - schoolyard\n          - species_management_area\n          - stadium\n          - state_park\n          - static_caravan\n          - strict_nature_reserve\n          - tee\n          - theme_park\n          - track\n          - traffic_island\n          - training_area\n          - trench\n          - university\n          - village_green\n          - vineyard\n          - water_hazard\n          - water_park\n          - wilderness_area\n          - winter_sports\n          - works\n          - zoo\n      elevation: { "$ref": ./defs.yaml#/$defs/propertyDefinitions/elevation }\n      surface: { "$ref": ./defs.yaml#/$defs/propertyDefinitions/surface }\n'},61319:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>r});const r='---\n"$schema": https://json-schema.org/draft/2020-12/schema\ntitle: water\ndescription: Physical representations of inland and ocean marine surfaces. Translates `natural` and `waterway` tags from OpenStreetMap.\ntype: object\nproperties:\n  id:\n    "$ref": ../defs.yaml#/$defs/propertyDefinitions/id\n  geometry:\n    unevaluatedProperties: false\n    oneOf:\n      - "$ref": https://geojson.org/schema/Point.json\n      - "$ref": https://geojson.org/schema/LineString.json\n      - "$ref": https://geojson.org/schema/Polygon.json\n      - "$ref": https://geojson.org/schema/MultiPolygon.json\n  properties:\n    unevaluatedProperties: false\n    allOf:\n      - "$ref": ../defs.yaml#/$defs/propertyContainers/overtureFeaturePropertiesContainer\n      - "$ref": ../defs.yaml#/$defs/propertyContainers/levelContainer\n      - "$ref": ../defs.yaml#/$defs/propertyContainers/namesContainer\n      - "$ref": ./defs.yaml#/$defs/propertyContainers/osmPropertiesContainer\n    required:\n      - subtype\n      - class\n    properties:\n      subtype:\n        description: The type of water body such as an river, ocean or lake.\n        default: [water]\n        type: string\n        enum:\n          - canal\n          - human_made\n          - lake\n          - ocean\n          - physical\n          - pond\n          - reservoir\n          - river\n          - spring\n          - stream\n          - water\n      class:\n        description: Further description of the type of water\n        default: [water]\n        enum:\n        - basin\n        - bay\n        - canal\n        - cape\n        - ditch\n        - dock\n        - drain\n        - fish_pass\n        - fishpond\n        - geyser\n        - hot_spring\n        - lagoon\n        - lake\n        - lock\n        - moat\n        - ocean\n        - oxbow\n        - pond\n        - reflecting_pool\n        - reservoir\n        - river\n        - salt_pool\n        - sea\n        - sewage\n        - shoal\n        - spring\n        - strait\n        - stream\n        - swimming_pool\n        - tidal_channel\n        - wastewater\n        - water\n        - water_storage\n        - waterfall\n      is_salt:\n        description: Is it salt water or not\n        type: boolean\n      is_intermittent:\n        description: Is it intermittent water or not\n        type: boolean\n'},50100:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>r});const r='---\n"$schema": https://json-schema.org/draft/2020-12/schema\ntitle: building\ndescription: >-\n  A building is a man-made structure with a roof that exists permanently in one place. Buildings are compatible with\n  GeoJSON Polygon features.\ntype: object\nproperties:\n  id:\n    "$ref": ../defs.yaml#/$defs/propertyDefinitions/id\n  geometry:\n    description: >-\n      A regular building\'s geometry is defined as its footprint or\n      roofprint (if traced from aerial/satellite imagery). It MUST be a\n      Polygon or MultiPolygon as defined by the GeoJSON schema.\n    unevaluatedProperties: false\n    oneOf:\n      - "$ref": https://geojson.org/schema/Polygon.json\n      - "$ref": https://geojson.org/schema/MultiPolygon.json\n  properties:\n    unevaluatedProperties: false\n    allOf:\n      - "$ref": ../defs.yaml#/$defs/propertyContainers/overtureFeaturePropertiesContainer\n      - "$ref": ../defs.yaml#/$defs/propertyContainers/namesContainer\n      - "$ref": ../defs.yaml#/$defs/propertyContainers/levelContainer\n      - "$ref": ./defs.yaml#/shapeContainer\n    properties:\n      subtype:\n        description: >-\n          A broad category of the building type/purpose. When the\n          current use of the building does not match the built purpose,\n          the subtype should be set to represent the current use of the\n          building.\n        type: string\n        enum:\n          - agricultural\n          - civic\n          - commercial\n          - education\n          - entertainment\n          - industrial\n          - medical\n          - military\n          - outbuilding\n          - religious\n          - residential\n          - service\n          - transportation\n      class:\n        description: >-\n          Further delineation of the building\'s built purpose.\n        type: string\n        enum:\n          - agricultural\n          - allotment_house\n          - apartments\n          - barn\n          - beach_hut\n          - boathouse\n          - bungalow\n          - bunker\n          - cabin\n          - carport\n          - cathedral\n          - chapel\n          - church\n          - civic\n          - college\n          - commercial\n          - cowshed\n          - detached\n          - digester\n          - dormitory\n          - dwelling_house\n          - factory\n          - farm\n          - farm_auxiliary\n          - fire_station\n          - garage\n          - garages\n          - ger\n          - glasshouse\n          - government\n          - grandstand\n          - greenhouse\n          - guardhouse\n          - hangar\n          - hospital\n          - hotel\n          - house\n          - houseboat\n          - hut\n          - industrial\n          - kindergarten\n          - kiosk\n          - library\n          - manufacture\n          - military\n          - monastery\n          - mosque\n          - office\n          - outbuilding\n          - parking\n          - pavilion\n          - post_office\n          - presbytery\n          - public\n          - religious\n          - residential\n          - retail\n          - school\n          - semi\n          - semidetached_house\n          - service\n          - shed\n          - shrine\n          - silo\n          - slurry_tank\n          - sports_centre\n          - sports_hall\n          - stable\n          - stadium\n          - static_caravan\n          - stilt_house\n          - storage_tank\n          - sty\n          - supermarket\n          - synagogue\n          - temple\n          - terrace\n          - toilets\n          - train_station\n          - transformer_tower\n          - transportation\n          - trullo\n          - university\n          - warehouse\n          - wayside_shrine\n\n      has_parts:\n        description: Flag indicating whether the building has parts\n        type: boolean\n'},42086:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>r});const r='---\n"$schema": https://json-schema.org/draft/2020-12/schema\ntitle: part\ndescription: >-\n  A single building part. Parts describe their shape and color and other properties. Each\n  building part must contain the building with which it is associated.\ntype: object\nproperties:\n  geometry:\n    description: >-\n      The part\'s geometry. It must be a polygon or multipolygon.\n    unevaluatedProperties: false\n    oneOf:\n      - "$ref": https://geojson.org/schema/Polygon.json\n      - "$ref": https://geojson.org/schema/MultiPolygon.json\n  properties:\n    unevaluatedProperties: false\n    allOf:\n      - "$ref": ./defs.yaml#/shapeContainer\n      - "$ref": ../defs.yaml#/$defs/propertyContainers/overtureFeaturePropertiesContainer\n      - "$ref": ../defs.yaml#/$defs/propertyContainers/levelContainer\n    required: [building_id]\n    properties:\n      building_id:\n        description: The building ID to which this part belongs\n        type: string\n'},91912:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>r});const r='---\n"$schema": https://json-schema.org/draft/2020-12/schema\ntitle: Overture Maps Shared Building Properties\ndescription: Common schema definitions shared by building footprints and building parts\nshapeContainer:\n  title: shape\n  description: Properties of the buildings shape, such as height or roof type.\n  properties:\n    height:\n      description: >-\n        Height of the building or part in meters. The height is the distance from the lowest point to the highest point.\n      type: number\n      exclusiveMinimum: 0\n    num_floors:\n      description: >-\n        Number of above-ground floors of the building or part.\n      type: integer\n      exclusiveMinimum: 0\n    min_height:\n      description: >-\n        The height of the bottom part of building in meters. Used if a building or part of building starts above the ground level.\n      type: number\n    min_floor:\n      description: >-\n        The "start" floor of this building or part. Indicates that the building or part is "floating" and its bottom-most floor is above\n        ground level, usually because it is part of a larger building in which some parts do reach down to ground level. An example is a\n        building that has an entry road or driveway at ground level into an interior courtyard, where part of the building bridges above\n        the entry road. This property may sometimes be populated when min_height is missing and in these cases can be used as a proxy\n        for min_height.\n      type: integer\n      exclusiveMinimum: 0\n    facade_color:\n      description: >-\n        The color (name or color triplet) of the facade of a building or building part in hexadecimal\n      type: string\n    facade_material:\n      description: >-\n        The outer surface material of building facade.\n      type: string\n      enum:\n        - brick\n        - cement_block\n        - clay\n        - concrete\n        - glass\n        - metal\n        - plaster\n        - plastic\n        - stone\n        - timber_framing\n        - wood\n    roof_material:\n      description: >-\n        The outermost material of the roof.\n      type: string\n      enum:\n        - concrete\n        - copper\n        - eternit\n        - glass\n        - grass\n        - gravel\n        - metal\n        - plastic\n        - roof_tiles\n        - slate\n        - solar_panels\n        - thatch\n        - tar_paper\n        - wood\n    roof_shape:\n      description: The shape of the roof\n      type: string\n      enum:\n        - dome\n        - flat\n        - gabled\n        - gambrel\n        - half_hipped\n        - hipped\n        - mansard\n        - onion\n        - pyramidal\n        - round\n        - saltbox\n        - sawtooth\n        - skillion\n        - spherical\n    roof_direction:\n      description: >-\n        Bearing of the roof ridge line in degrees.\n      type: number\n      inclusiveMinimum: 0\n      exclusiveMaximum: 360\n    roof_orientation:\n      description: >-\n        Orientation of the roof shape relative to the footprint shape. Either "along" or "across".\n      type: string\n      enum:\n        - across\n        - along\n    roof_color:\n      description: The color (name or color triplet) of the roof of a building or building part in hexadecimal\n      type: string\n    roof_height:\n      description: >-\n        The height of the building roof in meters. This represents the distance\n        from the base of the roof to the highest point of the roof.\n      type: number\n'},43074:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>r});const r='---\n"$schema": https://json-schema.org/draft/2020-12/schema\ntitle: Overture Maps Feature Schema Common Definitions\ndescription: Common schema definitions shared by all themes\n"$defs":\n  propertyDefinitions:\n    id:\n      type: string\n      description: >-\n        A feature ID. This may be an ID associated with the Global\n        Entity Reference System (GERS) if\u2014and-only-if the feature\n        represents an entity that is part of GERS.\n      minLength: 1\n      pattern: ^(\\S.*)?\\S$    # Leading and trailing whitespace are not allowed.\n    level:\n      description: Z-order of the feature where 0 is visual level\n      type: integer\n      default: 0\n    featureType:\n      description: Specific feature type within the theme\n      type: string\n      enum:\n        - administrative_boundary # DEPRECATED, TO BE REMOVED SEPT 2024 RELEASE\n        - boundary\n        - building\n        - connector\n        - division\n        - division_area\n        - infrastructure\n        - land\n        - land_cover\n        - land_use\n        - locality                # DEPRECATED, TO BE REMOVED SEPT 2024 RELEASE\n        - locality_area           # DEPRECATED, TO BE REMOVED SEPT 2024 RELEASE\n        - building_part\n        - place\n        - segment\n        - water\n    featureUpdateTime:\n      description: Timestamp when the feature was last updated\n      type: string\n      format: date-time\n      pattern: ^([1-9]\\d{3})-(0[1-9]|1[0-2])-(0[1-9]|[12]\\d|3[01])T([01]\\d|2[0-3]):([0-5]\\d):([0-5]\\d|60)(\\.\\d{1,3})?(Z|[-+]([01]\\d|2[0-3]):[0-5]\\d)$\n      "$comment": >-\n        Pattern is used as a fallback because not all JSON schema\n        implementations treat "format" as an assertion, for some it is\n        only an annotation.\n\n        A somewhat more compact approach would be to reference the\n        Overture version where the feature last changed instead of the\n        update time, and expect clients to do a lookup if they really\n        care about the time.\n    featureVersion:\n      description: >-\n        Version number of the feature, incremented in each Overture\n        release where the geometry or attributes of this feature\n        changed.\n      type: integer\n      minimum: 0\n      "$comment": >-\n        It might be reasonable to combine "update_time" and "version"\n        in a single "updateVersion" field which gives the last Overture\n        version number in which the feature changed. The downside to\n        doing this is that the number would cease to be indicative of\n        the "rate of change" of the feature.\n    sources:\n      description: >-\n        The array of source information for the properties of a\n        given feature, with each entry being a source object which\n        lists the property in JSON Pointer notation and the dataset\n        that specific value came from. All features must have a root\n        level source which is the default source if a specific\n        property\'s source is not specified.\n      type: array\n      items: { "$ref": "#/$defs/propertyDefinitions/property" }\n      minItems: 1\n      uniqueItems: true\n    property:\n      description: >-\n        An object storing the source for a specificed property. The property\n        is a reference to the property element within this Feature, and will be\n        referenced using JSON Pointer Notation RFC 6901\n        (https://datatracker.ietf.org/doc/rfc6901/). The source dataset for\n        that referenced property will be specified in the overture list of\n        approved sources from the Overture Data Working Group that contains\n        the relevant metadata for that dataset including license source organization.\n      type: object\n      required: [property, dataset]\n      unevaluatedProperties: false\n      properties:\n        property:\n          type: string\n        dataset:\n          type: string\n        record_id:\n          type: string\n          description: Refers to the specific record within the dataset that was used.\n        confidence:\n          description: Confidence value from the source dataset, particularly relevant for ML-derived data.\n          type: number\n          minimum: 0\n          maximum: 1\n    theme:\n      description: Top-level Overture theme this feature belongs to\n      type: string\n      enum:\n        - admins\n        - base\n        - buildings\n        - divisions\n        - places\n        - transportation\n    linearlyReferencedPosition:\n      description: >-\n        Represents a linearly-referenced position between 0% and 100% of\n        the distance along a path such as a road segment or a river\n        center-line segment.\n      type: number\n      minimum: 0\n      maximum: 1\n      "$comment": >-\n        One possible advantage to using percentages over absolute\n        distances is being able to trivially validate that the position\n        lies "on" its segment (i.e. is between zero and one). Of course,\n        this level of validity doesn\'t mean the number isn\'t nonsense.\n    linearlyReferencedRange:\n      description:\n        Represents a non-empty range of positions along a path as a pair\n        linearly-referenced positions. For example, the pair [0.25, 0.5]\n        represents the range beginning 25% of the distance from the\n        start of the path and ending 50% oof the distance from the path\n        start.\n      type: array\n      items: { "$ref": "#/$defs/propertyDefinitions/linearlyReferencedPosition" }\n      minItems: 2\n      maxItems: 2\n      uniqueItems: true\n      "$comment":\n        Ideally we would enforce sorted order of this pair, but sorting\n        assertions aren\'t (yet?) supported by JSON schema.\n    side:\n      description:\n        Represents the side on which something appears relative to a\n        facing or heading direction, e.g. the side of a road relative\n        to the road orientation, or relative to the direction of travel\n        of a person or vehicle.\n      type: string\n      enum: [left, right]\n    openingHours:\n      description: >-\n        Time span or time spans during which something is open or\n        active, specified in the OSM opening hours specification:\n          https://wiki.openstreetmap.org/wiki/Key:opening_hours/specification\n      type: string\n      "$comment": >-\n          Validating the opening hours value is going to have to happen outside of JSON Schema.\n\n          Reasons for using the OSM opening hours specification for\n          transportation rule time restrictions are documented in\n          https://github.com/OvertureMaps/schema-wg/pull/10\n    language:\n      description: >-\n        A IETF-BCP47 language tag.\n\n        The validating regular expression for this property follows the pattern\n        described in https://www.rfc-editor.org/rfc/bcp/bcp47.txt with the\n        exception that private use subtags are omitted from the pattern.\n      type: string\n      pattern: "^(?:(?:[A-Za-z]{2,3}(?:-[A-Za-z]{3}){0,3}?)|(?:[A-Za-z]{4,8}))(?:-[A-Za-z]{4})?(?:-[A-Za-z]{2}|[0-9]{3})?(?:-(?:[A-Za-z0-9]{5,8}|[0-9][A-Za-z0-9]{3}))*(?:-[A-WY-Za-wy-z0-9](?:-[A-Za-z0-9]{2,8})+)*$"\n      "$comment": >-\n          This pattern recognizes BCP-47 language tags at the lexical or\n          syntactic level. It verifies that candidate tags follow the grammar\n          described in the RFC, but not that they are validly registered tag in\n          IANA\'s language subtag registry.\n\n          In understanding the regular expression, remark that \'(:?\' indicates\n          a non-capturing group, and that all the top-level or non-nested\n          groups represent top-level components of `langtag` referenced in the\n          syntax section of https://www.rfc-editor.org/rfc/bcp/bcp47.txt. In\n          particular, the top-level groups in left-to-right order represent:\n\n            1. language\n            2. ["-" script]\n            3. ["-" region]\n            4. *("-" variant)\n            5. *("-" extension)\n    nameRule:\n      type: object\n      required: [value]\n      allOf:\n        - { "$ref": "#/$defs/propertyContainers/geometricRangeScopeContainer" }\n        - { "$ref": "#/$defs/propertyContainers/sideScopeContainer" }\n      properties:\n        variant:\n          type: string\n          enum:\n            - common\n            - official\n            - alternate\n            - short\n        language: { "$ref": "#/$defs/propertyDefinitions/language" }\n        value:\n          type: string\n          minLength: 1\n          pattern: ^(\\S.*)?\\S$    # Leading and trailing whitespace are not allowed.\n    allNames:\n      type: object\n      required: [primary]\n      unevaluatedProperties: false\n      properties:\n        primary:\n          description: The most commonly used name.\n          type: string\n          minLength: 1\n          pattern: ^(\\S.*)?\\S$    # Leading and trailing whitespace are not allowed.\n        common: { "$ref": "#/$defs/propertyDefinitions/commonNames" }\n        rules:\n          description: >-\n            Rules for names that cannot be specified in the simple\n            common names property. These rules can cover other name\n            variants such as official, alternate, and short; and they\n            can optionally include geometric scoping (linear\n            referencing) and side-of-road scoping for complex cases.\n          type: array\n          items: { "$ref": "#/$defs/propertyDefinitions/nameRule" }\n          minItems: 1\n    commonNames:\n      description: The common translations of the name.\n      type: object\n      minProperties: 1\n      additionalProperties: false\n      patternProperties:\n        "^(?:(?:[A-Za-z]{2,3}(?:-[A-Za-z]{3}){0,3}?)|(?:[A-Za-z]{4,8}))(?:-[A-Za-z]{4})?(?:-[A-Za-z]{2}|[0-9]{3})?(?:-(?:[A-Za-z0-9]{5,8}|[0-9][A-Za-z0-9]{3}))*(?:-[A-WY-Za-wy-z0-9](?:-[A-Za-z0-9]{2,8})+)*$":\n          description: >-\n            Each entry consists of a key that is an IETF-BCP47 language tag; and\n            a value that reflects the common name in the language represented by\n            the key\'s language tag.\n\n            The validating regular expression for this property follows the\n            pattern described in https://www.rfc-editor.org/rfc/bcp/bcp47.txt\n            with the exception that private use tags are not supported.\n          "$comment": >-\n            This pattern recognizes BCP-47 language tags at the lexical or\n            syntactic level. It verifies that candidate tags follow the grammar\n            described in the RFC, but not that they are validly registered tag\n            in IANA\'s language subtag registry.\n  \n            In understanding the regular expression, remark that \'(:?\' indicates\n            a non-capturing group, and that all the top-level or non-nested\n            groups represent top-level components of `langtag` referenced in the\n            syntax section of https://www.rfc-editor.org/rfc/bcp/bcp47.txt. In\n            particular, the top-level groups in left-to-right order represent:\n  \n              1. language\n              2. ["-" script]\n              3. ["-" region]\n              4. *("-" variant)\n              5. *("-" extension)\n          type: string\n          minLength: 1\n          pattern: ^(\\S.*)?\\S$    # Leading and trailing whitespace are not allowed.\n    iso3166_1Alpha2CountryCode:\n      description: ISO 3166-1 alpha-2 country code.\n      type: string\n      minLength: 2\n      maxLength: 2\n      pattern: ^[A-Z]{2}$\n    iso3166_2SubdivisionCode:\n      description: ISO 3166-2 principal subdivision code.\n      type: string\n      minLength: 4\n      maxLength: 6\n      pattern: ^[A-Z]{2}-[A-Z0-9]{1,3}$\n    address:\n      type: object\n      unevaluatedProperties: false\n      properties:\n        freeform:\n          description: >-\n            Free-form address that contains street name, house number\n            and other address info\n          type: string\n        locality:\n          description: >-\n            Name of the city or neighborhood where the address is\n            located\n          type: string\n        postcode:\n          description: Postal code where the address is located\n          type: string\n        region: { "$ref": "#/$defs/propertyDefinitions/iso3166_2SubdivisionCode" }\n        country: { "$ref": "#/$defs/propertyDefinitions/iso3166_1Alpha2CountryCode" }\n    wikidata:\n      description: A wikidata ID if available, as found on https://www.wikidata.org/.\n      type: string\n      pattern: ^Q\\d+\n  propertyContainers:\n    overtureFeaturePropertiesContainer:\n      title: overture properties\n      description: Top-level properties shared by all Overture features\n      type: object\n      required: [ theme, type, version, update_time ]\n      patternProperties:\n        ^ext_.*$:\n          description: "Additional top-level properties must be prefixed with `ext_`."\n      properties:\n        theme: { "$ref": "#/$defs/propertyDefinitions/theme" }\n        type: { "$ref": "#/$defs/propertyDefinitions/featureType" }\n        version: { "$ref": "#/$defs/propertyDefinitions/featureVersion" }\n        update_time: { "$ref": "#/$defs/propertyDefinitions/featureUpdateTime" }\n        sources: { "$ref": "#/$defs/propertyDefinitions/sources" }\n    namesContainer:\n      title: names\n      description: Properties defining the names of a feature.\n      type: object\n      properties:\n        names:\n          "$ref": "#/$defs/propertyDefinitions/allNames"\n    levelContainer:\n      title: level\n      description: Properties defining feature Z-order, i.e., stacking order\n      type: object\n      properties:\n        level:\n          "$ref": "#/$defs/propertyDefinitions/level"\n    geometricRangeScopeContainer:\n      description: >-\n        Geometric scoping properties defining the range of positions on\n        the segment where something is physically located or where a\n        rule is active.\n      properties:\n        between: { "$ref": "#/$defs/propertyDefinitions/linearlyReferencedRange" }\n    sideScopeContainer:\n      description: >-\n        Geometric scoping properties defining the side of a road modeled when\n        moving along the line from beginning to end\n      properties:\n        side: { "$ref": "#/$defs/propertyDefinitions/side" }\n    cartographyContainer:\n      title: cartography\n      description: Defines cartographic hints for optimal use of Overture features in map-making.\n      type: object\n      properties:\n        cartography:\n          type: object\n          properties:\n            min_zoom:\n              description: >-\n                Recommended minimum tile zoom per the Slippy Maps convention.\n                \n                The Slippy Maps zooms are explained in the following references: \n                 - https://wiki.openstreetmap.org/wiki/Slippy_map_tilenames\n                 - https://www.maptiler.com/google-maps-coordinates-tile-bounds-projection\n              type: integer\n              minimum: 0\n              maximum: 23\n            max_zoom:\n              description: >-\n                Recommended maximum tile zoom per the Slippy Maps convention.\n                \n                The Slippy Maps zooms are explained in the following references: \n                 - https://wiki.openstreetmap.org/wiki/Slippy_map_tilenames\n                 - https://www.maptiler.com/google-maps-coordinates-tile-bounds-projection\n              type: integer\n              minimum: 0\n              maximum: 23\n            sort_key:\n              description: >-\n                An ascending numeric that defines the recommended order features\n                should be drawn in. Features with lower number should be shown on top\n                of features with a higher number.\n              type: integer\n              default: 0\n              \n          \n'},90161:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>r});const r='---\n"$schema": https://json-schema.org/draft/2020-12/schema\ntitle: boundary\ndescription:\n  Boundaries represent borders between divisions of the same subtype.\n  Some boundaries may be disputed by the divisions on one or both sides.\ntype: object\nproperties:     # JSON Schema: Top-level object properties.\n  id: { "$ref": ../defs.yaml#/$defs/propertyDefinitions/id }\n  geometry:\n    description:\n      Boundary\'s geometry which MUST be a LineString as defined by the\n      GeoJSON schema.\n    unevaluatedProperties: false\n    oneOf:\n      - "$ref": https://geojson.org/schema/LineString.json\n      - "$ref": https://geojson.org/schema/MultiLineString.json\n  properties:   # GeoJSON: top-level object \'properties\' property.\n    unevaluatedProperties: false\n    required: [subtype, class, divisions]\n    allOf:\n      - "$ref": ../defs.yaml#/$defs/propertyContainers/overtureFeaturePropertiesContainer\n    properties: # JSON Schema: properties within GeoJSON top-level object \'properties\' property\n      subtype: { "$ref": "./defs.yaml#/$defs/typeDefinitions/placetype" }\n      class:\n        type: string\n        enum:\n          - land        # None of the boundary geometry extends beyond the\n                        # coastline of either associated division.\n\n          - maritime    # All the boundary geometry extends beyond the\n                        # coastline of both associated divisions.\n      divisions:\n        description:\n          The two divisions to the left and right, respectively, of the\n          boundary line. The left- and right-hand sides of the boundary are\n          considered from the perspective of a person standing on the\n          line facing in the direction in which the geometry is oriented,\n          i.e. facing toward the end of the line.\n          \n          The first array element represents the left division. The second\n          element represents the right division.\n        type: array\n        items: { "$ref": "../defs.yaml#/$defs/propertyDefinitions/id" }\n        minItems: 2\n        maxItems: 2\n        uniqueItems: true\n      is_disputed:\n        description: >-\n          Indicator if there are entities disputing this division boundary.\n          Information about entities disputing this boundary should be included in perspectives\n          property.\n\n          This property should also be true if boundary between two entities is unclear\n          and this is "best guess". So having it true and no perspectives gives map creators\n          reason not to fully trust the boundary, but use it if they have no other.\n        type: boolean\n      perspectives:\n        description: >-\n          Political perspectives from which this division boundary is considered\n          to be an accurate representation.\n      \n          If this property is absent, then this boundary is not known to\n          be disputed from any political perspective. Consequently,\n          there is only one boundary feature representing the entire\n          real world entity.\n      \n          If this property is present, it means the boundary represents\n          one of several alternative perspectives on the same real-world\n          entity.\n      \n          There are two modes of perspective:\n          \n            1. `accepted_by` means the representation of the boundary is\n               accepted by the listed entities and would be included on\n               a map drawn from their perspective.\n      \n            2. `disputed_by` means the representation of the boundary is\n               disputed by the listed entities and would be excluded\n               from a map drawn from their perspective.\n              \n          When drawing a map from the perspective of a given country,\n          one would start by gathering all the undisputed boundary\n          (with no `perspectives` property), and then adding to that\n          first all boundary explicitly accepted by the country, and\n          second all boundary not explicitly disputed by the country.\n        allOf: \n          - "$ref": "./defs.yaml#/$defs/typeDefinitions/perspectives"\n'},8851:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>r});const r='---\n"$schema": https://json-schema.org/draft/2020-12/schema\ndescription: Common schema definitions for divisions theme\n"$defs":\n  typeDefinitions:\n    placetype:\n      description:\n        Category of the division from a finite, hierarchical, ordered\n        list of categories (e.g. country, region, locality, etc.)\n        similar to a Who\'s on First placetype.\n      type: string\n      enum:\n        - country       # Largest unit of independent sovereignty, e.g.\n                        # the United States, France.\n\n        - dependency    # A place that is not exactly a sub-region of a\n                        # country but is dependent on a parent country\n                        # for defence, passport control, etc., e.g.\n                        # Puerto Rico.\n\n        - macroregion   # A bundle of regions, e.g. England, Scotland,\n                        # \xcele-de-France. These exist mainly in Europe.\n\n        - region        # A state, province, region, etc. Largest\n                        # sub-country administrative unit in most\n                        # countries, except those that have dependencies\n                        # or macro-regions.\n\n        - macrocounty   # A bundle of counties, e.g. Inverness. These\n                        # exist mainly in Europe.\n\n        - county        # Largest sub-region administrative unit in most\n                        # countries, unless they have macrocounties.\n\n        - localadmin    # An administrative unit existing in some parts\n                        # of the world that contains localities or\n                        # populated places, e.g. d\xe9partement de Paris.\n                        # Often the contained places do not have\n                        # independent authority. Often, but not\n                        # exclusively, found in Europe.\n\n        - locality      # A populated place that may or may not have its\n                        # own administrative authority.\n\n        - borough       # A local government unit subordinate to a\n                        # locality.\n\n        - macrohood     # A super-neighborhood that contains smaller\n                        # divisions of type neighborhood, e.g. BoCaCa\n                        # (Boerum Hill, Cobble Hill, and Carroll\n                        # Gardens).\n\n        - neighborhood  # A neighborhood. Most neighborhoods will be\n                        # just this, unless there\'s enough granular\n                        # detail to justify incroducing macrohood or\n                        # microhood divisions.\n\n        - microhood     # A mini-neighborhood that is contained within a\n                        # division of type neighborhood.\n    hierarchy:\n      description:\n        A hierarchy of divisions, with the first entry being a country;\n        each subsequent entry, if any, being a division that is a direct\n        child of the previous entry; and the last entry representing\n        the division that contains the hierarchy.\n  \n        For example, a hierarchy for the United States is simply\n        [United States]. A hierarchy for the U.S. state of New Hampshire\n        would be [United States, New Hampshire], and a hierarchy for the\n        city of Concord, NH would be [United States, New Hampshire,\n        Merrimack County, Concord].\n      type: array\n      items: { "$ref": "#/$defs/typeDefinitions/hierarchyItem" }\n      minItems: 1\n      uniqueItems: true\n    hierarchyItem:\n      description: One division in a hierarchy\n      type: object\n      unevaluatedProperties: false\n      required: [division_id, name, subtype]\n      properties:\n        division_id:\n          description: ID of the division\n          allOf:\n            - "$ref": "../defs.yaml#/$defs/propertyDefinitions/id"\n        subtype: { "$ref": "#/$defs/typeDefinitions/placetype" }\n        name:\n          description: Primary name of the division\n          type: string\n          minLength: 1\n          pattern: ^(\\S.*)?\\S$    # Leading and trailing whitespace are not allowed.\n    perspectives:\n      description: Political perspectives from which division is viewed.\n      type: object\n      unevaluatedProperties: false\n      required: [mode, countries]\n      properties:\n        mode:\n          description: Whether perspective holder accept or dispute this division.\n          type: string\n          enum: [accepted_by, disputed_by]\n        countries:\n          description: Countries holding the given mode of perspective.\n          type: array\n          items: { "$ref": "../defs.yaml#/$defs/propertyDefinitions/iso3166_1Alpha2CountryCode" }\n          minItems: 1\n          uniqueItems: true\n'},89804:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>r});const r='---\n"$schema": https://json-schema.org/draft/2020-12/schema\ntitle: division\ndescription:\n  Divisions are recognized official or non-official organizations of\n  people as seen from a given political perspective. Examples include\n  countries, provinces, cities, towns, neighborhoods, etc.\ntype: object\nproperties:     # JSON Schema: Top-level object properties.\n  id: { "$ref": ../defs.yaml#/$defs/propertyDefinitions/id }\n  geometry:\n    description:\n      Division geometry MUST be a Point as defined by GeoJSON schema.\n      It represents the approximate location of a position commonly\n      associated with the real-world entity modeled by the division\n      feature.\n    unevaluatedProperties: false\n    allOf:\n      - "$ref": https://geojson.org/schema/Point.json\n  properties:   # GeoJSON: top-level object \'properties\' property.\n    unevaluatedProperties: false\n    allOf:\n      - "$ref": ../defs.yaml#/$defs/propertyContainers/overtureFeaturePropertiesContainer\n      - "$ref": ../defs.yaml#/$defs/propertyContainers/namesContainer\n      - if:\n          properties:\n            subtype: { enum: [country] }\n        then:\n          required: [names, subtype, country, hierarchies]\n          not: { required: [parent_division_id] }\n        else:\n          required: [names, subtype, country, hierarchies, parent_division_id]\n    properties: # JSON Schema: properties within GeoJSON top-level object \'properties\' property\n      subtype: { "$ref": "./defs.yaml#/$defs/typeDefinitions/placetype" }\n      local_type:\n        description:\n          Local name for the subtype property, optionally localized.\n\n          For example, the Canadian province of Quebec has the subtype\n          \'region\', but in the local administrative hierarchy it is\n          referred to as a \'province\'. Similarly, the Canadian Yukon\n          territory also has subtype \'region\', but is locally called\n          a \'territory\'.\n\n          This property is localized using a standard Overture names\n          structure. So for example, in Switzerland the top-level\n          administrative subdivision corresponding to subtype \'region\'\n          is the canton, which is may be translated in each of\n          Switzerland\'s official languages as, \'canton\' in French, \n          \'kanton\' in German, \'cantone\' in Italian, and \'chantun\' in\n          Romansh.\n        allOf:\n          - "$ref": "../defs.yaml#/$defs/propertyDefinitions/commonNames"\n      country:\n        description: >-\n          ISO 3166-1 alpha-2 country code of the country or country-like\n          entity, that this division represents or belongs to.\n  \n          If the entity this division represents has a country code, the\n          country property contains it. If it does not, the country\n          property contains the country code of the first division\n          encountered by traversing the parent_division_id chain to the\n          root.\n\n          For example:\n            - The country value for the United States is \'US\'\n            - The country value for New York City is \'US\'\n            - The country value for Puerto Rico, a dependency of the US,\n              is \'PR\'.\n            - The country value for San Juan, Puerto Rico is \'PR\'.\n\n          If an entity has an internationally-recognized ISO 3166-1\n          alpha-2 country code, it should always be used. In cases where\n          the schema requires the code but no internationally-recognized\n          code is available, a synthetic code may be used provided it\n          does not conflict with any internationally-recognized codes.\n        allOf:\n          - "$ref": "../defs.yaml#/$defs/propertyDefinitions/iso3166_1Alpha2CountryCode"\n      region:\n        description: >-\n          ISO 3166-2 principal subdivision code of the subdivision-like\n          entity this division represents or belongs to.\n          \n          If the entity this division represents has a principal\n          subdivision code, the region property contains it. If it does\n          not, the region property contains the principal subdivision\n          code of the first division encountered by traversing the\n          parent_division_id chain to the root.\n\n          For example:\n            - The region value for the United States is omitted.\n            - The region value for the U.S. state of New York is \'US-NY\'.\n            - The region value for New York City is \'US-NY\', which it\n              inherits from the state of New York.\n            - The region value for Puerto Rico is \'US-PR\'.\n        allOf:\n          - "$ref": "../defs.yaml#/$defs/propertyDefinitions/iso3166_2SubdivisionCode"\n      hierarchies:\n        description:\n          Hierarchies in which this division participates.\n\n          Every division participates in at least one hierarchy. Most\n          participate in only one. Some divisions may participate in\n          more than one hierarchy, for example if they are claimed by\n          different parent divisions from different political\n          perspectives; or if there are other real-world reasons why the\n          division or one of its ancestors has multiple parents.\n\n          The first hierarchy in the list is the default hierarchy, and\n          the second-to-last entry in the default hierarchy (if there\n          is such an entry) always corresponds to the `parent_division_id\'\n          property. The ordering of hierarchies after the first one is\n          arbitrary.\n        type: array\n        items: { "$ref": "./defs.yaml#/$defs/typeDefinitions/hierarchy" }\n        minItems: 1\n        uniqueItems: true\n      parent_division_id:\n        description:\n          Division ID of this division\'s parent division.\n          \n          Not allowed for top-level divisions (countries) and required\n          for all other divisions.\n          \n          The default parent division is the parent division as seen\n          from the default political perspective, if there is one, and\n          is otherwise chosen somewhat arbitrarily. The hierarchies\n          property can be used to inspect the exhaustive list of\n          parent divisions.\n        allOf:\n          - "$ref": "../defs.yaml#/$defs/propertyDefinitions/id"\n      perspectives:\n        description: >-\n          Political perspectives from which this division is considered\n          to be an accurate representation.\n      \n          If this property is absent, then this division is not known to\n          be disputed from any political perspective. Consequently,\n          there is only one division feature representing the entire\n          real world entity.\n      \n          If this property is present, it means the division represents\n          one of several alternative perspectives on the same real-world\n          entity.\n      \n          There are two modes of perspective:\n          \n            1. `accepted_by` means the representation of the division is\n               accepted by the listed entities and would be included on\n               a map drawn from their perspective.\n      \n            2. `disputed_by` means the representation of the division is\n               disputed by the listed entities and would be excluded\n               from a map drawn from their perspective.\n              \n          When drawing a map from the perspective of a given country,\n          one would start by gathering all the undisputed divisions\n          (with no `perspectives` property), and then adding to that\n          first all divisions explicitly accepted by the country, and\n          second all divisions not explicitly disputed by the country.\n        allOf: \n          - "$ref": "./defs.yaml#/$defs/typeDefinitions/perspectives"\n      norms:\n        description:\n          Collects information about local norms and rules within the\n          division that are generally useful for mapping and map-related\n          use cases.\n\n          If the norms property or a desired sub-property of the norms\n          property is missing on a division, but at least one of its\n          ancestor divisions has the norms property and the desired\n          sub-property, then the value from the nearest ancestor division\n          may be assumed.\n        "$comment":\n          If we decide to include default language, it will go here. But\n          is it really generally-useful information?\n        type: object\n        unevaluatedProperties: false\n        properties:\n          driving_side:\n            description:\n              Side of the road on which vehicles drive in the division.\n            allOf:\n              - "$ref": "../defs.yaml#/$defs/propertyDefinitions/side"\n      population:\n        description: Population of the division\n        type: integer\n        minimum: 0\n      capital_division_ids:\n        description:\n          Division IDs of this division\'s capital divisions. If present,\n          this property will refer to the division IDs of the capital\n          cities, county seats, etc. of a division.\n        type: array\n        minItems: 1\n        uniqueItems: true\n        items: { "$ref": "../defs.yaml#/$defs/propertyDefinitions/id" }\n      wikidata: { "$ref": "../defs.yaml#/$defs/propertyDefinitions/wikidata" }\n'},12058:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>r});const r='---\n"$schema": https://json-schema.org/draft/2020-12/schema\ntitle: division_area\ndescription:\n  Division areas are polygons that represent the land or maritime area\n  covered by a division.\n\n  Each division area belongs to a division which it references by ID,\n  and for which the division area provides an area polygon. For ease of\n  use, every division area repeats the subtype, names, country, and\n  region properties of the division it belongs to.\ntype: object\nproperties:     # JSON Schema: Top-level object properties.\n  id: { "$ref": ../defs.yaml#/$defs/propertyDefinitions/id }\n  geometry:\n    description:\n      Division area geometries MUST be polygons or multi-polygons as\n      defined by the GeoJSON schema.\n    unevaluatedProperties: false\n    oneOf:\n      - "$ref": https://geojson.org/schema/Polygon.json\n      - "$ref": https://geojson.org/schema/MultiPolygon.json\n  properties:   # GeoJSON: top-level object \'properties\' property.\n    unevaluatedProperties: false\n    required: [names, subtype, class, country, division_id]\n    allOf:\n      - "$ref": ../defs.yaml#/$defs/propertyContainers/overtureFeaturePropertiesContainer\n      - "$ref": ../defs.yaml#/$defs/propertyContainers/namesContainer\n    properties: # JSON Schema: properties within GeoJSON top-level object \'properties\' property\n      subtype: { "$ref": "./defs.yaml#/$defs/typeDefinitions/placetype" }\n      class:\n        type: string\n        enum:\n          - land        # The area does not extend beyond the coastline.\n\n          - maritime    # The area extends beyond the coastline, in most\n                        # cases to the extent of the division\'s\n                        # territorial sea, if it has one.\n      division_id:\n        description:\n          Division ID of the division this area belongs to.\n        allOf:\n          - "$ref": ../defs.yaml#/$defs/propertyDefinitions/id\n      country:\n        description:\n          ISO 3166-1 alpha-2 country code of the division this area\n          belongs to.\n        allOf:\n          - "$ref": "../defs.yaml#/$defs/propertyDefinitions/iso3166_1Alpha2CountryCode"\n      region:\n        description:\n          ISO 3166-2 principal subdivision code of the division this area\n          belongs to.\n        allOf:\n          - "$ref": "../defs.yaml#/$defs/propertyDefinitions/iso3166_2SubdivisionCode"\n'},41862:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>r});const r='---\n"$schema": https://json-schema.org/draft/2020-12/schema\ntitle: place\ndescription: >-\n  A Place is a point representation of a real-world facility, service,\n  or amenity. Place features are compatible with GeoJSON Point features.\ntype: object\nproperties:\n  id:\n    "$ref": ../defs.yaml#/$defs/propertyDefinitions/id\n  geometry:\n    description: >-\n      Place\'s geometry which MUST be a Point as defined by GeoJSON\n      schema.\n    unevaluatedProperties: false\n    oneOf:\n      - "$ref": https://geojson.org/schema/Point.json\n  properties:\n    unevaluatedProperties: false\n    required: [categories]\n    allOf:\n      - "$ref": ../defs.yaml#/$defs/propertyContainers/overtureFeaturePropertiesContainer\n      - "$ref": ../defs.yaml#/$defs/propertyContainers/namesContainer\n    properties:\n      categories:\n        description: |\n          The categories of the place. Complete list is available on GitHub: https://github.com/OvertureMaps/schema/blob/main/task-force-docs/places/overture_categories.csv\n        type: object\n        required: [main]\n        properties:\n          main:\n            description: The main category of the place.\n            type: string\n          alternate:\n            description: Alternate categories of the place. Some places might fit into two categories, e.g. a book store and a coffee shop. In such a case, the main category can be augmented with additional applicable categories.\n            type: array\n            items:\n              type: string\n            uniqueItems: true\n      confidence:\n        description: The confidence of the existence of the place. It\'s a number between 0 and 1. 0 means that we\'re sure that the place doesn\'t exist (anymore). 1 means that we\'re sure that the place exists. If there\'s no value for the confidence, it means that we don\'t have any confidence information.\n        type: number\n        minimum: 0\n        maximum: 1\n      websites:\n        description: The websites of the place.\n        type: array\n        items:\n          type: string\n          format: uri\n        uniqueItems: true\n      socials:\n        description: The social media URLs of the place.\n        type: array\n        items:\n          type: string\n          format: uri\n        uniqueItems: true\n      emails:\n        description: The email addresses of the place.\n        type: array\n        items:\n          type: string\n          format: email\n        uniqueItems: true\n      phones:\n        description: The phone numbers of the place.\n        type: array\n        items:\n          type: string\n        uniqueItems: true\n      brand:\n        description: >-\n          The brand of the place. A location with multiple brands is\n          modeled as multiple separate places, each with its own brand.\n        type: object\n        allOf:\n          - "$ref": "../defs.yaml#/$defs/propertyContainers/namesContainer"\n        properties:\n          wikidata: { "$ref": "../defs.yaml#/$defs/propertyDefinitions/wikidata" }\n      addresses:\n        description: The addresses of the place.\n        type: array\n        items:\n          "$ref": "../defs.yaml#/$defs/propertyDefinitions/address"\n        uniqueItems: true\n'},69673:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>r});const r='---\n"$schema": https://json-schema.org/draft/2020-12/schema\ntitle: Overture Maps Schema\ndescription: >-\n  A JSON Schema for the canonical GeoJSON form of Overture Maps\n  Features.\ntype: object\nunevaluatedProperties: false\nallOf:\n  - "$ref": https://geojson.org/schema/Feature.json\n    "$comment": Every Overture feature IS A GeoJSON feature\noneOf:\n  - if:\n      properties:\n        properties:\n          properties:\n            theme: { enum: [admins] }\n            type: { enum: [administrative_boundary] }\n    then: { "$ref": admins/administrative_boundary.yaml }\n    else: { propertyNames: false }\n  - if:\n      properties:\n        properties:\n          properties:\n            theme: { enum: [admins] }\n            type: { enum: [locality] }\n    then: { "$ref": admins/locality.yaml }\n    else: { propertyNames: false }\n  - if:\n      properties:\n        properties:\n          properties:\n            theme: { enum: [admins] }\n            type: { enum: [locality_area] }\n    then: { "$ref": admins/locality_area.yaml }\n    else: { propertyNames: false }\n  - if:\n      properties:\n        properties:\n          properties:\n            theme: { enum: [base] }\n            type: { enum: [infrastructure] }\n    then: { "$ref": base/infrastructure.yaml }\n    else: { propertyNames: false }\n  - if:\n      properties:\n        properties:\n          properties:\n            theme: { enum: [base] }\n            type: { enum: [land] }\n    then: { "$ref": base/land.yaml }\n    else: { propertyNames: false }\n  - if:\n      properties:\n        properties:\n          properties:\n            theme: { enum: [base] }\n            type: { enum: [land_cover] }\n    then: { "$ref": base/land_cover.yaml }\n    else: { propertyNames: false }\n  - if:\n      properties:\n        properties:\n          properties:\n            theme: { enum: [base] }\n            type: { enum: [land_use] }\n    then: { "$ref": base/land_use.yaml }\n    else: { propertyNames: false }\n  - if:\n      properties:\n        properties:\n          properties:\n            theme: { enum: [base] }\n            type: { enum: [water] }\n    then: { "$ref": base/water.yaml }\n    else: { propertyNames: false }\n  - if:\n      properties:\n        properties:\n          properties:\n            theme: { enum: [buildings] }\n            type: { enum: [building] }\n    then: { "$ref": buildings/building.yaml }\n    else: { propertyNames: false }\n  - if:\n      properties:\n        properties:\n          properties:\n            theme: { enum: [buildings] }\n            type: { enum: [building_part] }\n    then: { "$ref": buildings/building_part.yaml }\n    else: { propertyNames: false }\n  - if:\n      properties:\n        properties:\n          properties:\n            theme: { enum: [divisions] }\n            type: { enum: [boundary] }\n    then: { "$ref": divisions/boundary.yaml }\n    else: { propertyNames: false }\n  - if:\n      properties:\n        properties:\n          properties:\n            theme: { enum: [divisions] }\n            type: { enum: [division] }\n    then: { "$ref": divisions/division.yaml }\n    else: { propertyNames: false }\n  - if:\n      properties:\n        properties:\n          properties:\n            theme: { enum: [divisions] }\n            type: { enum: [division_area] }\n    then: { "$ref": divisions/division_area.yaml }\n    else: { propertyNames: false }\n  - if:\n      properties:\n        properties:\n          properties:\n            theme: { enum: [places] }\n            type: { enum: [place] }\n    then: { "$ref": places/place.yaml }\n    else: { propertyNames: false }\n  - if:\n      properties:\n        properties:\n          properties:\n            theme: { enum: [transportation] }\n            type: { enum: [connector] }\n    then: { "$ref": transportation/connector.yaml }\n    else: { propertyNames: false }\n  - if:\n      properties:\n        properties:\n          properties:\n            theme: { enum: [transportation] }\n            type: { enum: [segment] }\n    then: { "$ref": transportation/segment.yaml }\n    else: { propertyNames: false }\n'},62744:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>r});const r='---\n"$schema": https://json-schema.org/draft/2020-12/schema\ntitle: connector\ndescription: >-\n  Connectors create physical connections between segments. Connectors\n  are compatible with GeoJSON Point features.\ntype: object\nproperties:\n  id:\n    "$ref": ../defs.yaml#/$defs/propertyDefinitions/id\n  geometry:\n    description: >-\n      Connector\'s geometry which MUST be a Point as defined by GeoJSON\n      schema.\n    unevaluatedProperties: false\n    allOf:\n      - "$ref": https://geojson.org/schema/Point.json\n  properties:\n    unevaluatedProperties: false\n    allOf:\n      - "$ref": ../defs.yaml#/$defs/propertyContainers/overtureFeaturePropertiesContainer\n'},37930:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>r});const r='---\n"$schema": https://json-schema.org/draft/2020-12/schema\ntitle: segment\ndescription: >-\n  Segments are paths which can be traveled by people or things. Segments\n  are compatible with GeoJSON LineString features.\ntype: object\nproperties:\n  id:\n    "$ref": ../defs.yaml#/$defs/propertyDefinitions/id\n  geometry:\n    description: >-\n      Segment\'s geometry which MUST be a LineSting as defined by GeoJSON\n      schema.\n    unevaluatedProperties: false\n    allOf:\n      - "$ref": https://geojson.org/schema/LineString.json\n  properties:\n    unevaluatedProperties: false\n    required: [subtype]\n    allOf:\n      - title: "Segment Properties"\n        required: [class]\n        properties:\n          class: { "$ref": "#/$defs/propertyDefinitions/roadClass" }\n          access_restrictions: { "$ref": "#/$defs/propertyContainers/accessContainer" }\n          level: { "$ref": "../defs.yaml#/$defs/propertyDefinitions/level" }\n          level_rules: { "$ref": "#/$defs/propertyContainers/levelRulesContainer" }\n      - title: "Conditional Properties"\n        if: { properties: { subtype: { enum: [road] } } }\n        then:\n          properties:\n            lanes: { "$ref": "#/$defs/propertyContainers/lanesContainer" }\n            prohibited_transitions: { "$ref": "#/$defs/propertyContainers/prohibitedTransitionsContainer" }\n            road_surface: { "$ref": "#/$defs/propertyContainers/surfaceContainer"}\n            road_flags: { "$ref": "#/$defs/propertyContainers/flagsContainer" }\n            speed_limits: { "$ref": "#/$defs/propertyContainers/speedLimitsContainer" }\n            width_rules: { "$ref": "#/$defs/propertyContainers/widthRulesContainer" }\n            # The `road` property is deprecated and will be removed in the 2024-07 release\n            road: { "$ref": "#/$defs/propertyDefinitions/road" }\n      - "$ref": ../defs.yaml#/$defs/propertyContainers/overtureFeaturePropertiesContainer\n      - "$ref": ../defs.yaml#/$defs/propertyContainers/namesContainer\n    properties:\n      subtype:\n        description: Broad category of transportation segment.\n        type: string\n        enum: [road, rail, water]\n        "$comment": >-\n          Should not be confused with a transport mode. A segment\n          kind has an (implied) set of default transport modes.\n      connector_ids:\n        description: >-\n          List of connector IDs identifying the connectors this segment is physically\n          connected to. Each connector is a possible routing decision point, meaning\n          it defines a place along the segment in which there is possibility to\n          transition to other segments which share the same connector.\n        type: array\n        items:\n          type: string\n          "$comment": >-\n            Each entry in this array is the GERS ID of a transportation connector feature.\n        uniqueItems: true\n        default: []\n      routes: { "$ref": "#/$defs/propertyDefinitions/routes" }\n"$defs":\n  propertyDefinitions:\n    roadClass:\n      description:\n        Captures the kind of road and its position in the road network\n        hierarchy.\n      type: string\n      enum:\n        - motorway\n        - primary\n        - secondary\n        - tertiary\n        - residential\n        - living_street   # Similar to residential but has implied legal restriction for motor vehicles (which can vary country by country)\n        - trunk\n        - unclassified    # Known roads, paved, but subordinate to all of: motorway, trunk, primary, secondary, tertiary\n        - parking_aisle   # Service road intended for parking\n        - driveway        # Service road intended for deliveries\n        - alley           # Service road intended for rear entrances, fire exits\n        - pedestrian\n        - footway\n        - sidewalk\n        - crosswalk\n        - steps\n        - path\n        - track\n        - cycleway\n        - bridleway       # Similar to track but has implied access only for horses\n        - unknown\n    lane:\n      description: Properties for a single lane of traffic.\n      type: object\n      unevaluatedProperties: false\n      required: [direction]\n      properties:\n        direction: { "$ref": "#/$defs/propertyDefinitions/laneDirection" }\n        restrictions:\n          description: Restrictions on how the lane may be used\n          "$comment": >-\n            Lane restrictions may be defined in the same way as for whole roads with the exception\n            of turns; there are no turn restrictions for lanes.\n          type: object\n          unevaluatedProperties: false\n          properties:\n            speed_limits:\n              "$ref": "#/$defs/propertyContainers/speedLimitsContainer"\n            access:\n              "$ref": "#/$defs/propertyContainers/accessContainer"\n            min_occupancy:\n              description: >-\n                Minimal occupancy restrictions relate to HOV (high occupancy vehicles) travel modes.\n                If a lane is restricted for use only by HOVs, then the default minimum vehicle\n                occupancy qualifying as HOV is 2+ passengers (including the driver).  This\n                restriction can be provided to override the default definition of HOV.\n              type: integer\n              minimum: 1\n    laneDirection:\n      type: string\n      enum:\n        - forward       # Traffic flows in the segment direction.\n        - backward      # Traffic flows against the segment direction.\n        - both_ways     # Traffic flows simultaneously in both directions as, e.g., on a sidewalk.\n        - alternating   # Traffic flows alternately forward and backward following a predictable rhythm.\n        - reversible    # Traffic flows forward, but may be arbitrarily reversed by traffic authorities at any time.\n    heading:\n      description: >-\n        Enumerates possible travel headings along segment geometry.\n      type: string\n      enum: [ forward, backward ]\n    travelMode:\n      description: >-\n        Enumerates possible travel modes. Some modes represent groups\n        of modes.\n      type: string\n      enum: [ vehicle, motor_vehicle, car, truck, motorcycle, foot, bicycle, bus, hgv, hov, emergency ]\n      "$comment": >-\n        motor_vehicle includes car, truck and motorcycle\n    road:\n      description: >-\n        ** Note: this field is deprecated in favor of promoting its sub-properties into top-level properties and will be removed in the 2024-07 release **\n\n        Properties for segments whose segment subtype is road. The road\n        subtype includes any variety of road, street, or path, including\n        dedicated paths for walking and cycling.\n      type: object\n      unevaluatedProperties: false\n      default: {}\n      properties:\n        surface: { "$ref": "#/$defs/propertyContainers/surfaceContainer" }\n        flags: { "$ref": "#/$defs/propertyContainers/flagsContainer" }\n        level: { "$ref": "#/$defs/propertyContainers/levelRulesContainer" }\n        width: { "$ref": "#/$defs/propertyContainers/widthRulesContainer" }\n        lanes: { "$ref": "#/$defs/propertyContainers/lanesContainer" }\n        restrictions:\n          description: Restrictions on how the road may be used\n          type: object\n          unevaluatedProperties: false\n          properties:\n            speed_limits: { "$ref": "#/$defs/propertyContainers/speedLimitsContainer" }\n            access: { "$ref": "#/$defs/propertyContainers/accessContainer" }\n            prohibited_transitions: { "$ref": "#/$defs/propertyContainers/prohibitedTransitionsContainer"}\n    roadFlag:\n      description: Simple flags that can be on or off for a road segment\n      type: string\n      enum:\n        - is_bridge\n        - is_link\n        - is_tunnel\n        - is_under_construction\n        - is_abandoned\n        - is_covered\n    roadSurface:\n      description: Physical surface of the road\n      type: string\n      enum:\n        - unknown\n        - paved\n        - unpaved\n        - gravel\n        - dirt\n        - paving_stones\n        - metal\n    routes:\n      description: Routes this segment belongs to\n      type: array\n      items:\n        type: object\n        unevaluatedProperties: false\n        allOf:\n          - { "$ref": "../defs.yaml#/$defs/propertyContainers/geometricRangeScopeContainer" }\n        properties:\n          name:\n            description: Full name of the route\n            type: string\n            minLength: 1\n            pattern: ^(\\S.*)?\\S$    # Leading and trailing whitespace are not allowed.\n          network:\n            description: Name of the highway system this route belongs to\n            type: string\n            minLength: 1\n            pattern: ^(\\S.*)?\\S$    # Leading and trailing whitespace are not allowed.\n          ref:\n            description: Code or number used to reference the route\n            type: string\n            minLength: 1\n            pattern: ^(\\S.*)?\\S$    # Leading and trailing whitespace are not allowed.\n          symbol:\n            description: URL or description of route signage\n            type: string\n            minLength: 1\n            pattern: ^(\\S.*)?\\S$    # Leading and trailing whitespace are not allowed.\n          wikidata: { "$ref": "../defs.yaml#/$defs/propertyDefinitions/wikidata" }\n    speed:\n      description: >-\n        A speed value, i.e. a certain number of distance units\n        travelled per unit time.\n      type: object\n      properties:\n        value:\n          description: Speed value\n          type: integer\n          minimum: 1\n          maximum: 350\n        unit:\n          description: Speed unit\n          type: string\n          enum:\n            - km/h\n            - mph\n      required:\n        - value\n        - unit\n      unevaluatedProperties: false\n    purposeOfUse:\n      description: >-\n        Reason why a person or entity travelling on the transportation\n        network is using a particular location.\n      type: string\n      enum:\n        - as_customer\n        - at_destination\n        - to_deliver\n        - to_farm\n        - for_forestry\n    recognizedStatus:\n      description: >-\n        Status of the person or entity travelling as recognized by\n        authorities controlling the particular location\n      type: string\n      enum:\n        - as_permitted\n        - as_private\n        - as_disabled\n        - as_employee\n        - as_student\n    integerRelation:\n      description: >-\n        Completes an integer relational expression of the form\n        <lhs> <operator> <integer_value>. An example of such an\n        expression is:\n          `{ axle_count: { is_more_than: 2 } }`.\n      type: object\n      unevaluatedProperties: false\n      oneOf:\n        - required: [is_more_than]\n          properties: { is_more_than: { type: integer } }\n        - required: [is_at_least]\n          properties: { is_at_least: { type: integer } }\n        - required: [is_equal_to]\n          properties: { is_equal_to: { type: integer } }\n        - required: [is_at_most]\n          properties: { is_at_most: { type: integer } }\n        - required: [is_less_than]\n          properties: { is_less_than: { type: integer } }\n    vehicleScopeDimension:\n      description: Enumerates possible vehicle dimensions for use in restrictions\n      type: string\n      enum:\n        - axle_count\n        - height\n        - length\n        - weight\n        - width\n    vehicleScopeComparison:\n      description: Enumerates possible comparison operators for use in scoping\n      type: string\n      enum:\n        - greater_than\n        - greater_than_equal\n        - equal\n        - less_than\n        - less_than_equal\n    vehicleScopeUnit:\n      description: Parent enum of both length and width for use in vehicle scoping\n      anyOf:\n        - {"$ref": "#/$defs/propertyDefinitions/lengthUnit"}\n        - {"$ref": "#/$defs/propertyDefinitions/weightUnit"}\n    lengthUnit:\n      description: Enumerates length units supported by the Overture schema.\n      "$comment": Keep in sync with `combobulib/measure.py`.\n      type: string\n      enum:\n        # Imperial units.\n        - in            # Imperial: Inch.\n        - ft            # Imperial: Foot.\n        - yd            # Imperial: Yard.\n        - mi            # Imperial: Mile.\n        # SI units.\n        - cm            # SI: centimeter.\n        - m             # SI: meter.\n        - km            # SI: kilometer.\n    lengthValueWithUnit:\n      description: Combines a length value with a length unit.\n      type: object\n      unevaluatedProperties: false\n      required: [value, unit]\n      properties:\n        value:\n          type: number\n          minimum: 0\n        unit: { "$ref": "#/$defs/propertyDefinitions/lengthUnit" }\n    lengthRelation:\n      description: >-\n        Completes a length relational expression of the form\n        <lhs> <operator> <length_value>. An example of such an\n        expression is:\n          `{ height: { is_less_than: { value: 3, unit: \'m\' } } }`.\n      type: object\n      unevaluatedProperties: false\n      oneOf:\n        - required: [is_more_than]\n          properties: { is_more_than: { allOf: [ { "$ref": "#/$defs/propertyDefinitions/lengthValueWithUnit" } ] } }\n        - required: [is_at_least]\n          properties: { is_at_least: { allOf: [ { "$ref": "#/$defs/propertyDefinitions/lengthValueWithUnit" } ] } }\n        - required: [is_equal_to]\n          properties: { is_equal_to: { allOf: [ { "$ref": "#/$defs/propertyDefinitions/lengthValueWithUnit" } ] } }\n        - required: [is_at_most]\n          properties: { is_at_most: { allOf: [ { "$ref": "#/$defs/propertyDefinitions/lengthValueWithUnit" } ] } }\n        - required: [is_less_than]\n          properties: { is_less_than: { allOf: [ { "$ref": "#/$defs/propertyDefinitions/lengthValueWithUnit" } ] } }\n    weightUnit:\n      description: Enumerates weight units supported by the Overture schema.\n      "$comment": Keep in sync with `combobulib/measure.py`.\n      type: string\n      enum:\n        # Imperial units.\n        - oz            # Imperial: Ounce.\n        - lb            # Imperial: Pound.\n        - st            # Imperial: Short Ton.\n        - lt            # Imperial: Long Ton.\n        # SI units.\n        - g             # SI: gram.\n        - kg            # SI: kilogram.\n        - t             # SI: tonne.\n    weightValueWithUnit:\n      description: Combines a weight value with a weight unit.\n      type: object\n      unevaluatedProperties: false\n      required: [value, unit]\n      properties:\n        value:\n          type: number\n          minimum: 0\n        unit: { "$ref": "#/$defs/propertyDefinitions/weightUnit" }\n    weightRelation:\n      description: >-\n        Completes a weight relational expression of the form\n        <lhs> <operator> <weight_value>. An example of such an\n        expression is:\n          `{ weight: { is_more_than: { value: 2, unit: \'t\' } } }`.\n      type: object\n      unevaluatedProperties: false\n      oneOf:\n        - required: [is_more_than]\n          properties: { is_more_than: { allOf: [ { "$ref": "#/$defs/propertyDefinitions/weightValueWithUnit" } ] } }\n        - required: [is_at_least]\n          properties: { is_at_least: { allOf: [ { "$ref": "#/$defs/propertyDefinitions/weightValueWithUnit" } ] } }\n        - required: [is_equal_to]\n          properties: { is_equal_to: { allOf: [ { "$ref": "#/$defs/propertyDefinitions/weightValueWithUnit" } ] } }\n        - required: [is_at_most]\n          properties: { is_at_most: { allOf: [ { "$ref": "#/$defs/propertyDefinitions/weightValueWithUnit" } ] } }\n        - required: [is_less_than]\n          properties: { is_less_than: { allOf: [ { "$ref": "#/$defs/propertyDefinitions/weightValueWithUnit" } ] } }\n    width:\n      type: number\n      exclusiveMinimum: 0\n    sequenceEntry:\n      description: >-\n        A segment/connector pair in a prohibited transition sequence.\n      type: object\n      required: [connector_id, segment_id]\n      properties:\n        connector_id:\n          description: >-\n            Identifies the point of physical connection between the\n            previous segment in the sequence and the segment in this\n            sequence entry.\n          type: string\n        segment_id:\n          description: >-\n            Identifies the segment that the previous segment in the\n            sequence is physically connected to via the sequence entry\'s\n            connector.\n          type: string\n  propertyContainers:\n    headingScopeContainer:\n      description: Properties defining travel headings that match a rule.\n      properties:\n        heading:\n          "$ref": "#/$defs/propertyDefinitions/heading"\n    purposeOfUseScopeContainer:\n      description: Properties defining usage purposes that match a rule.\n      properties:\n        using:\n          type: array\n          items:\n            "$ref": "#/$defs/propertyDefinitions/purposeOfUse"\n          uniqueItems: true\n          minLength: 1\n    temporalScopeContainer:\n      "$comment": >-\n        Temporal scoping properties defining the time spans when a\n        recurring rule is active.\n      properties:\n        during:\n          "$ref": ../defs.yaml#/$defs/propertyDefinitions/openingHours\n    travelModeScopeContainer:\n      description: Properties defining travel modes that match a rule.\n      type: object\n      properties:\n        mode:\n          description: Travel mode(s) to which the rule applies\n          type: array\n          items:\n            "$ref": "#/$defs/propertyDefinitions/travelMode"\n          uniqueItems: true\n          minLength: 1\n    recognizedStatusScopeContainer:\n      description: Properties defining statuses that match a rule.\n      properties:\n        recognized:\n          type: array\n          items:\n            "$ref": "#/$defs/propertyDefinitions/recognizedStatus"\n          uniqueItems: true\n          minLength: 1\n    vehicleScopeContainer:\n      description: >-\n        Properties defining vehicle attributes for which a rule is\n        active.\n      type: object\n      properties:\n        vehicle:\n          description: Vehicle attributes for which the rule applies\n          type: array\n          uniqueItems: true\n          minLength: 1\n          items:\n            description: An individual vehicle scope rule\n            type: object\n            unevaluatedProperties: false\n            required: [dimension, comparison, value]\n            properties:\n              dimension: { "$ref": "#/$defs/propertyDefinitions/vehicleScopeDimension" }\n              comparison: { "$ref": "#/$defs/propertyDefinitions/vehicleScopeComparison" }\n              value:\n                type: number\n                minimum: 0\n              unit: { "$ref": "#/$defs/propertyDefinitions/vehicleScopeUnit" }\n    speedLimitsContainer:\n      description: Rules governing speed on this road segment or lane\n      type: array\n      items:\n        description: An individual speed limit rule\n        "$comment": >-\n          TODO: Speed limits probably have directionality, so\n          should factor out a headingScopeContainer for this\n          purpose and use it to introduce an optional\n          direction property in each rule.\n        type: object\n        anyOf:\n          - required: [ min_speed ]\n          - required: [ max_speed ]\n        allOf:\n          - "$ref": "../defs.yaml#/$defs/propertyContainers/geometricRangeScopeContainer"\n        unevaluatedProperties: false\n        properties:\n          min_speed: { "$ref": "#/$defs/propertyDefinitions/speed" }\n          max_speed: { "$ref": "#/$defs/propertyDefinitions/speed" }\n          is_max_speed_variable:\n            description: Indicates a variable speed corridor\n            type: boolean\n            default: false\n          when:\n            allOf:\n              - "$ref": "#/$defs/propertyContainers/temporalScopeContainer"\n              - "$ref": "#/$defs/propertyContainers/headingScopeContainer"\n              - "$ref": "#/$defs/propertyContainers/purposeOfUseScopeContainer"\n              - "$ref": "#/$defs/propertyContainers/recognizedStatusScopeContainer"\n              - "$ref": "#/$defs/propertyContainers/travelModeScopeContainer"\n              - "$ref": "#/$defs/propertyContainers/vehicleScopeContainer"\n            minProperties: 1\n            unevaluatedProperties: false\n      minLength: 1\n      uniqueItems: true\n    accessContainer:\n      description: Rules governing access to this road segment or lane\n      type: array\n      items:\n        type: object\n        unevaluatedProperties: false\n        allOf:\n          - { "$ref": "../defs.yaml#/$defs/propertyContainers/geometricRangeScopeContainer" }\n        required: [access_type]\n        properties:\n          access_type:\n            type: string\n            enum: [allowed, denied, designated]\n          when:\n            allOf:\n              - "$ref": "#/$defs/propertyContainers/temporalScopeContainer"\n              - "$ref": "#/$defs/propertyContainers/headingScopeContainer"\n              - "$ref": "#/$defs/propertyContainers/purposeOfUseScopeContainer"\n              - "$ref": "#/$defs/propertyContainers/recognizedStatusScopeContainer"\n              - "$ref": "#/$defs/propertyContainers/travelModeScopeContainer"\n              - "$ref": "#/$defs/propertyContainers/vehicleScopeContainer"\n            minProperties: 1\n            unevaluatedProperties: false\n        minLength: 1\n        uniqueItems: true\n    lanesContainer:\n      description: >-\n        List of lane block rules describing the layout of lanes on\n        the road plus lane-related information. The standard rule\n        evaluation algorithm is used to determine which lane block\n        applies at a given place and time along the segment.\n\n        Each lane block contains the list of lanes that make up the\n        block. Lanes in the block are listed from left to right as\n        they would be seen by a person standing on the road segment\n        facing in the direction of the segment\'s orientation (toward\n        the end).\n      type: array\n      items:\n        type: object\n        unevaluatedProperties: false\n        allOf:\n          - "$ref": "../defs.yaml#/$defs/propertyContainers/geometricRangeScopeContainer"\n        properties:\n          value:\n            type: array\n            items:  { "$ref": "#/$defs/propertyDefinitions/lane" }\n            minItems: 1\n          when:\n            allOf:\n              - "$ref": "#/$defs/propertyContainers/temporalScopeContainer"\n            minProperties: 1\n            unevaluatedProperties: false\n      minItems: 1\n      uniqueItems: true\n    prohibitedTransitionsContainer:\n      description: >-\n        Rules preventing transitions from this segment to\n        another segment.\n      type: array\n      items:\n        type: object\n        unevaluatedProperties: false\n        allOf:\n          - "$ref": "../defs.yaml#/$defs/propertyContainers/geometricRangeScopeContainer"\n        required: [sequence, final_heading]\n        properties:\n          sequence:\n            description: >-\n              Ordered sequence of connector/segment pairs that it is\n              prohibited to follow from this segment.\n            type: array\n            items:\n              description: Pair of segment and connector IDs along the sequence\n              "$ref": "#/$defs/propertyDefinitions/sequenceEntry"\n            minItems: 1\n            uniqueItems: true\n          final_heading:\n            description: >-\n              Direction of travel that is prohibited on the destination\n              segment of the sequence.\n            "$ref": "#/$defs/propertyDefinitions/heading"\n          when:\n            allOf:\n              - "$ref": "#/$defs/propertyContainers/headingScopeContainer"\n              - "$ref": "#/$defs/propertyContainers/temporalScopeContainer"\n              - "$ref": "#/$defs/propertyContainers/purposeOfUseScopeContainer"\n              - "$ref": "#/$defs/propertyContainers/recognizedStatusScopeContainer"\n              - "$ref": "#/$defs/propertyContainers/travelModeScopeContainer"\n              - "$ref": "#/$defs/propertyContainers/vehicleScopeContainer"\n            minProperties: 1\n            unevaluatedProperties: false\n    flagsContainer:\n      description:\n        Set of boolean attributes applicable to roads. May be\n        specified either as a single flag array of flag values, or\n        as an array of flag rules.\n      type: array\n      items:\n        type: object\n        allOf:\n          - { "$ref": "../defs.yaml#/$defs/propertyContainers/geometricRangeScopeContainer" }\n        unevaluatedProperties: false\n        properties:\n          values:\n            type: array\n            items: { "$ref": "#/$defs/propertyDefinitions/roadFlag" }\n            uniqueItems: true\n            minLength: 1\n      uniqueItems: true\n      minLength: 1\n    levelRulesContainer:\n      description:\n        Defines the Z-order, i.e. stacking order, of the road\n        segment.\n      type: array\n      items:\n        description:\n          A single level rule defining the Z-order, i.e. stacking\n          order, applicable within a given scope on the road\n          segment.\n        type: object\n        allOf:\n          - { "$ref": "../defs.yaml#/$defs/propertyContainers/geometricRangeScopeContainer" }\n        unevaluatedProperties: false\n        required: [value]\n        properties:\n          value: { "$ref": "../defs.yaml#/$defs/propertyDefinitions/level" }\n    surfaceContainer:\n      description: Physical surface of the road. May either be\n        specified as a single global value for the segment, or as\n        an array of surface rules.\n      type: array\n      items:\n        type: object\n        allOf:\n          - { "$ref": "../defs.yaml#/$defs/propertyContainers/geometricRangeScopeContainer" }\n        unevaluatedProperties: false\n        properties:\n          value: { "$ref": "#/$defs/propertyDefinitions/roadSurface" }\n      minItems: 1\n      uniqueItems: true\n      "$comment":\n        We should likely restrict the available surface types to\n        the subset of the common OSM surface=* tag values that are\n        useful both for routing and for map tile rendering.\n    widthRulesContainer:\n      description: >-\n        Edge-to-edge width of the road modeled by this segment, in\n        meters.\n\n        Examples: (1) If this segment models a carriageway without\n        sidewalk, this value represents the edge-to-edge width of the\n        carriageway, inclusive of any shoulder. (2) If this segment\n        models a sidewalk by itself, this value represents the\n        edge-to-edge width of the sidewalk. (3) If this segment models a\n        combined sidewalk and carriageway, this value represents the\n        edge-to-edge width inclusive of sidewalk.\n      type: array\n      items:\n        type: object\n        allOf:\n          - { "$ref": "../defs.yaml#/$defs/propertyContainers/geometricRangeScopeContainer" }\n        required: [value]\n        properties:\n          value: { "$ref": "#/$defs/propertyDefinitions/width" }\n        unevaluatedProperties: false\n      minItems: 1\n      uniqueItems: true\n'}}]);