"use strict";(self.webpackChunkoverture_documentation=self.webpackChunkoverture_documentation||[]).push([[64],{2275:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>d,contentTitle:()=>l,default:()=>u,frontMatter:()=>i,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"getting-data/index","title":"Accessing the Data","description":"Official Overture sources","source":"@site/docs/getting-data/index.mdx","sourceDirName":"getting-data","slug":"/getting-data/","permalink":"/getting-data/","draft":false,"unlisted":false,"tags":[],"version":"current","lastUpdatedAt":1746634414000,"frontMatter":{"title":"Accessing the Data"},"sidebar":"docs","previous":{"title":"Introduction","permalink":"/"},"next":{"title":"DuckDB","permalink":"/getting-data/duckdb"}}');var n=a(74848),s=a(28453),o=a(2594);const i={title:"Accessing the Data"},l=void 0,d={},c=[{value:"Official Overture sources",id:"official-overture-sources",level:2},{value:"Getting only the data you want",id:"getting-only-the-data-you-want",level:3},{value:"Parquet files",id:"parquet-files",level:3},{value:"Quickstart",id:"quickstart",level:2},{value:"AWS CLI",id:"aws-cli",level:3},{value:"AzCopy",id:"azcopy",level:3},{value:"DuckDB",id:"duckdb",level:3},{value:"Python CLI",id:"python-cli",level:3},{value:"Data mirrors",id:"data-mirrors",level:2}];function h(e){const t={a:"a",admonition:"admonition",code:"code",em:"em",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,s.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.h2,{id:"official-overture-sources",children:"Official Overture sources"}),"\n",(0,n.jsx)(t.p,{children:"The Overture Maps Foundation provides free access to its data on Amazon S3 and Microsoft Azure Blob Storage, with no account registration or credentials required."}),"\n",(0,n.jsxs)(t.table,{children:[(0,n.jsx)(t.thead,{children:(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.th,{children:"Provider"}),(0,n.jsx)(t.th,{children:"Location"})]})}),(0,n.jsxs)(t.tbody,{children:[(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"Amazon S3"}),(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"s3://overturemaps-us-west-2/release/<RELEASE>"})})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"Microsoft Azure Blob Storage"}),(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"https://overturemapswestus2.blob.core.windows.net/release/<RELEASE>"})})]})]})]}),"\n",(0,n.jsxs)(t.p,{children:["The latest Overture data ",(0,n.jsx)(t.code,{children:"<RELEASE>"})," is: ",(0,n.jsx)(o.A,{query:"__OVERTURE_RELEASE/",language:"text"})]}),"\n",(0,n.jsx)(t.h3,{id:"getting-only-the-data-you-want",children:"Getting only the data you want"}),"\n",(0,n.jsxs)(t.p,{children:["The base paths above point to all of the data in a particular Overture release, about 500 GigaBytes (GB) worth. Overture partitions the data by ",(0,n.jsx)(t.code,{children:"theme"})," and ",(0,n.jsx)(t.code,{children:"type"}),"; specifying those directories in your path will significantly narrow the universe of data you are trying to access. For example, here's the S3 path to the ",(0,n.jsx)(t.code,{children:"infrastructure"})," feature type in the ",(0,n.jsx)(t.code,{children:"base"})," theme:"]}),"\n",(0,n.jsx)(o.A,{query:"s3://overturemaps-us-west-2/release/__OVERTURE_RELEASE/theme=base/type=infrastructure/*.parquet",language:"text"}),"\n",(0,n.jsx)(t.p,{children:"Let's break down the components in that path:"}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.code,{children:"<RELEASE>"}),": Overture releases data monthly \u2014 following a date-based versioning scheme in the format ",(0,n.jsx)(t.code,{children:"yyyy-mm-dd.x"})," \u2014and maintains an archive of releases on Amazon S3 and Azure Blob Storage"]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.code,{children:"<theme>"}),": one of Overture's six data themes \u2014 addresses, base, buildings, divisions, places, and transportation \u2014 and the first level of partitioning of the data"]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.code,{children:"<type>"}),": a feature type within a theme, e.g. infrastructure within base, and the second level of partitioning of the data |"]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.code,{children:"*.parquet"}),": the file type Overture uses to store and deliver the data, the ",(0,n.jsx)(t.code,{children:"*"})," indicates you want all of the Parquet files in a particular directory"]}),"\n"]}),"\n",(0,n.jsx)(t.h3,{id:"parquet-files",children:"Parquet files"}),"\n",(0,n.jsxs)(t.p,{children:["Overture distributes its data as ",(0,n.jsx)(t.a,{href:"https://geoparquet.org/",children:"GeoParquet"})," files, a column-oriented spatial data format that is a backwards-compatible extension of ",(0,n.jsx)(t.a,{href:"https://parquet.apache.org/",children:"Apache Parquet"}),". Parquet (and GeoParquet) is optimized for cloud-native queries, which means you can efficiently fetch chunks of the data from cloud storage. Instead of extracting one huge data file containing a planet's worth of data, you can scan across the many GeoParquet files in each ",(0,n.jsx)(t.code,{children:"type"})," directory and pull only the data you need. To learn more about GeoParquet, you can consult ",(0,n.jsx)(t.a,{href:"https://guide.cloudnativegeo.org/geoparquet/",children:"this guide"})," from the Cloud Native Geospatial Forum."]}),"\n",(0,n.jsx)(t.h2,{id:"quickstart",children:"Quickstart"}),"\n",(0,n.jsx)(t.p,{children:"Let's go back to the example above with the infrastructure map data. Now that you know the correct path, how do you actually query and download the data? Below are a few examples to get you started quickly."}),"\n",(0,n.jsx)(t.h3,{id:"aws-cli",children:"AWS CLI"}),"\n",(0,n.jsxs)(t.p,{children:["You can install the ",(0,n.jsx)(t.a,{href:"https://docs.aws.amazon.com/cli/latest/userguide/getting-started-install.html",children:"AWS CLI"})," to download the Parquet files from S3 at the command line. Set ",(0,n.jsx)(t.code,{children:"<DESTINATION>"})," to a local directory path to download the files, or to an ",(0,n.jsx)(t.code,{children:"s3://"})," path you control to copy them into your S3 bucket."]}),"\n",(0,n.jsxs)(t.p,{children:["In this example, you can use the AWS CLI to download all nine Parquet files, about one GB of data, in the ",(0,n.jsx)(t.code,{children:"infrastructure"})," feature type to the current working directory on your local drive."]}),"\n",(0,n.jsx)(o.A,{query:"aws s3 cp --no-sign-request --recursive s3://overturemaps-us-west-2/release/__OVERTURE_RELEASE/theme=base/type=infrastructure/ .",language:"text"}),"\n",(0,n.jsxs)(t.p,{children:["Here's another example with the AWS CLI, this time extracting all of the data for the ",(0,n.jsx)(t.code,{children:"building"})," feature type:"]}),"\n",(0,n.jsx)(o.A,{query:"aws s3 cp --no-sign-request --recursive s3://overturemaps-us-west-2/release/__OVERTURE_RELEASE/theme=buildings/type=building/ .",language:"text"}),"\n",(0,n.jsxs)(t.p,{children:["This will download 200 GeoParquet files containing all of the ",(0,n.jsx)(t.code,{children:"building"})," feature type data around the world \u2014 that's more than 230 GB of data!"]}),"\n",(0,n.jsx)(t.admonition,{type:"tip",children:(0,n.jsxs)(t.p,{children:["If you'd like to query the data directly on the AWS platform, please read our documentation about setting up an Overture data catalog on ",(0,n.jsx)(t.a,{href:"athena-aws",children:"Athena"}),". You'll need an AWS account secured with a credit card."]})}),"\n",(0,n.jsx)(t.h3,{id:"azcopy",children:"AzCopy"}),"\n",(0,n.jsxs)(t.p,{children:["You can download the files from Azure Blob Storage directly using ",(0,n.jsx)(t.a,{href:"https://azure.microsoft.com/en-us/products/storage/storage-explorer/",children:"Azure Storage Explorer"})," or by installing Microsoft's ",(0,n.jsx)(t.a,{href:"https://learn.microsoft.com/en-us/azure/storage/common/storage-use-azcopy-v10?toc=%2Fazure%2Fstorage%2Fblobs%2Ftoc.json&bc=%2Fazure%2Fstorage%2Fblobs%2Fbreadcrumb%2Ftoc.json#download-azcopy",children:"AzCopy"})," command-line tool. Here's how you would use the",(0,n.jsx)(t.code,{children:"azcopy"})," command to grab all of the ",(0,n.jsx)(t.code,{children:"place"})," data:"]}),"\n",(0,n.jsx)(o.A,{query:'azcopy copy "https://overturemapswestus2.dfs.core.windows.net/release/__OVERTURE_RELEASE/theme=places/type=place/" "<<local directory path>>"  --recursive',language:"text"}),"\n",(0,n.jsx)(t.admonition,{type:"tip",children:(0,n.jsxs)(t.p,{children:["You can read more about querying with the data directly in ",(0,n.jsx)(t.a,{href:"synapse-azure",children:"Azure using Synapse"}),". You'll need an account backed by a credit card to do this."]})}),"\n",(0,n.jsx)(t.h3,{id:"duckdb",children:"DuckDB"}),"\n",(0,n.jsxs)(t.p,{children:[(0,n.jsx)(t.a,{href:"duckdb",children:"DuckDB"})," is one of our favorite tools for querying the data and downloading only what you need. We have a full page of example queries here; we'll give you one quick example below."]}),"\n",(0,n.jsx)(t.p,{children:"Let's say you don't want the entire buildings dataset for the planet. With DuckDB, you can scan the Parquet files in the S3 bucket and extract only the data for a particular area of interest:"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-sql",children:"install spatial;\nload spatial;\nCOPY(                             \n      SELECT\n         id, -- GERS ID\n         names.primary as name,\n         confidence,\n         CAST(socials AS JSON) as socials, -- serialize property to JSON\n         geometry -- DuckDB understands the geometry type\n      FROM read_parquet('s3://overturemaps-us-west-2/release/2025-04-23.0/theme=places/type=place/*', filename=true, hive_partitioning=1)\n      WHERE categories.primary = 'pizza_restaurant'\n      AND bbox.xmin BETWEEN -75 AND -73  AND bbox.ymin BETWEEN 40 AND 41 -- with point geometries you only need the bbox min values\n  \n  ) TO 'nyc_pizza.geojson' WITH (FORMAT GDAL, DRIVER 'GeoJSON');\n"})}),"\n",(0,n.jsxs)(t.p,{children:["Alternatively, you can put your query in a SQL file and run ",(0,n.jsx)(t.code,{children:"duckdb -f query.sql"})," at the command line."]}),"\n",(0,n.jsx)(t.h3,{id:"python-cli",children:"Python CLI"}),"\n",(0,n.jsxs)(t.p,{children:["Overture also offers its own ",(0,n.jsx)(t.a,{href:"overturemaps-py",children:"Python CLI"})," for downloading data at the command line."]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{children:"$ overturemaps download --bbox=-75,40,-73,41 -f geojson --type=building -o nyc_buildings.geojson\n"})}),"\n",(0,n.jsx)(t.h2,{id:"data-mirrors",children:"Data mirrors"}),"\n",(0,n.jsxs)(t.p,{children:["In addition to the official sources maintained by the Overture Maps Foundation, several ",(0,n.jsx)(t.em,{children:"friends of Overture"})," are maintaining mirrors of the data on these platforms:"]}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsx)(t.li,{children:"Wherobots public data catalog"}),"\n",(0,n.jsx)(t.li,{children:(0,n.jsx)(t.a,{href:"data-mirrors/databricks",children:"Databricks"})}),"\n",(0,n.jsx)(t.li,{children:(0,n.jsx)(t.a,{href:"data-mirrors/snowflake",children:"Snowflake"})}),"\n",(0,n.jsx)(t.li,{children:(0,n.jsx)(t.a,{href:"data-mirrors/bigquery",children:"Bigquery"})}),"\n",(0,n.jsx)(t.li,{children:(0,n.jsx)(t.a,{href:"data-mirrors/fused",children:"Fused"})}),"\n",(0,n.jsx)(t.li,{children:"Source Cooperative"}),"\n"]}),"\n",(0,n.jsx)(t.p,{children:"These are community-maintained resources. These mirrors may offer different access patterns, additional tooling, or other platform-specific benefits. Please consult the documentation for details."})]})}function u(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(h,{...e})}):h(e)}},2594:(e,t,a)=>{a.d(t,{A:()=>o});var r=a(58069),n=a(40797),s=a(74848);function o(e){const{siteConfig:{customFields:t}}=(0,n.A)();var a=e.query.replaceAll("__OVERTURE_RELEASE",t.overtureRelease);a=(a=a.replaceAll("__ATHENA_OVERTURE_RELEASE","v"+t.overtureRelease.replaceAll(".","_").replaceAll("-","_"))).replaceAll("__PMTILES_OVERTURE_RELEASE",t.overtureRelease.split(".",1));var o=e.language||"sql";return(0,s.jsx)(r.default,{language:o,title:e.title,children:a})}}}]);