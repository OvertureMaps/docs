"use strict";(self.webpackChunkoverture_documentation=self.webpackChunkoverture_documentation||[]).push([[9014],{8959:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>d,default:()=>h,frontMatter:()=>u,metadata:()=>m,toc:()=>p});var a=t(5893),r=t(1151),i=t(8859);const s="LOAD spatial;\nLOAD azure;\nSET azure_storage_connection_string = 'DefaultEndpointsProtocol=https;AccountName=overturemapswestus2;AccountKey=;EndpointSuffix=core.windows.net';\n\nSELECT\n  id,\n  names.primary as primary_name,\n  height,\n  ST_GeomFromWKB(geometry) as geometry\nFROM read_parquet('azure://release/__OVERTURE_RELEASE/theme=buildings/type=*/*', filename=true, hive_partitioning=1)\nWHERE primary_name IS NOT NULL\nAND bbox.xmin > -84.36\nAND bbox.xmax < -82.42\nAND bbox.ymin > 41.71\nAND bbox.ymax < 43.33;\n",o="LOAD spatial;\nLOAD httpfs;\nSET s3_region='us-west-2';\n\nCOPY(\n    SELECT\n       id,\n       names.primary as primary_name,\n       bbox.xmin as x,\n       bbox.ymin as y,\n       ST_GeomFromWKB(geometry) as geometry,\n       categories.main as main_category,\n       sources[1].dataset AS primary_source,\n       confidence\n    FROM read_parquet('s3://overturemaps-us-west-2/release/__OVERTURE_RELEASE/theme=places/type=*/*', filename=true, hive_partitioning=1)\n    WHERE main_category = 'mountain' AND confidence > .90\n    ORDER BY confidence DESC\n) TO 'overture_places_mountains_gt90.geojson'\nWITH (FORMAT GDAL, DRIVER 'GeoJSON');\n",l="LOAD httpfs;\nLOAD spatial;\nSET s3_region='us-west-2';\n\nCREATE OR REPLACE VIEW admins_view AS (\n    SELECT\n        *\n    FROM\n        read_parquet('s3://overturemaps-us-west-2/release/2024-04-16-beta.0/theme=admins/type=*/*', filename=true, hive_partitioning=1)\n);\n\nCOPY (\n    SELECT\n            admins.id,\n            admins.subtype,\n            admins.iso_country_code_alpha_2,\n            names.primary AS primary_name,\n            sources[1].dataset AS primary_source,\n            areas.area_id,\n            ST_GeomFromWKB(areas.area_geometry) as geometry\n    FROM admins_view AS admins\n    INNER JOIN (\n        SELECT\n            id as area_id,\n            locality_id,\n            geometry AS area_geometry\n        FROM admins_view\n    ) AS areas ON areas.locality_id == admins.id\n    WHERE admins.admin_level = 1\n) TO 'countries.geojson'\nWITH (FORMAT GDAL, DRIVER 'GeoJSON');\n",u={title:"More Queries"},d=void 0,m={id:"getting-data/more-queries",title:"More Queries",description:"DuckDB",source:"@site/docs/getting-data/more-queries.mdx",sourceDirName:"getting-data",slug:"/getting-data/more-queries",permalink:"/getting-data/more-queries",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{title:"More Queries"},sidebar:"docs",previous:{title:"Extracting Data Locally",permalink:"/getting-data/locally"},next:{title:"Python Command-line Tool",permalink:"/getting-data/overturemaps-py"}},c={},p=[{value:"DuckDB",id:"duckdb",level:2},{value:"Buildings in Detroit",id:"buildings-in-detroit",level:3},{value:"Mountains",id:"mountains",level:3},{value:"Country polygons",id:"country-polygons",level:3}];function g(e){const n={a:"a",code:"code",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,r.a)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.h2,{id:"duckdb",children:"DuckDB"}),"\n",(0,a.jsx)(n.h3,{id:"buildings-in-detroit",children:"Buildings in Detroit"}),"\n",(0,a.jsx)(n.p,{children:"This query pulls building geometries and selected attributes from the Overture buildings dataset for an area in Detroit."}),"\n",(0,a.jsx)(i.Z,{query:s}),"\n",(0,a.jsx)(n.h3,{id:"mountains",children:"Mountains"}),"\n",(0,a.jsx)(n.p,{children:"This query selects POIs in the mountain category from the Overture places dataset and outputs them to a GeoJSON file."}),"\n",(0,a.jsx)(i.Z,{query:o}),"\n",(0,a.jsx)(n.p,{children:"Tip: to write the data to a shapefile, replace the last 2 lines with:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-sql",children:"    ) TO 'overture_places_mountains_gt90.shp'\nWITH (FORMAT GDAL, DRIVER 'ESRI Shapefile');\n"})}),"\n",(0,a.jsx)(n.h3,{id:"country-polygons",children:"Country polygons"}),"\n",(0,a.jsxs)(n.p,{children:["This query grabs country-level geometries and their attributes from the admins dataset and outputs them to a GeoJSON file. See ",(0,a.jsx)(n.a,{href:"https://gist.github.com/danabauer/c50979ead5ce33669ff6c47bfa915319",children:"here for examples"})," showing the schema changes for this dataset from July 2023 to February 2024 and beyond."]}),"\n",(0,a.jsx)(i.Z,{query:l})]})}function h(e={}){const{wrapper:n}={...(0,r.a)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(g,{...e})}):g(e)}},8859:(e,n,t)=>{t.d(n,{Z:()=>s});var a=t(9286),r=t(2263),i=t(5893);function s(e){const{siteConfig:{customFields:n}}=(0,r.Z)();var t=e.query.replace("__OVERTURE_RELEASE",n.overtureRelease);t=t.replace("__ATHENA_OVERTURE_RELEASE","v"+n.overtureRelease.replaceAll(".","_").replaceAll("-","_"));var s=e.language||"sql";return(0,i.jsx)(a.Z,{language:s,title:e.title,children:t})}}}]);