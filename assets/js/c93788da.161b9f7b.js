"use strict";(self.webpackChunkoverture_how_to=self.webpackChunkoverture_how_to||[]).push([[779],{7348:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>l,contentTitle:()=>r,default:()=>m,frontMatter:()=>t,metadata:()=>o,toc:()=>d});var a=s(5893),i=s(1151);const t={title:"Example Queries"},r=void 0,o={id:"accessing-data/example-queries",title:"Example Queries",description:"DuckDB",source:"@site/docs/accessing-data/example-queries.mdx",sourceDirName:"accessing-data",slug:"/accessing-data/example-queries",permalink:"/how-to/accessing-data/example-queries",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{title:"Example Queries"},sidebar:"docs",previous:{title:"Querying Data Locally",permalink:"/how-to/accessing-data/locally"},next:{title:"Exploring Overture Data",permalink:"/how-to/exploring-data/"}},l={},d=[{value:"DuckDB",id:"duckdb",level:2},{value:"100 Buildings",id:"100-buildings",level:3},{value:"Places in Seattle",id:"places-in-seattle",level:3},{value:"Administrative Boundaries",id:"administrative-boundaries",level:3}];function c(e){const n={code:"code",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,i.a)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.h2,{id:"duckdb",children:"DuckDB"}),"\n",(0,a.jsx)(n.h3,{id:"100-buildings",children:"100 Buildings"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-sql",children:"LOAD httpfs;\nLOAD spatial;\n\nCOPY (\n    SELECT\n        type,\n        version,\n        CAST(updatetime as varchar) as updateTime,\n        height,\n        numfloors as numFloors,\n        level,\n        class,\n        JSON(names) as names,\n        JSON(sources) as sources,\n        ST_GeomFromWKB(geometry) as geometry\n    FROM\n        read_parquet('s3://overturemaps-us-west-2/release/<release-version>/theme=buildings/type=*/*', hive_partitioning=1)\n    LIMIT\n        100\n    ) TO 'buildings_sample.geojsonseq'\nWITH (FORMAT GDAL, DRIVER 'GeoJSONSeq');\n"})}),"\n",(0,a.jsx)(n.h3,{id:"places-in-seattle",children:"Places in Seattle"}),"\n",(0,a.jsx)(n.p,{children:"This will create a 5mb GeoJSONSeq file with 23k places in Seattle."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-sql",children:"LOAD httpfs;\nLOAD spatial;\n\nCOPY (\n    SELECT\n       id,\n       updatetime,\n       version,\n       CAST(names AS JSON) AS names,\n       CAST(categories AS JSON) AS categories,\n       confidence,\n       CAST(websites AS JSON) AS websites,\n       CAST(socials AS JSON) AS socials,\n       CAST(emails AS JSON) AS emails,\n       CAST(phones AS JSON) AS phones,\n       CAST(brand AS JSON) AS brand,\n       CAST(addresses AS JSON) AS addresses,\n       CAST(sources AS JSON) AS sources,\n       ST_GeomFromWKB(geometry)\n    FROM\n       read_parquet('s3://overturemaps-us-west-2/release/<release-version>/theme=places/type=*/*', hive_partitioning=1)\n    WHERE\n        bbox.minx > -122.4447744\n        AND bbox.maxx < -122.2477071\n        AND bbox.miny > 47.5621587\n        AND bbox.maxy < 47.7120663\n    ) TO 'places_seattle.geojsonseq'\nWITH (FORMAT GDAL, DRIVER 'GeoJSONSeq', SRS 'EPSG:4326');\n"})}),"\n",(0,a.jsx)(n.p,{children:"Tip: To write the data to a shapefile, replace the last 2 lines with:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-sql",children:"      ) TO 'places_seattle.shp'\n   WITH (FORMAT GDAL, DRIVER 'ESRI Shapefile');\n"})}),"\n",(0,a.jsx)(n.h3,{id:"administrative-boundaries",children:"Administrative Boundaries"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-sql",children:"LOAD httpfs;\nLOAD spatial;\n\nCREATE VIEW admins_view AS\nSELECT * FROM read_parquet('s3://overturemaps-us-west-2/release/<release-version>/theme=admins/type=*/*', filename=true, hive_partitioning=1);\n\nCOPY (\n    SELECT\n            admins.id,\n            admins.subType,\n            admins.isoCountryCodeAlpha2,\n            JSON(admins.names) AS names,\n            JSON(admins.sources) AS sources,\n            areas.areaId,\n            ST_GeomFromWKB(areas.areaGeometry) as geometry\n    FROM admins_view AS admins\n    INNER JOIN (\n        SELECT \n            id as areaId, \n            localityId, \n            geometry AS areaGeometry\n        FROM admins_view\n    ) AS areas ON areas.localityId == admins.id\n    WHERE admins.adminLevel = 2\n    LIMIT 10    \n) TO 'admins_sample.geojsonseq'\nWITH (FORMAT GDAL, DRIVER 'GeoJSON');\n"})})]})}function m(e={}){const{wrapper:n}={...(0,i.a)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(c,{...e})}):c(e)}},1151:(e,n,s)=>{s.d(n,{Z:()=>o,a:()=>r});var a=s(7294);const i={},t=a.createContext(i);function r(e){const n=a.useContext(t);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),a.createElement(t.Provider,{value:n},e.children)}}}]);