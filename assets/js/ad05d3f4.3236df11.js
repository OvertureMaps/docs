"use strict";(self.webpackChunkoverture_documentation=self.webpackChunkoverture_documentation||[]).push([[6124],{8855:(e,t,i)=>{i.r(t),i.d(t,{assets:()=>h,contentTitle:()=>d,default:()=>g,frontMatter:()=>l,metadata:()=>o,toc:()=>c});var n=i(74848),s=i(28453),r=i(11470),a=i(19365);const l={title:"3D Parts"},d="Creating Building Parts from OpenStreetMap Data",o={id:"schema/concepts/by-theme/buildings/3d_buildings",title:"3D Parts",description:"In Overture, 3D building parts must be associated with specific buildings. This relationship is captured in the schema where the building's attribute hasparts is True and each of the **buildingpart features has a building_id pointing to the id of the building it belongs to.",source:"@site/docs/schema/concepts/by-theme/buildings/3d_buildings.mdx",sourceDirName:"schema/concepts/by-theme/buildings",slug:"/schema/concepts/by-theme/buildings/3d_buildings",permalink:"/schema/concepts/by-theme/buildings/3d_buildings",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{title:"3D Parts"},sidebar:"schema",previous:{title:"Buildings",permalink:"/schema/concepts/by-theme/buildings/"},next:{title:"Places",permalink:"/schema/concepts/by-theme/places/"}},h={},c=[{value:"Considerations",id:"considerations",level:3},{value:"Known Issues",id:"known-issues",level:3}];function u(e){const t={code:"code",h1:"h1",h3:"h3",hr:"hr",li:"li",ol:"ol",p:"p",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.h1,{id:"creating-building-parts-from-openstreetmap-data",children:"Creating Building Parts from OpenStreetMap Data"}),"\n",(0,n.jsxs)(t.p,{children:["In Overture, 3D building parts must be associated with specific buildings. This relationship is captured in the schema where the ",(0,n.jsx)(t.strong,{children:"building"}),"'s attribute ",(0,n.jsx)(t.code,{children:"has_parts"})," is True and each of the ",(0,n.jsx)(t.strong,{children:"building_part"})," features has a ",(0,n.jsx)(t.code,{children:"building_id"})," pointing to the ",(0,n.jsx)(t.code,{children:"id"})," of the ",(0,n.jsx)(t.code,{children:"building"})," it belongs to."]}),"\n",(0,n.jsxs)(t.p,{children:["Although OpenStreetMap (OSM) offers a building relation (relations with ",(0,n.jsx)(t.code,{children:"type=building"}),") to help facilitate this association, it is seldom utilized. We therefore perform 2 steps to associate a building_part to a building:"]}),"\n",(0,n.jsxs)(r.default,{children:[(0,n.jsx)(a.default,{value:"1. Explicit Assignment (relations)",children:(0,n.jsxs)(t.ol,{children:["\n",(0,n.jsxs)(t.li,{children:["Identify OSM relations with ",(0,n.jsx)(t.code,{children:"type=building"})," that contain exactly one member with ",(0,n.jsx)(t.code,{children:"role=outline"})," and at least one member with ",(0,n.jsx)(t.code,{children:"role=part"}),"."]}),"\n",(0,n.jsxs)(t.li,{children:["Ensure the outline is either a way or a multipolygon relation with valid geometry. This is becomes a ",(0,n.jsx)(t.strong,{children:"building"})," type with ",(0,n.jsx)(t.code,{children:"has_parts=True"}),"."]}),"\n",(0,n.jsxs)(t.li,{children:["Assign the ",(0,n.jsx)(t.code,{children:"building_id"})," of the outline to each ",(0,n.jsx)(t.code,{children:"role=part"})," feature, these are of ",(0,n.jsx)(t.strong,{children:"building_part"})," type features."]}),"\n",(0,n.jsxs)(t.li,{children:["Identify any other ",(0,n.jsx)(t.strong,{children:"building_part"})," features that are spatially contained by the building outline and assign the ",(0,n.jsx)(t.code,{children:"building_id"})," to them, even if they are not listed explicitly in the relation's members list."]}),"\n"]})}),(0,n.jsx)(a.default,{value:"2. Implicit Assignment (spatial containment)",children:(0,n.jsxs)(t.ol,{children:["\n",(0,n.jsx)(t.li,{children:"Ignore any outlines/parts ways/relations that were assigned in the explicit method."}),"\n",(0,n.jsxs)(t.li,{children:["Identify all ways or ",(0,n.jsx)(t.code,{children:"type=multipolygon"})," relations with a ",(0,n.jsx)(t.code,{children:"building"}),' tag not equal to "no" as a ',(0,n.jsx)(t.strong,{children:"building"}),"."]}),"\n",(0,n.jsxs)(t.li,{children:["Identify all ways or ",(0,n.jsx)(t.code,{children:"type=multipolygon"})," relations with a ",(0,n.jsx)(t.code,{children:"building:part"}),' tag not equal to "no" as a ',(0,n.jsx)(t.strong,{children:"building_part"}),"."]}),"\n",(0,n.jsxs)(t.li,{children:["Perform a spatial join to find all ",(0,n.jsx)(t.strong,{children:"building"})," features (from step 2) that completely contain at least one ",(0,n.jsx)(t.strong,{children:"building_part"})," feature (from step 3).","\n",(0,n.jsxs)(t.ol,{children:["\n",(0,n.jsxs)(t.li,{children:["Assign ",(0,n.jsx)(t.code,{children:"has_parts=True"})," to each ",(0,n.jsx)(t.strong,{children:"building"})," and add the corresponding ",(0,n.jsx)(t.code,{children:"building_id"})," to each ",(0,n.jsx)(t.strong,{children:"building_part"}),"."]}),"\n"]}),"\n"]}),"\n",(0,n.jsx)(t.li,{children:"Omit any parts that are not contained by an outline, as Overture does not allow orphaned parts without a known parent."}),"\n"]})})]}),"\n",(0,n.jsx)(t.hr,{}),"\n",(0,n.jsxs)(t.p,{children:["Finally, we eliminate all parts that are the only part associated with a building and share the same geometry as the building. This step helps filter out many OSM buildings tagged with both ",(0,n.jsx)(t.code,{children:"building=yes"})," and ",(0,n.jsx)(t.code,{children:"building:part=yes"})," if no other parts are associated with the building."]}),"\n",(0,n.jsx)(t.h3,{id:"considerations",children:"Considerations"}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsx)(t.li,{children:"Geometric Accuracy: Due to discrepancies in how spatial functions interpret containment across different query engines, a small buffer might be applied to the building geometry to ensure parts are appropriately included."}),"\n",(0,n.jsx)(t.li,{children:"Data Integrity: Ensure that all data manipulations preserve the integrity and accuracy of the original OSM data, adhering to both Overture and OSM standards."}),"\n"]}),"\n",(0,n.jsx)(t.h3,{id:"known-issues",children:"Known Issues"}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsxs)(t.li,{children:["Dual Representation: OSM features with both ",(0,n.jsx)(t.code,{children:"building"})," and ",(0,n.jsx)(t.code,{children:"building:part"})," tags are considered both an outline and a part, resulting in two separate Overture features (a ",(0,n.jsx)(t.code,{children:"type=building"})," and a ",(0,n.jsx)(t.code,{children:"type=building_part"}),") referring to the same OSM object. Although they are the same OSM object, they will be represented in Overture as two separate objects with different IDs."]}),"\n",(0,n.jsxs)(t.li,{children:["Ambiguous Height Tags: When ",(0,n.jsx)(t.code,{children:"type=multipolygon"})," and ",(0,n.jsx)(t.code,{children:"building:part=yes"}),", it is impossible to determine what the ",(0,n.jsx)(t.code,{children:"height"})," tag refers to. It may refer to the height of the entire building (the highest point of all parts) as stated in the OSM wiki, or in some cases, it refers to the height of the part. It is recommended to either remove the ",(0,n.jsx)(t.code,{children:"height"})," from such features or split the features into a building and a separate part feature and assign the proper height to each. In these cases, Overture will assume the height is the height of the building as stated in the wiki."]}),"\n",(0,n.jsxs)(t.li,{children:["Tag Ambiguity: When ",(0,n.jsx)(t.code,{children:"type=multipolygon"})," and ",(0,n.jsx)(t.code,{children:"building:part=yes"}),", it is impossible to know whether the characteristic tags refer to the building or the building part. It is recommended to either remove the tags from such features or split the features into a building and a separate part feature and assign the proper tags to each. In these cases, Overture will assume that each tag refers to both."]}),"\n"]})]})}function g(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(u,{...e})}):u(e)}}}]);