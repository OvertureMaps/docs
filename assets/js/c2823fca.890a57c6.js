"use strict";(self.webpackChunkoverture_documentation=self.webpackChunkoverture_documentation||[]).push([[1001],{70736:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>c,frontMatter:()=>i,metadata:()=>o,toc:()=>d});var a=n(74848),r=n(28453);const i={title:"Global Entity Reference System (GERS)",slug:"/gers"},s=void 0,o={id:"gers/index",title:"Global Entity Reference System (GERS)",description:"Understanding GERS",source:"@site/docs/gers/index.mdx",sourceDirName:"gers",slug:"/gers",permalink:"/gers",draft:!1,unlisted:!1,tags:[],version:"current",lastUpdatedAt:1720968271e3,frontMatter:{title:"Global Entity Reference System (GERS)",slug:"/gers"},sidebar:"docs",previous:{title:"Transportation",permalink:"/guides/transportation"},next:{title:"Stability by Feature Type",permalink:"/gers/stability"}},l={},d=[{value:"Understanding GERS",id:"understanding-gers",level:2},{value:"What does an Overture ID look like?",id:"what-does-an-overture-id-look-like",level:2},{value:"Stability and traceability",id:"stability-and-traceability",level:2},{value:"Using GERS",id:"using-gers",level:2}];function u(e){const t={a:"a",code:"code",h2:"h2",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.h2,{id:"understanding-gers",children:"Understanding GERS"}),"\n",(0,a.jsxs)(t.p,{children:["The Global Entity Reference System (GERS) is a framework for structuring, encoding, and matching map data to a shared universal reference. All features in Overture have a unique ID, and for some feature types those unique IDs, called Overture IDs, are registered to GERS and are intended to be ",(0,a.jsx)(t.a,{href:"stability",children:"stable"}),"."]}),"\n",(0,a.jsx)(t.p,{children:"GERS provides a mechanism to match features across datasets. For example, multiple building features that each represent the footprint of the Empire State Building can be matched by ID if those features reference the same ID in GERS."}),"\n",(0,a.jsx)(t.h2,{id:"what-does-an-overture-id-look-like",children:"What does an Overture ID look like?"}),"\n",(0,a.jsxs)(t.p,{children:["An Overture ID is 128 bits. In this example, you can see five unique IDs for building features from the June 2024 data release. ",(0,a.jsx)(t.a,{href:"stability",children:"The IDs for the building feature type are registered to GERS"}),"."]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-sql",children:"D SET s3_region='us-west-2';\nD SELECT id FROM read_parquet('s3://overturemaps-us-west-2/release/2024-06-13-beta.0/theme=buildings/type=buiding/*', filename=true, hive_partitioning=1) limit 5;\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                id                \u2502\n\u2502             varchar              \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 08bf2a40219b0fff0200c394dae731bd \u2502\n\u2502 08bf35ad6a05afff0200e90ab3b011fa \u2502\n\u2502 08bf35ad6a058fff020009945ce09d65 \u2502\n\u2502 08bf35ad6a04efff02006264a736fc56 \u2502\n\u2502 08bf35ad6a04afff0200cf5e511a3f1b \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502             5 rows               \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n"})}),"\n",(0,a.jsx)(t.h2,{id:"stability-and-traceability",children:"Stability and traceability"}),"\n",(0,a.jsxs)(t.p,{children:["Unique IDs registered to GERS are intended to be ",(0,a.jsx)(t.a,{href:"stability",children:"stable"})," \u2014 within a reasonable tolerance of error \u2014 across multiple Overture releases. When stability is not possible, we will attempt to provide traceability in a ",(0,a.jsx)(t.a,{href:"changelog",children:"GERS changelog"}),". For example:"]}),"\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsx)(t.li,{children:"a single road segment is bisected by a new road and becomes two road segments: 1 unique ID \u2192 2 new unique IDs;"}),"\n",(0,a.jsx)(t.li,{children:"a large building footprint is determined to be four smaller buildings when a higher resolution dataset becomes available: 1 unique ID \u2192 4 new unique ID;"}),"\n",(0,a.jsx)(t.li,{children:"a building is shifted 10 meters to the west when higher resolution imagery is made available: the unique ID is preserved for that feature."}),"\n"]}),"\n",(0,a.jsx)(t.h2,{id:"using-gers",children:"Using GERS"}),"\n",(0,a.jsx)(t.p,{children:"Here are two broad examples of using GERS."}),"\n",(0,a.jsxs)(t.ol,{children:["\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.strong,{children:"Associating data."})," You can independently associate your own data or third-party data to Overture data. If features in your dataset match features in an Overture dataset, you can assign existing Overture IDs to the matched features. Your data is now GERS-enabled data, ready to be associated via Overture ID to any other GERS-enabled dataset in the Overture ecosystem."]}),"\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.strong,{children:"Contributing data."})," If an organization contributes data to the Overture Maps Foundation, our engineering team will match the features in that dataset to features in Overture. Matched features may be assigned an existing Overture ID, and we may generate new Overture IDs for new features."]}),"\n"]})]})}function c(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(u,{...e})}):u(e)}},28453:(e,t,n)=>{n.d(t,{R:()=>s,x:()=>o});var a=n(96540);const r={},i=a.createContext(r);function s(e){const t=a.useContext(i);return a.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),a.createElement(i.Provider,{value:t},e.children)}}}]);