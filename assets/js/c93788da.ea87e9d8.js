"use strict";(self.webpackChunkoverture_how_to=self.webpackChunkoverture_how_to||[]).push([[779],{3949:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>m,contentTitle:()=>d,default:()=>g,frontMatter:()=>u,metadata:()=>c,toc:()=>p});var t=a(5893),r=a(1151),s=a(8859);const i="LOAD spatial;\nLOAD azure;\nSET azure_storage_connection_string = 'DefaultEndpointsProtocol=https;AccountName=overturemapswestus2;AccountKey=;EndpointSuffix=core.windows.net';\n\n\nSELECT\n  id,\n  names.primary as primary_name,\n  height,\n  ST_GeomFromWKB(geometry) as geometry\nFROM read_parquet('azure://release/2024-02-15-alpha.0/theme=buildings/type=*/*', filename=true, hive_partitioning=1)\nWHERE primary_name IS NOT NULL \nAND bbox.minX > -84.363175999999953\nAND bbox.maxX < -82.418395999999973\nAND bbox.minY > 41.706621000000041\nAND bbox.maxY < 43.327039000000070\nLIMIT 5;\n",o="LOAD spatial;\nLOAD httpfs;\nSET s3_region='us-west-2';\n\nCOPY(\n    SELECT \n       id,\n       names.primary as primary_name,\n       bbox.minx as x,\n       bbox.miny as y,\n       ST_GeomFromWKB(geometry) as geometry,\n       categories.main as main_category,\n       sources[1].dataset AS primary_source,\n       confidence\n    FROM read_parquet('s3://overturemaps-us-west-2/release/2024-02-15-alpha.0/theme=places/type=*/*', filename=true, hive_partitioning=1)\n    WHERE main_category = 'mountain' AND confidence > .90\n    ORDER BY confidence DESC\n) TO 'overture_places_mountains_gt90.geojson'\nWITH (FORMAT GDAL, DRIVER 'GeoJSON');",l="LOAD httpfs;\nLOAD spatial;\nSET s3_region='us-west-2';\n\nCREATE VIEW admins_view AS (\n    SELECT\n        *\n    FROM\n        read_parquet('s3://overturemaps-us-west-2/release/2024-02-15-alpha.0/theme=admins/type=*/*', filename=true, hive_partitioning=1)\n);\nCOPY (\n    SELECT\n            admins.id,\n            admins.subType,\n            admins.isoCountryCodeAlpha2,\n            names.primary AS primary_name,\n            sources[1].dataset AS primary_source,\n            areas.areaId,\n            ST_GeomFromWKB(areas.areaGeometry) as geometry\n    FROM admins_view AS admins\n    INNER JOIN (\n        SELECT\n            id as areaId,\n            localityId,\n            geometry AS areaGeometry\n        FROM admins_view\n    ) AS areas ON areas.localityId == admins.id\n    WHERE admins.adminLevel = 1\n) TO 'countries.geojson'\nWITH (FORMAT GDAL, DRIVER 'GeoJSON');",u={title:"Example Queries"},d=void 0,c={id:"accessing-data/example-queries",title:"Example Queries",description:"DuckDB",source:"@site/docs/accessing-data/example-queries.mdx",sourceDirName:"accessing-data",slug:"/accessing-data/example-queries",permalink:"/how-to/accessing-data/example-queries",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{title:"Example Queries"},sidebar:"docs",previous:{title:"Querying Data Locally",permalink:"/how-to/accessing-data/locally"},next:{title:"Exploring Overture Data",permalink:"/how-to/exploring-data/"}},m={},p=[{value:"DuckDB",id:"duckdb",level:2},{value:"Buildings in Detroit",id:"buildings-in-detroit",level:3},{value:"Confident Mountains",id:"confident-mountains",level:3},{value:"Country Polygons",id:"country-polygons",level:3}];function h(e){const n={a:"a",code:"code",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,r.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h2,{id:"duckdb",children:"DuckDB"}),"\n",(0,t.jsx)(n.h3,{id:"buildings-in-detroit",children:"Buildings in Detroit"}),"\n",(0,t.jsx)(n.p,{children:"This query pulls building geometries and selected attributes from the Overture buildings dataset for an area in Detroit."}),"\n",(0,t.jsx)(s.Z,{query:i}),"\n",(0,t.jsx)(n.h3,{id:"confident-mountains",children:"Confident Mountains"}),"\n",(0,t.jsx)(n.p,{children:"This query selects POIs in the mountain category from the Overture places dataset and outputs them to a GeoJSON file."}),"\n",(0,t.jsx)(s.Z,{query:o}),"\n",(0,t.jsx)(n.p,{children:"Tip: to write the data to a shapefile, replace the last 2 lines with:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",children:"    ) TO 'overture_places_mountains_gt90.shp'\nWITH (FORMAT GDAL, DRIVER 'ESRI Shapefile');\n"})}),"\n",(0,t.jsx)(n.h3,{id:"country-polygons",children:"Country Polygons"}),"\n",(0,t.jsxs)(n.p,{children:["This query grabs country-level geometries and their attributes from the admins dataset and outputs them to a GeoJSON file. See ",(0,t.jsx)(n.a,{href:"https://gist.github.com/danabauer/c50979ead5ce33669ff6c47bfa915319",children:"here for examples"})," showing the schema changes for this dataset from July 2023 to February 2024 and beyond."]}),"\n",(0,t.jsx)(s.Z,{query:l})]})}function g(e={}){const{wrapper:n}={...(0,r.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(h,{...e})}):h(e)}},8859:(e,n,a)=>{a.d(n,{Z:()=>i});var t=a(9286),r=a(2263),s=a(5893);function i(e){const{siteConfig:{customFields:n}}=(0,r.Z)();var a=e.query.replace("__OVERTURE_RELEASE",n.overtureRelease);a=a.replace("__ATHENA_OVERTURE_RELEASE","v"+n.overtureRelease.replaceAll(".","_").replaceAll("-","_"));var i=e.language||"sql";return(0,s.jsx)(t.Z,{language:i,title:e.title,children:a})}}}]);