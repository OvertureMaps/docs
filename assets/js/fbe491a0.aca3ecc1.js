"use strict";(self.webpackChunkoverture_documentation=self.webpackChunkoverture_documentation||[]).push([[3373],{2594:(e,n,a)=>{a.d(n,{A:()=>o});var t=a(58069),s=a(40797),i=a(74848);function o(e){const{siteConfig:{customFields:n}}=(0,s.A)();var a=e.query.replaceAll("__OVERTURE_RELEASE",n.overtureRelease);a=(a=a.replaceAll("__ATHENA_OVERTURE_RELEASE","v"+n.overtureRelease.replaceAll(".","_").replaceAll("-","_"))).replaceAll("__PMTILES_OVERTURE_RELEASE",n.overtureRelease.split(".",1));var o=e.language||"sql";return(0,i.jsx)(t.default,{language:o,title:e.title,children:a})}},13154:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>y,contentTitle:()=>b,default:()=>A,frontMatter:()=>g,metadata:()=>t,toc:()=>v});const t=JSON.parse('{"id":"getting-data/duckdb","title":"DuckDB","description":"DuckDB is powerful analytics tool that allows you to query remote files and download only the data you want. You\'ll need to install at least DuckDB 1.1.0, which supports reading and writing geoparquet.","source":"@site/docs/getting-data/duckdb.mdx","sourceDirName":"getting-data","slug":"/getting-data/duckdb","permalink":"/getting-data/duckdb","draft":false,"unlisted":false,"tags":[],"version":"current","lastUpdatedAt":1752180088000,"frontMatter":{"title":"DuckDB"},"sidebar":"docs","previous":{"title":"Accessing the Data","permalink":"/getting-data/"},"next":{"title":"Python CLI","permalink":"/getting-data/overturemaps-py"}}');var s=a(74848),i=a(28453),o=a(65537),r=a(79329),l=a(2594);const d="LOAD spatial; -- noqa\n\nSET s3_region='us-west-2';\n\nCOPY(\n  SELECT\n    id,\n    names.primary as name,\n    CAST(elevation * 3.28084 AS INT) AS elevation_ft,\n    geometry -- DuckDB v.1.1.0 will autoload this as a `geometry` type\n  FROM\n    read_parquet('s3://overturemaps-us-west-2/release/__OVERTURE_RELEASE/theme=base/type=land/*', filename=true, hive_partitioning=1)\n  WHERE\n    subtype = 'physical'\n    AND class IN ('peak','volcano')\n    AND elevation IS NOT NULL\n    AND bbox.xmin BETWEEN -124.71 AND -116.47\n    AND bbox.ymin BETWEEN 41.99 AND 46.30\n) TO 'oregon_peaks.geojson' WITH (FORMAT GDAL, DRIVER 'GeoJSON');\n",u="LOAD spatial; -- noqa\n\nSET s3_region='us-west-2';\n\nCOPY(\n  SELECT\n    id,\n    names.primary as primary_name,\n    height,\n    geometry\n  FROM\n    read_parquet('az://overturemapswestus2.blob.core.windows.net/release/__OVERTURE_RELEASE/theme=buildings/type=building/*', filename=true, hive_partitioning=1)\n  WHERE\n    names.primary IS NOT NULL\n    AND bbox.xmin BETWEEN -84.36 AND -82.42\n    AND bbox.ymin BETWEEN 41.71 AND 43.33\n  LIMIT 100\n) TO 'detroit_buildings.geojsonseq' WITH (FORMAT GDAL, DRIVER 'GeoJSONSeq');\n",c="LOAD spatial; -- noqa\n\nSET s3_region='us-west-2';\n\nCOPY(\n  SELECT\n    id,\n    division_id,\n    names.primary,\n    geometry  -- DuckDB v.1.1.0 will autoload this as a `geometry` type\n  FROM\n    read_parquet('s3://overturemaps-us-west-2/release/__OVERTURE_RELEASE/theme=divisions/type=division_area/*', hive_partitioning=1)\n  WHERE\n    subtype = 'county'\n    AND country = 'US'\n    AND region = 'US-PA'\n) TO 'pennsylvania_counties.gpkg' WITH (FORMAT GDAL, DRIVER 'GPKG');\n",h="LOAD spatial; -- noqa\n\nSET s3_region='us-west-2';\n\nCOPY(                                       -- COPY <query> TO <output> saves the results to disk.\n  SELECT\n    id,\n    names.primary as name,\n    confidence AS confidence,\n    CAST(socials AS JSON) as socials,    -- Ensure each attribute can be serialized to JSON\n    geometry                             -- DuckDB understands this to be a geometry type\n  FROM\n    read_parquet('s3://overturemaps-us-west-2/release/__OVERTURE_RELEASE/theme=places/type=place/*', filename=true, hive_partitioning=1)\n  WHERE\n    categories.primary = 'pizza_restaurant'\n    AND bbox.xmin BETWEEN -75 AND -73       -- Only use the bbox min values\n    AND bbox.ymin BETWEEN 40 AND 41         -- because they are point geometries.\n) TO 'nyc_pizza.geojson' WITH (FORMAT GDAL, DRIVER 'GeoJSON');\n",p="LOAD spatial; -- noqa\n\nSET s3_region='us-west-2';\n\nCOPY(\n  SELECT\n    id,\n    names.primary as name,\n    class,\n    geometry   -- DuckDB v.1.1.0 will autoload this as a `geometry` type\n  FROM\n    read_parquet('s3://overturemaps-us-west-2/release/__OVERTURE_RELEASE/theme=transportation/type=segment/*', filename=true, hive_partitioning=1)\n  WHERE\n    bbox.xmin > 2.276\n    AND bbox.ymin > 48.865\n    AND bbox.xmax < 2.314\n    AND bbox.ymax < 48.882\n) TO 'paris_roads_contained.geojson' WITH (FORMAT GDAL, DRIVER 'GeoJSON');\n",m="LOAD spatial; -- noqa\n\nSET s3_region='us-west-2';\n\nCOPY(\n  SELECT\n    id,\n    names.primary as name,\n    class,\n    geometry   -- DuckDB v.1.1.0 will autoload this as a `geometry` type\n  FROM\n    read_parquet('s3://overturemaps-us-west-2/release/__OVERTURE_RELEASE/theme=transportation/type=segment/*', filename=true, hive_partitioning=1)\n  WHERE\n    bbox.xmin < 2.314 \n    AND bbox.ymin < 48.882 \n    AND bbox.xmax > 2.276 \n    AND bbox.ymax > 48.865\n) TO 'paris_roads_intersecting.geojson' WITH (FORMAT GDAL, DRIVER 'GeoJSON');\n",E="LOAD spatial; -- noqa\n\nSET s3_region='us-west-2';\n\nCOPY(\n  SELECT\n    *\n  FROM\n    read_parquet('s3://overturemaps-us-west-2/release/__OVERTURE_RELEASE/theme=places/type=place/*')\n  LIMIT 100000\n) TO 'places.parquet';\n",x="INSTALL spatial; --noqa\nLOAD spatial; --noqa\n\n\n-- SET variable division_id = <GERS ID HERE>\n\n-- Or, search for it:\nSET variable division_id = (\n    SELECT\n        id\n    FROM\n        read_parquet('s3://overturemaps-us-west-2/release/__OVERTURE_RELEASE/theme=divisions/type=division/*.parquet')\nWHERE\n    names.primary = 'Marion County' AND subtype = 'county'\nLIMIT 1\n);\n\n-- Fetch the bounds and geometry of the Region\nCREATE OR REPLACE TABLE bounds AS (\n    SELECT\n        id AS division_id, names.primary, geometry, bbox\n    FROM\n        read_parquet('s3://overturemaps-us-west-2/release/__OVERTURE_RELEASE/theme=divisions/type=division_area/*.parquet')\n    WHERE\n        division_id = getvariable('division_id')\n);\n\n-- Extract the bounds and geometry of the division into variables for faster table scan\nSET variable xmin = (select bbox.xmin FROM bounds);\nSET variable ymin = (select bbox.ymin FROM bounds);\nSET variable xmax = (select bbox.xmax FROM bounds);\nSET variable ymax = (select bbox.ymax FROM bounds);\nSET variable boundary = (select geometry FROM bounds);\n\n-- Create a local GeoParquet file.\nCOPY(\n    SELECT\n        *\n    FROM\n        read_parquet('s3://overturemaps-us-west-2/release/__OVERTURE_RELEASE/theme=buildings/type=building/*.parquet')\n    WHERE\n        bbox.xmin > getvariable('xmin')\n        AND bbox.xmax < getvariable('xmax')\n        AND bbox.ymin > getvariable('ymin')\n        AND bbox.ymax < getvariable('ymax')\n        AND ST_INTERSECTS(\n            getvariable('boundary'),\n            geometry\n        )\n) TO 'extract.parquet';\n\n-- Convert GeoParquet to line-delimited GeoJSON (or any other GDAL format)\nCOPY(\n    SELECT\n        id,\n        subtype,\n        class,\n        height,\n        names.primary as name,\n        geometry\n    FROM 'extract.parquet'\n) TO 'extract.geojsonseq' WITH (FORMAT GDAL, DRIVER 'GeoJSONSeq');\n",g={title:"DuckDB"},b=void 0,y={},v=[{value:"Installation",id:"installation",level:2},{value:"Downloading Overture Data",id:"downloading-overture-data",level:2},{value:"Regional Extracts",id:"regional-extracts",level:2},{value:"Next steps",id:"next-steps",level:2}];function R(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h2:"h2",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.a,{href:"https://duckdb.org/",children:"DuckDB"})," is powerful analytics tool that allows you to query remote files and download only the data you want. You'll need to install at least ",(0,s.jsx)(n.a,{href:"https://duckdb.org/2024/09/09/announcing-duckdb-110.html",children:"DuckDB 1.1.0"}),", which supports reading and writing geoparquet."]}),"\n",(0,s.jsx)(n.h2,{id:"installation",children:"Installation"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.a,{href:"https://duckdb.org/docs/installation/",children:"Install DuckDB"}),". You'll need extensions to work with spatial data in the cloud. Run the following commands in the DuckDB command line:"]}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"INSTALL SPATIAL;"})," to install the ",(0,s.jsx)(n.a,{href:"https://github.com/duckdblabs/duckdb_spatial",children:"duckdb_spatial"})," extension."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"INSTALL httpfs;"})," or ",(0,s.jsx)(n.code,{children:"INSTALL azure;"})," to read from either Amazon S3 (",(0,s.jsx)(n.a,{href:"https://duckdb.org/docs/guides/import/s3_import.html",children:"httpfs"}),") or Microsoft Azure Blob Storage (",(0,s.jsx)(n.a,{href:"https://duckdb.org/docs/extensions/azure",children:"azure"}),")."]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"downloading-overture-data",children:"Downloading Overture Data"}),"\n",(0,s.jsx)(n.p,{children:"These SQL queries will access Overture data in the cloud and download only the attributes that you request."}),"\n",(0,s.jsxs)(o.default,{queryString:"query",children:[(0,s.jsxs)(r.default,{value:"Places",label:"Places",children:[(0,s.jsxs)(n.p,{children:["Download all pizza restaurants in New York City as a ",(0,s.jsx)(n.code,{children:"GeoJSON"})," file."]}),(0,s.jsx)(l.A,{query:h}),(0,s.jsxs)(n.p,{children:["See the ",(0,s.jsx)(n.a,{href:"/schema/reference/places/place",children:"places schema"})," to learn more about each attribute or the ",(0,s.jsx)(n.a,{href:"/schema/concepts/names/",children:"common schema concepts"})," to better understand ",(0,s.jsx)(n.code,{children:"names.primary"})," from ",(0,s.jsx)(n.code,{children:"names.common"}),"."]})]}),(0,s.jsxs)(r.default,{value:"Buildings",label:"Buildings",children:[(0,s.jsx)(n.p,{children:"Access Overture buildings data hosted on Azure to download named buildings around Detroit, Michigan. Saves as newline-delimited GeoJSON."}),(0,s.jsx)(l.A,{query:u})]}),(0,s.jsxs)(r.default,{value:"Roads",label:"Roads",children:[(0,s.jsx)(n.p,{children:"Download all roads intersecting a given bounding box around the Arc de Triomphe in Paris and save as GeoJSON."}),(0,s.jsx)(l.A,{query:m}),(0,s.jsx)(n.p,{children:(0,s.jsx)(n.em,{children:"Note: This will result in a GeoJSON file that contains all road segments that intersect the bounding box, not just road segments contained within the bounding box."})}),(0,s.jsx)(n.p,{children:"To download only roads contained within that bounding box around the Arc de Triomphe in Paris, use the following:"}),(0,s.jsx)(l.A,{query:p})]}),(0,s.jsxs)(r.default,{value:"Mountains",label:"Mountains",children:[(0,s.jsx)(n.p,{children:"Download mountain peaks in Oregon, USA from the base theme, convert the elevation attribute to feet, and save the result as a GeoJSON file."}),(0,s.jsx)(l.A,{query:d})]}),(0,s.jsxs)(r.default,{value:"Counties",label:"Counties",children:[(0,s.jsx)(n.p,{children:"County-level geometries for Pennsylvania from the divisions theme and outputs a GeoPackage."}),(0,s.jsx)(l.A,{query:c})]}),(0,s.jsxs)(r.default,{value:"geoparquet",label:"As GeoParquet",children:[(0,s.jsxs)(n.p,{children:["DuckDB v1.1.0 supports reading and writing GeoParquet directly. It recognizes the ",(0,s.jsx)(n.code,{children:"geometry"})," type and will write the appropriate metadata."]}),(0,s.jsx)(l.A,{query:E}),(0,s.jsxs)(n.p,{children:["DuckDB recognizes the input as geoparquet and will automatically cast the ",(0,s.jsx)(n.em,{children:"geometry"})," column to a ",(0,s.jsx)(n.code,{children:"GEOMETRY"})," type.\nThe ",(0,s.jsx)(n.code,{children:"COPY"})," command writes a parquet file of 100,000 places named ",(0,s.jsx)(n.code,{children:"places.parquet"})," with the appropriate geoparquet metadata."]})]})]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsxs)(n.admonition,{type:"tip",children:[(0,s.jsxs)(n.p,{children:["To download the data as ",(0,s.jsx)(n.code,{children:"shapefile"}),", replace the last line of any of the above queries:"]}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:") TO 'overture_data.shp' WITH (FORMAT GDAL, DRIVER 'ESRI Shapefile');\n"})}),(0,s.jsxs)(n.p,{children:["or as a ",(0,s.jsx)(n.code,{children:"geopackage"}),":"]}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:") TO 'overture_data.gpkg' WITH (FORMAT GDAL, DRIVER 'GPKG');\n"})}),(0,s.jsxs)(n.p,{children:["The DuckDB Spatial extension supports more than ",(0,s.jsx)(n.a,{href:"https://duckdb.org/docs/extensions/spatial.html#st_read--read-spatial-data-from-files",children:"50 geospatial file formats"}),"."]}),(0,s.jsx)(n.p,{children:"You can also use DuckDB to loop over the Parquet files in a directory and convert the data to a spatial format of your choice. The spatial extension uses GDAL so you could export to flatgeobuf if that's the data format that works best for you. Here's a bash script that shows you how:"}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"for f in *.parquet;\ndo duckdb -c \\\n\"install spatial;\nload spatial;\nCOPY (SELECT id, st_geomfromwkb(geometry) from read_parquet('$f'))\nto '$f.fgb' WITH (FORMAT GDAL, DRIVER 'flatgeobuf');\";\ndone\n"})})]}),"\n",(0,s.jsx)(n.h2,{id:"regional-extracts",children:"Regional Extracts"}),"\n",(0,s.jsx)(n.p,{children:"We can use data from Overture's division theme to define our bounds for a regional extract."}),"\n",(0,s.jsxs)(n.p,{children:["This example stores the GERS ID for the division in the ",(0,s.jsx)(n.code,{children:"division_id"})," variable. If you know the GERS ID, you can simply set it with: ",(0,s.jsx)(n.code,{children:"SET variable division_id = '<GERS ID>'"}),"."]}),"\n",(0,s.jsx)(n.p,{children:"If you don't know the ID, you can set the variable to the result of a query for that specific division, as shown here:"}),"\n",(0,s.jsx)(l.A,{query:x}),"\n",(0,s.jsxs)(n.admonition,{type:"note",children:[(0,s.jsx)(n.p,{children:"This query is broken into discrete steps for efficiency:"}),(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["Using DuckDBs variables in the ",(0,s.jsx)(n.code,{children:"WHERE"})," clause proved more performant than joining to the bounds table."]}),"\n",(0,s.jsx)(n.li,{children:"Storing the result first as GeoParquet and then converting to another format is significantly faster than doing it all in one step."}),"\n"]})]}),"\n",(0,s.jsx)(n.h2,{id:"next-steps",children:"Next steps"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Visualize the data in ",(0,s.jsx)(n.a,{href:"/examples/QGIS",children:"QGIS"})," or ",(0,s.jsx)(n.a,{href:"/examples/kepler-gl",children:"kepler.gl"}),"."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"/examples/build-a-map",children:"Make an interactive map"}),"."]}),"\n",(0,s.jsx)(n.li,{children:"Consult one of our Data Guides to learn more about the data and for more advanced queries."}),"\n"]})]})}function A(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(R,{...e})}):R(e)}}}]);