"use strict";(self.webpackChunkoverture_documentation=self.webpackChunkoverture_documentation||[]).push([[840],{2594:(e,t,n)=>{n.d(t,{A:()=>l});var a=n(58069),r=n(40797),s=n(74848);function l(e){const{siteConfig:{customFields:t}}=(0,r.A)();var n=e.query.replaceAll("__OVERTURE_RELEASE",t.overtureRelease);n=(n=n.replaceAll("__ATHENA_OVERTURE_RELEASE","v"+t.overtureRelease.replaceAll(".","_").replaceAll("-","_"))).replaceAll("__PMTILES_OVERTURE_RELEASE",t.overtureRelease.split(".",1));var l=e.language||"sql";return(0,s.jsx)(a.default,{language:l,title:e.title,children:n})}},91792:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>E,contentTitle:()=>d,default:()=>W,frontMatter:()=>N,metadata:()=>a,toc:()=>u});const a=JSON.parse('{"id":"schema/concepts/by-theme/base/index","title":"Base schema concepts","description":"everything you need to make a real map of the world","source":"@site/docs/schema/concepts/by-theme/base/index.mdx","sourceDirName":"schema/concepts/by-theme/base","slug":"/schema/concepts/by-theme/base/","permalink":"/schema/concepts/by-theme/base/","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"title":"Base schema concepts","description":"everything you need to make a real map of the world"},"sidebar":"schema","previous":{"title":"Theme-based","permalink":"/schema/concepts/by-theme/"},"next":{"title":"Buildings schema concepts","permalink":"/schema/concepts/by-theme/buildings/"}}');var r=n(74848),s=n(28453),l=n(65537),i=n(79329),o=n(2594);const m="CASE\n    -- Railway stations / Subway stations\n    WHEN element_at(tags,'railway') IN ('station','halt') THEN CASE\n        WHEN element_at(tags,'station') = 'subway' THEN ROW('transit', 'subway_station')\n        ELSE ROW('transit', 'railway_' || element_at(tags,'railway'))\n    END\n\n    -- Ferry Terminals\n    WHEN element_at(tags,'amenity') = 'ferry_terminal' OR (\n            element_at(tags,'public_transport') = 'stop_position' AND element_at(tags,'ferry') = 'yes' \n        ) THEN ROW('transit','ferry_terminal')\n\n    -- Transit Stops\n    WHEN element_at(tags,'highway') = 'bus_stop' THEN ROW('transit', 'bus_stop')\n    -- WHEN element_at(tags,'route') = 'bus' THEN ROW('transit', 'bus_route') -- Typically not a valid Geometry\n    WHEN element_at(tags,'amenity') = 'bus_station' THEN ROW('transit', 'bus_station')\n    WHEN element_at(tags,'public_transport') IN ('stop_position', 'platform') THEN ROW('transit', element_at(tags,'public_transport'))\n\n    -- Roadway / Highway infrastructure NODES with OSM `highway` tag\n    WHEN ST_GEOMETRYTYPE(ST_GeomFromBinary(geometry)) = 'ST_Point' AND element_at(tags,'highway') IN (\n        'crossing',\n        'give_way',\n        'stop',\n        'street_lamp',\n        'traffic_signals',\n        'motorway_junction',\n        'milestone'\n    ) THEN ROW('transportation', element_at(tags,'highway'))\n    \n    WHEN element_at(tags,'street_cabinet') IS NOT NULL THEN ROW('transportation', 'street_cabinet')\n    WHEN element_at(tags,'amenity') IN ('charging_station') THEN ROW('transportation', element_at(tags,'amenity'))\n\n    -- Emergency Infrastructure\n    WHEN element_at(tags,'emergency') IN ('fire_hydrant') THEN ROW('emergency', element_at(tags,'emergency'))\n\n    -- Parking\n    WHEN element_at(tags,'amenity') IN (\n        'parking',\n        'parking_entrance',\n        'parking_space',\n        'bicycle_parking',\n        'bicycle_rental',\n        'motorcycle_parking'\n    ) THEN ROW('transit', element_at(tags,'amenity'))\n\n    -- Aerialways (Linestrings)\n    WHEN ST_GEOMETRYTYPE(ST_GeomFromBinary(geometry)) = 'ST_LineString' AND element_at(tags,'aerialway') IN (\n        'cable_car',\n        'chair_lift',\n        'drag_lift',\n        'gondola',\n        'j-bar',\n        'magic_carpet',\n        'goods',\n        'mixed_lift',\n        'platter',\n        'rope_tow',\n        't-bar',\n        'zip_line'\n    ) THEN ROW('aerialway', element_at(tags,'aerialway'))\n    \n    -- Pylons are points\n    WHEN ST_GEOMETRYTYPE(ST_GeomFromBinary(geometry)) = 'ST_Point' AND element_at(tags,'aerialway') = 'pylon' THEN ROW('aerialway', 'pylon')\n\n    -- Stations are nodes/ways\n    WHEN element_at(tags,'aerialway') = 'station' THEN ROW('aerialway', 'aerialway_station')\n\n    -- Airports (Polygons)\n    WHEN ST_GEOMETRYTYPE(ST_GeomFromBinary(geometry)) IN ('ST_Polygon', 'ST_MultiPolygon') AND element_at(tags,'aeroway') IN (\n        'airstrip', \n        'apron',\n        'helipad',\n        'heliport',\n        'launchpad',\n        'runway',\n        'taxiway'\n    ) THEN ROW('airport', element_at(tags,'aeroway'))\n\n    -- Airports (LineStrings)\n    WHEN ST_GEOMETRYTYPE(ST_GeomFromBinary(geometry)) = 'ST_LineString' AND element_at(tags, 'aeroway') IN (\n        'runway',\n        'stopway',\n        'taxilane',\n        'taxiway'\n    ) THEN ROW('airport', element_at(tags,'aeroway'))\n\n    -- Airports (Points)\n    WHEN ST_GEOMETRYTYPE(ST_GeomFromBinary(geometry)) = 'ST_Point' AND element_at(tags,'aeroway') IN (\n        'airstrip',\n        'helipad'\n    ) THEN ROW('airport', element_at(tags,'aeroway'))\n\n    WHEN ST_GEOMETRYTYPE(ST_GeomFromBinary(geometry)) = 'ST_Point' AND element_at(tags,'aeroway') = 'gate'\n        THEN ROW('airport', 'airport_gate')\n\n    WHEN element_at(tags,'aeroway') = 'aerodrome' THEN CASE\n        WHEN element_at(tags,'aerodrome:type') = 'military' OR element_at(tags,'landuse') = 'military' OR element_at(tags,'military') IN (\n            'airfield'\n        ) THEN ROW('airport','military_airport')\n        WHEN element_at(tags,'access') IN ('emergency', 'no', 'permissive', 'private')\n            OR element_at(tags,'aerodrome:type') = 'private' THEN ROW('airport','private_airport')\n        WHEN lower(element_at(tags,'name')) LIKE '%international%' OR element_at(tags,'aerodrome:type') = 'international'\n            OR element_at(tags,'aerodrome') = 'international' THEN ROW('airport','international_airport')\n        WHEN lower(element_at(tags,'name')) LIKE '%regional%' OR element_at(tags,'aerodrome:type') = 'regional'\n            THEN ROW('airport','regional_airport')\n        WHEN lower(element_at(tags,'name')) LIKE '%municipal%' THEN ROW('airport','municipal_airport')\n        WHEN lower(element_at(tags,'name')) LIKE '%seaplane%' THEN ROW('airport','seaplane_airport')\n        WHEN lower(element_at(tags,'name')) LIKE '%heli%' THEN ROW('airport','heliport')\n        ELSE ROW('airport','airport')\n    END\n\n    -- Bridges\n    WHEN element_at(tags,'bridge') IN (\n        'aqueduct',\n        'boardwalk',\n        'cantilever',\n        'covered',\n        'movable',\n        'trestle',\n        'viaduct'\n    ) THEN ROW('bridge', element_at(tags,'bridge'))\n    WHEN element_at(tags,'bridge:support') IS NOT NULL THEN\n        ROW('bridge', 'bridge_support')\n\n    -- Communication\n    WHEN element_at(tags,'communication:mobile_phone') <> 'no' THEN ROW('communication','mobile_phone_tower')\n    WHEN element_at(tags,'communication') IN ('line','pole') THEN ROW('communication','communication_' || element_at(tags,'communication'))\n    WHEN element_at(tags,'tower:type') = 'communication' THEN ROW('communication','communication_tower')\n\n    -- Pedestrian\n    WHEN element_at(tags,'highway') IS NULL AND element_at(tags,'footway') IN ('crossing') AND \n        ST_GEOMETRYTYPE(ST_GeomFromBinary(geometry)) IN ('ST_Polygon','ST_MultiPolygon') THEN ROW('pedestrian','pedestrian_crossing')\n    WHEN element_at(tags,'tourism') IN ('information', 'viewpoint') THEN ROW('pedestrian', element_at(tags,'tourism'))\n    WHEN element_at(tags,'amenity') IN (\n        'atm',\n        'bench',\n        'picnic_table',\n        'post_box',\n        'toilets',\n        'vending_machine'\n    ) THEN ROW('pedestrian', element_at(tags,'amenity'))\n\n    -- Manholes\n    WHEN element_at(tags,'manhole') IN ('drain', 'sewer') THEN ROW('manhole', element_at(tags,'manhole'))\n    WHEN element_at(tags,'manhole') IS NOT NULL THEN ROW('manhole','manhole')\n\n    -- Power\n    WHEN element_at(tags,'power') IN (\n        'cable_distribution',\n        'cable',\n        'catenary_mast',\n        'connection',\n        'generator',\n        'heliostat',\n        'insulator',\n        'minor_line',\n        'plant',\n        'portal',\n        'substation',\n        'switch',\n        'terminal',\n        'transformer'\n    ) THEN ROW('power', element_at(tags,'power'))\n\n    WHEN element_at(tags,'power') IN ('line', 'pole', 'tower') THEN ROW('power','power_' || element_at(tags,'power'))\n\n    -- Recreation\n    WHEN element_at(tags,'tourism') = ('camp_site') AND ST_GEOMETRYTYPE(ST_GeomFromBinary(geometry)) = 'ST_Point' THEN ROW('recreation','camp_site')\n\n    -- Towers\n    WHEN element_at(tags,'tower:type') IN (\n        'bell_tower',\n        'cooling',\n        'defensive',\n        'diving',\n        'hose',\n        'lighting',\n        'lightning_protection',\n        'minaret',\n        'monitoring',\n        'observation',\n        'radar',\n        'siren',\n        'watchtower'\n    ) THEN ROW('tower', element_at(tags,'tower:type'))\n\n    -- Utility / human made made containers\n    WHEN element_at(tags,'man_made') IN (\n        'gasometer',\n        'pipeline',\n        'reservoir_covered',\n        'silo',\n        'storage_tank', \n        'utility_pole',\n        'water_tower'\n    ) THEN ROW('utility', element_at(tags,'man_made'))\n\n    -- Waste Management\n    WHEN element_at(tags,'amenity') IN(\n        'recycling',\n        'waste_basket',\n        'waste_disposal'\n    ) THEN ROW('waste_management',element_at(tags,'amenity'))\n\n    -- Water related\n    WHEN element_at(tags,'man_made') IN ('dam', 'breakwater') THEN ROW('water',element_at(tags,'man_made'))\n    WHEN element_at(tags,'man_made') IN ('pier') THEN ROW('pier','pier')\n\n    WHEN element_at(tags,'waterway') IN ('dam','weir') THEN ROW('water', element_at(tags,'waterway'))\n\n    WHEN element_at(tags,'amenity') = ('drinking_water') AND\n        (element_at(tags,'drinking_water') IS NULL OR element_at(tags,'drinking_water') <> 'no') AND\n        (element_at(tags,'access') IS NULL OR element_at(tags,'access') <> 'private')\n        THEN ROW('water', 'drinking_water')\n    WHEN element_at(tags,'amenity') IN ('fountain') THEN ROW('water', 'fountain')\n    \n\n    -- Barrier tags are often secondary on other features, so put them last.\n    -- Barrier tags that are not allowed on points:\n    WHEN ST_GEOMETRYTYPE(ST_GeomFromBinary(geometry)) <> 'ST_Point' AND element_at(tags,'barrier') IN (\n        'cable_barrier',\n        'city_wall',\n        'chain',\n        'ditch',\n        'fence',\n        'guard_rail',\n        'handrail',\n        'hedge',\n        'jersey_barrier',\n        'kerb',\n        'retaining_wall',\n        'wall'\n    ) THEN ROW('barrier', element_at(tags,'barrier'))\n\n    -- Points allowed on these types of barriers:\n    WHEN element_at(tags,'barrier') IN (\n        'block',\n        'bollard',\n        'border_control',\n        'bump_gate',\n        'bus_trap',\n        'cattle_grid',\n        'cycle_barrier',\n        'chain',\n        'entrance',\n        'full-height_turnstile',\n        'gate',\n        'hampshire_gate',\n        'height_restrictor',\n        'jersey_barrier',\n        'kerb',\n        'kissing_gate',\n        'lift_gate',\n        'planter',\n        'sally_port',\n        'stile',\n        'swing_gate',\n        'toll_booth'\n    ) THEN ROW('barrier', element_at(tags,'barrier'))\n    WHEN element_at(tags,'man_made') IN ('cutline') THEN ROW('barrier','cutline')\n\n    -- If there remains a barrier tag but it's not in the above list:\n    WHEN element_at(tags,'barrier') IS NOT NULL THEN ROW('barrier','barrier')\n\n    -- Lower priority generic `bridge` tags\n    WHEN element_at(tags,'man_made') = 'bridge' THEN ROW('bridge','bridge')\n    WHEN element_at(tags,'bridge') = 'yes' THEN ROW('bridge','bridge')\nEND",c="CASE\n    -- Craters\n    WHEN element_at(tags,'geological') IN ('meteor_crater', 'volcanic_caldera_rim')\n        AND (element_at(tags, 'water') IS NULL OR element_at(tags, 'water') <> 'lake')\n        AND (element_at(tags, 'natural') IS NULL OR element_at(tags, 'natural') <> 'water')\n        THEN ROW('crater', element_at(tags,'geological'))\n\n    -- Desert\n    WHEN element_at(tags,'natural') IN ('desert') THEN ROW('desert', element_at(tags,'natural'))\n\n    -- Wetland\n    WHEN element_at(tags,'natural') IN ('wetland') THEN ROW('wetland', element_at(tags,'natural'))\n\n    -- Glacier\n    WHEN element_at(tags,'natural') IN ('glacier') THEN ROW('glacier', element_at(tags,'natural'))\n\n    -- Rock\n    WHEN element_at(tags,'natural') IN (\n        'bare_rock',\n        'rock',\n        'scree',\n        'shingle',\n        'stone'\n    ) THEN ROW('rock', element_at(tags,'natural'))\n\n    -- Sand\n    WHEN element_at(tags,'natural') IN ('beach', 'dune', 'sand') THEN ROW('sand', element_at(tags,'natural'))\n\n    -- Grass\n    WHEN element_at(tags,'natural') IN (\n        'fell',\n        'grass',\n        'grassland',\n        'meadow',\n        'tundra'\n    ) THEN ROW('grass', element_at(tags,'natural'))\n    WHEN element_at(tags,'landcover') IN ('grass') THEN ROW ('grass', element_at(tags,'landcover'))\n\n    -- Shrub / Scrub\n    WHEN element_at(tags,'natural') IN (\n        'heath',\n        'shrub',\n        'shrubbery',\n        'scrub'\n    ) THEN ROW('shrub',element_at(tags,'natural'))\n    WHEN element_at(tags,'landcover') IN ('scrub') THEN ROW('shrub', element_at(tags,'landcover'))\n\n    -- Reefs\n    WHEN element_at(tags,'natural') IN ('reef') THEN ROW('reef', element_at(tags,'natural'))\n\n    -- Forest\n    WHEN element_at(tags,'natural') IN ('forest', 'wood') THEN ROW('forest', element_at(tags,'natural'))\n    WHEN element_at(tags,'landcover') IN ('trees') THEN ROW('forest', 'forest')\n    WHEN element_at(tags,'landuse') IN ('forest') THEN ROW('forest','forest')\n\n    -- Single trees / tree rows\n    WHEN element_at(tags,'natural') IN ('tree') THEN ROW('tree','tree')\n    WHEN element_at(tags,'natural') IN ('tree_row') THEN ROW('tree','tree_row')\n\n    -- Physical Subtype\n    WHEN element_at(tags,'natural') IN(\n        'cave_entrance',\n        'cliff',\n        'hill',\n        'mountain_range',\n        'peak',\n        'peninsula',\n        'plateau',\n        'ridge',\n        'saddle',\n        'valley'\n    ) THEN ROW('physical', element_at(tags,'natural'))\n\n    -- Volcanoes\n    WHEN element_at(tags,'natural') = 'volcano' THEN IF(\n        element_at(tags,'type') = 'extinct' OR element_at(tags,'volcano:status') = 'extinct',\n        ROW ('physical','peak'),\n        ROW('physical','volcano')\n    )\n\n    -- Archipelagos, Islands & Islets\n    WHEN element_at(tags,'place') IN (\n        'archipelago',\n        'island',\n        'islet'\n    ) THEN ROW('land',element_at(tags,'place'))\n\n    -- Look at surface tag now\n    WHEN element_at(tags,'surface') IN ('grass') THEN ROW('grass','grass')\n\n    ELSE ROW(NULL, NULL)\nEND",_="CASE\n    -- Piste types\n    WHEN ST_GeometryType(ST_GeomFromBinary(geometry)) <> 'ST_Point' AND element_at(tags,'piste:type') IN (\n        'connection', \n        'downhill',\n        'fatbike', \n        'hike',\n        'ice_skate',\n        'nordic',\n        'playground', \n        'ski_jump',\n        'skitour', \n        'sled', \n        'sleigh',\n        'snow_park'\n    ) THEN ROW ('winter_sports', element_at(tags,'piste:type'))\n\n    -- Polygons\n    WHEN ST_GeometryType(ST_GeomFromBinary(geometry)) IN ('ST_Polygon', 'ST_MultiPolygon') THEN CASE\n\n        -- Military Specific Landuses\n\n        WHEN ( element_at(tags,'landuse') = 'military' OR element_at(tags,'military') <> 'no') \n            AND element_at(tags,'amenity') IN ('hospital', 'clinic') \n            THEN ROW('military', 'military_hospital')\n        \n        WHEN ( element_at(tags,'landuse') = 'military' OR element_at(tags,'military') <> 'no') \n            AND element_at(tags,'amenity') IN ('school','university','college') \n            THEN ROW('military', 'military_school')\n        \n        WHEN element_at(tags,'military') IN (\n            'airfield',\n            'barracks',\n            'base',\n            'danger_area',\n            'naval_base',\n            'nuclear_explosion_site',\n            'obstacle_course',\n            'range',\n            'training_area',\n            'trench'\n        ) THEN ROW('military', element_at(tags,'military'))\n\n        -- Other general military landuse\n        WHEN (element_at(tags,'military') <> 'no' OR element_at(tags,'landuse') = 'military') AND element_at(tags,'aeroway') IS NULL THEN ROW('military', 'military')\n\n        -- Residential\n        WHEN element_at(tags,'landuse') IN ('residential', 'static_caravan', 'garages') THEN ROW('residential', element_at(tags,'landuse'))\n\n        -- Entertainment\n        WHEN element_at(tags,'tourism') IN (\n            'zoo',\n            'theme_park'\n        ) THEN ROW('entertainment', element_at(tags,'tourism'))\n        WHEN element_at(tags,'leisure') IN (\n            'water_park'\n        ) THEN ROW('entertainment', element_at(tags,'leisure'))\n\n        -- Protected Areas (National, State Parks, Reserves).\n\n        -- State / National Parks by Protection Title\n        WHEN element_at(tags, 'boundary') = 'protected_area' AND LOWER(element_at(tags, 'protection_title')) IN ('national park', 'parque nacional', 'national_park') \n            THEN ROW('protected', 'national_park')\n        WHEN element_at(tags, 'boundary') = 'protected_area' AND LOWER(element_at(tags, 'protection_title')) IN ('state park') \n            THEN ROW('protected','state_park')\n        \n        -- State / National Forests\n        WHEN element_at(tags, 'boundary') = 'protected_area' AND LOWER(element_at(tags, 'protection_title')) IN (\n            'national forest', 'state forest'\n        ) THEN ROW('protected', 'forest')\n        \n        -- Wilderness Areas\n        WHEN element_at(tags, 'boundary') = 'protected_area' AND LOWER(element_at(tags, 'protection_title')) IN (\n            'wilderness area', \n            'wilderness study area'\n        ) THEN ROW('protected', 'wilderness_area')\n\n        -- Nature Reserves\n        WHEN element_at(tags, 'boundary') = 'protected_area' AND LOWER(element_at(tags, 'protection_title')) IN ('nature reserve', 'nature refuge', 'reserva nacional') \n            THEN ROW('protected', 'nature_reserve')\n        \n        -- Environmental\n        WHEN element_at(tags, 'boundary') = 'protected_area' AND LOWER(element_at(tags, 'protection_title')) IN ('environmental use') \n            THEN ROW('protected', 'environmental')\n\n        -- National Parks & Aboriginal Lands based on boundary only\n        WHEN element_at(tags, 'boundary') = 'national_park' THEN ROW('protected','national_park')\n        WHEN element_at(tags, 'boundary') = 'aboriginal_lands' THEN ROW('protected', 'aboriginal_land')\n\n        -- Last chance: classify based on the protect_class: \n        WHEN element_at(tags, 'protect_class') = '1a' THEN ROW('protected', 'strict_nature_reserve')\n        WHEN element_at(tags, 'protect_class') IN ('1b', '1') THEN ROW('protected', 'wilderness_area')\n        WHEN element_at(tags, 'protect_class') = '2' THEN ROW('protected', 'national_park')\n        WHEN element_at(tags, 'protect_class') = '3' THEN ROW('protected', 'natural_monument')\n        WHEN element_at(tags, 'protect_class') = '4' THEN ROW('protected', 'species_management_area')\n        WHEN element_at(tags, 'protect_class') = '5' THEN ROW('protected', 'protected_landscape_seascape')\n        WHEN element_at(tags, 'protect_class') = '6' THEN ROW('protected', 'nature_reserve')\n        WHEN element_at(tags, 'protect_class') = '24' THEN ROW('protected', 'aboriginal_land')\n\n        -- Protected areas based on leisure or landuse\n        WHEN element_at(tags, 'leisure') = 'nature_reserve' THEN ROW('protected','nature_reserve')\n\n        -- Else, general protected area:\n        WHEN element_at(tags, 'boundary') = 'protected_area' AND element_at(tags,'landuse') IS NOT NULL THEN ROW('protected', 'protected')\n        \n        -- Golf\n        WHEN element_at(tags,'golf') IN (\n            'bunker',\n            'driving_range',\n            'fairway',\n            'green',\n            'lateral_water_hazard',\n            'rough',\n            'tee',\n            'water_hazard'\n        )\n            THEN ROW('golf', element_at(tags,'golf'))\n        WHEN element_at(tags,'leisure') IN (\n            'golf_course'\n        ) THEN ROW('golf','golf_course')\n\n        -- Winter Sports\n        WHEN element_at(tags,'landuse') IN ('winter_sports') THEN ROW('winter_sports','winter_sports')\n\n        -- Horticulture\n        WHEN element_at(tags,'landuse') IN (\n            'allotments',\n            'greenhouse_horticulture',\n            'flowerbed',\n            'plant_nursery',\n            'orchard',\n            'vineyard'\n        ) THEN ROW('horticulture', element_at(tags,'landuse'))\n        WHEN element_at(tags,'leisure') IN (\n            'garden'\n        ) THEN ROW('horticulture', element_at(tags,'leisure'))\n\n        -- Aquaculture\n        WHEN element_at(tags,'landuse') IN ('aquaculture') THEN ROW('aquaculture', 'aquaculture')\n\n        -- Education / Schoolyards\n        WHEN element_at(tags, 'amenity') IN (\n            'college',\n            'driving_school',\n            'kindergarten',\n            'music_school',\n            'school',\n            'university'\n        ) THEN ROW('education', element_at(tags, 'amenity'))\n        \n        WHEN element_at(tags,'landuse') = 'education' THEN ROW('education', 'education')\n        \n        WHEN element_at(tags,'leisure') = 'schoolyard' THEN ROW('education', 'schoolyard')\n\n        -- Medical\n        WHEN element_at(tags, 'amenity') IN (\n            'clinic',\n            'doctors',\n            'hospital'\n        ) THEN ROW('medical', element_at(tags, 'amenity'))\n\n        -- Park\n        WHEN element_at(tags,'leisure') IN (\n            'dog_park',\n            'park'\n        ) THEN ROW('park', element_at(tags,'leisure'))\n        WHEN element_at(tags,'landuse') IN ('village_green') THEN ROW('park', element_at(tags,'landuse'))\n\n        -- Pedestrian land use, such as plazas\n        WHEN element_at(tags, 'place') = 'square' THEN ROW('pedestrian', 'plaza')\n        WHEN element_at(tags, 'highway') = 'pedestrian' THEN ROW('pedestrian', 'pedestrian')\n\n        -- Agriculture\n        WHEN element_at(tags,'landuse') IN ('animal_keeping', 'farmland', 'farmyard', 'meadow')\n            THEN ROW('agriculture', element_at(tags,'landuse'))\n        -- Meadows can also be tagged this way:\n        WHEN element_at(tags,'meadow') IN ('agricultural', 'agriculture', 'pasture')\n            THEN ROW('agriculture', 'meadow')\n\n        -- Resource extraction\n        WHEN element_at(tags,'landuse') IN (\n            'logging',\n            'peat_cutting',\n            'quarry',\n            'salt_pond'\n        ) THEN ROW('resource_extraction', element_at(tags,'landuse'))\n\n        -- Campgrounds\n        WHEN element_at(tags,'tourism') = 'camp_site' AND element_at(tags, 'refugee') IS NULL\n            THEN ROW('campground', 'camp_site')\n\n        -- Cemetery\n        WHEN element_at(tags, 'amenity') IN ('grave_yard') THEN ROW('cemetery', 'grave_yard')\n        WHEN element_at(tags,'landuse') IN ('cemetery') THEN ROW('cemetery', 'cemetery')\n        WHEN element_at(tags,'landuse') IN ('grave_yard') THEN ROW('cemetery','grave_yard')\n\n        -- Religious\n        WHEN element_at(tags,'landuse') IN ('religious') THEN ROW('religious', element_at(tags,'landuse'))\n\n        -- Recreation\n        WHEN element_at(tags,'leisure') IN (\n            'beach_resort',\n            'marina',\n            'pitch',\n            'playground',\n            'recreation_ground',\n            'resort',\n            'stadium',\n            'track'\n        ) THEN ROW('recreation', element_at(tags,'leisure'))\n        WHEN element_at(tags,'landuse') IN ('recreation_ground') THEN ROW('recreation',element_at(tags,'landuse'))\n\n        -- Landfill\n        WHEN element_at(tags,'landuse') IN ('landfill') THEN ROW('landfill', 'landfill')\n\n        -- General \"developed\"\n        WHEN element_at(tags,'landuse') IN (\n            'brownfield',\n            'commercial',\n            'industrial',\n            'institutional',\n            'retail'\n        ) THEN ROW('developed', element_at(tags,'landuse'))\n        WHEN element_at(tags,'shop') = 'mall' THEN ROW('developed', 'retail')\n        WHEN element_at(tags,'man_made') = 'works' THEN ROW('developed', 'works')\n\n        -- Construction\n        WHEN element_at(tags,'landuse') IN ('construction', 'greenfield') THEN ROW('construction',element_at(tags,'landuse'))\n\n        -- Other managed / maintained\n        WHEN element_at(tags,'natural') IS NULL AND element_at(tags,'landuse') IN (\n            'grass'\n        ) THEN ROW('managed', element_at(tags,'landuse'))\n\n        -- Other Landuse\n        WHEN element_at(tags,'landuse') IN ('highway', 'traffic_island') THEN ROW('transportation',element_at(tags,'landuse'))\n        ELSE ROW(NULL,NULL)\n    END\n    \n    -- Linestrings\n    WHEN ST_GeometryType(ST_GeomFromBinary(geometry)) = 'ST_LineString' THEN CASE\n        WHEN element_at(tags,'leisure') IN ('track') THEN ROW('recreation', element_at(tags,'leisure'))\n        ELSE ROW(NULL,NULL)\n    END\n\n    -- No Points allowed in landuse\n    ELSE ROW(NULL,NULL)\nEND",g="CASE\n    -- Streams\n    WHEN element_at(tags, 'waterway') IN ('stream') THEN ROW('stream', element_at(tags, 'waterway'))\n    WHEN element_at(tags, 'water') IN ('stream') THEN ROW('stream', element_at(tags, 'water'))\n\n    -- Rivers\n    WHEN element_at(tags, 'waterway') IN ('river') THEN ROW('river', element_at(tags, 'waterway'))\n    WHEN element_at(tags, 'water') IN ('river') THEN ROW('river', element_at(tags, 'water'))\n\n    -- Canals\n    WHEN element_at(tags, 'water') IN ('canal', 'ditch', 'moat') THEN ROW('canal', element_at(tags, 'water'))\n    WHEN element_at(tags, 'waterway') IN ('canal', 'ditch') THEN ROW('canal', element_at(tags, 'waterway'))\n    WHEN element_at(tags, 'water') IN ('drain') THEN ROW('canal', 'drain')\n    WHEN element_at(tags, 'waterway') IN ('drain') THEN ROW('canal', 'drain')\n\n    -- Ponds\n    WHEN element_at(tags, 'water') IN ('fishpond', 'pond') THEN ROW('pond', element_at(tags, 'water'))\n    WHEN element_at(tags, 'water') IN ('lake', 'reservoir')\n            AND ST_GeometryType(ST_GeomFromBinary(geometry)) IN ('ST_Polygon', 'ST_MultiPolygon')\n            AND ST_AREA(TO_SPHERICAL_GEOGRAPHY(ST_GeomFromBinary(geometry))) < 4000\n            THEN ROW('pond','pond')\n\n    -- Lakes\n    WHEN element_at(tags, 'water') IN ('lake', 'oxbow','lagoon') THEN ROW('lake', element_at(tags, 'water'))\n\n    -- Springs\n    WHEN element_at(tags, 'natural') IN ('spring','hot_spring','geyser','blowhole') THEN ROW('spring', element_at(tags, 'natural'))\n\n    -- Tidal Channels / Fairways\n    WHEN element_at(tags, 'waterway') IN ('tidal_channel', 'fairway') THEN ROW('water', element_at(tags, 'waterway'))\n\n    -- Wastewater\n    WHEN element_at(tags, 'water') IN ('wastewater') THEN ROW('water', 'wastewater')\n    WHEN element_at(tags, 'reservoir_type') IN ('sewage') THEN ROW('wastewater', 'sewage')\n\n    -- Reservoirs\n    WHEN element_at(tags, 'water') IN ('reservoir', 'basin') THEN ROW('reservoir', element_at(tags, 'water'))\n    WHEN element_at(tags, 'landuse') IN ('reservoir', 'basin') THEN\n        CASE\n            WHEN element_at(tags, 'basin') IN (\n                'evaporation',\n                'detention',\n                'retention',\n                'infiltration',\n                'cooling'\n            ) THEN ROW('reservoir', 'basin')\n            WHEN element_at(tags, 'reservoir_type') IN ('water_storage') THEN ROW('reservoir', 'water_storage')\n            ELSE ROW('reservoir', 'reservoir')\n        END\n\n    -- Physical\n    WHEN element_at(tags, 'natural') IN ('bay','cape','shoal','strait') THEN ROW('physical', element_at(tags, 'natural'))\n    WHEN element_at(tags, 'waterway') IN ('waterfall') THEN ROW('physical', element_at(tags, 'waterway'))\n\n    -- Swimming Pools\n    WHEN element_at(tags, 'leisure') = 'swimming_pool' AND (\n        element_at(tags, 'location') IS NULL OR element_at(tags, 'location') IN ('roof','outdoor','overground','surface')\n    ) THEN ROW('human_made', 'swimming_pool')\n\n    -- Reflecting Pools\n    WHEN element_at(tags, 'water') IN ('reflecting_pool') THEN ROW('human_made', 'reflecting_pool')\n\n    -- Salt Ponds\n    WHEN element_at(tags, 'landuse') IN ('salt_pond') THEN ROW('human_made', 'salt_pond')\n\n    -- Fish pass\n    WHEN element_at(tags, 'waterway') IN ('fish_pass') THEN ROW('human_made', 'fish_pass')\n\n    -- Dock\n    WHEN element_at(tags, 'waterway') = 'dock' AND element_at(tags, 'dock') <> 'drydock' THEN ROW('water', 'dock')\n\n    -- Oceans / Seas\n    WHEN element_at(tags, 'place') IN ('ocean','sea') THEN ROW('physical', element_at(tags, 'place'))\n\n    -- Default \"water\"\n    WHEN element_at(tags, 'natural') = 'water' THEN ('water', 'water')\n\n    ELSE ROW(NULL,NULL)\nEND",N={title:"Base schema concepts",description:"everything you need to make a real map of the world"},d=void 0,E={},u=[{value:"Overview",id:"overview",level:2},{value:"Feature types",id:"feature-types",level:2},{value:"Theme concepts",id:"theme-concepts",level:2},{value:"OpenStreetMap tags to Overture properties",id:"openstreetmap-tags-to-overture-properties",level:3},{value:"Schema reference",id:"schema-reference",level:2}];function p(e){const t={a:"a",admonition:"admonition",code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components},{Details:n}=t;return n||function(e,t){throw new Error("Expected "+(t?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.h2,{id:"overview",children:"Overview"}),"\n",(0,r.jsxs)(t.p,{children:["The Overture base theme includes features desired for rendering a complete basemap. We assign a ",(0,r.jsx)(t.code,{children:"subtype"})," and ",(0,r.jsx)(t.code,{children:"class"})," to each feature and pass relevant properties through in the ",(0,r.jsx)(t.code,{children:"source_tags"})," property. Most of the features in the base theme come from OpenStreetMap via the ",(0,r.jsx)(t.a,{href:"https://daylightmap.org/",children:"Daylight Map Distribution"}),"."]}),"\n",(0,r.jsx)(t.h2,{id:"feature-types",children:"Feature types"}),"\n",(0,r.jsx)(t.p,{children:"The base theme has six feature types."}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"bathymetry"}),": topographic representation of underwater areas, e.g. an elevation map of the ocean floor"]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"infrastructure"}),": human-made structures such as bridges, towers, pipelines, and airports"]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"land"}),": natural land features"]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"land_cover"}),": land features derived from satellite imagery, e.g. forest, crop, barren, urban"]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"land_use"}),": human-determined land use categories, e.g. residential, agriculture, protected"]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"water"}),": natural and human-made water features, includes ocean data derived from the ",(0,r.jsx)(t.a,{href:"https://osmcode.org/osmcoastline/",children:"OSM Coastline Tool"})]}),"\n"]}),"\n",(0,r.jsx)(t.h2,{id:"theme-concepts",children:"Theme concepts"}),"\n",(0,r.jsx)(t.h3,{id:"openstreetmap-tags-to-overture-properties",children:"OpenStreetMap tags to Overture properties"}),"\n",(0,r.jsxs)(t.p,{children:["The subtype and class properties of an ",(0,r.jsx)(t.code,{children:"infrastructure"}),", ",(0,r.jsx)(t.code,{children:"land"}),", ",(0,r.jsx)(t.code,{children:"land_use"}),", and ",(0,r.jsx)(t.code,{children:"water"})," feature types in the base theme is determined by the original feature's tags on OpenStreetMap."]}),"\n",(0,r.jsx)(t.p,{children:"Below is the logic that is currently used to convert from OSM tags into Overture schema."}),"\n",(0,r.jsx)(t.admonition,{type:"tip",children:(0,r.jsxs)(t.p,{children:["Have a suggestion or improvement to the logic? Please start a discussion on ",(0,r.jsx)(t.a,{href:"https://github.com/OvertureMaps/data/discussions/categories/base",children:"Github"})]})}),"\n",(0,r.jsxs)(n,{children:[(0,r.jsx)("summary",{children:"How do I interpret this query?"}),(0,r.jsxs)(t.p,{children:["Each ",(0,r.jsx)(t.code,{children:"WHEN"})," line in the ",(0,r.jsx)(t.code,{children:"CASE"})," statement is a condition that defines both the ",(0,r.jsx)(t.strong,{children:"subtype"})," and the ",(0,r.jsx)(t.strong,{children:"class"})," of a feature. For example:"]}),(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-sql",children:"WHEN element_at(tags,'highway') = 'bus_stop' THEN ROW('transit', 'bus_stop')\n"})}),(0,r.jsxs)(t.p,{children:["Here, ",(0,r.jsx)(t.code,{children:"element_at(tags, 'highway')"})," is accessing the value of the ",(0,r.jsx)(t.code,{children:"highway"})," tag in OSM. So, when ",(0,r.jsx)(t.code,{children:"highway=bus_stop"})," is present, then the statement returns ",(0,r.jsx)(t.code,{children:"ROW(subtype, class)"}),", in this case, ",(0,r.jsx)(t.strong,{children:"subtype"}),"=",(0,r.jsx)(t.code,{children:"transit"})," and ",(0,r.jsx)(t.strong,{children:"class"}),"=",(0,r.jsx)(t.code,{children:"bus_stop"}),"."]}),(0,r.jsx)(t.p,{children:"Since this particular statement is at the top of the list, it will take priority over other tags on the feature. If the same feature was also tagged as an airport gate, those tags would be ignored."})]}),"\n",(0,r.jsxs)(l.default,{children:[(0,r.jsx)(i.default,{value:"Infrastructure",children:(0,r.jsx)(o.A,{query:m})}),(0,r.jsx)(i.default,{value:"Land",children:(0,r.jsx)(o.A,{query:c})}),(0,r.jsx)(i.default,{value:"Land Use",children:(0,r.jsx)(o.A,{query:_})}),(0,r.jsx)(i.default,{value:"Water",children:(0,r.jsx)(o.A,{query:g})})]}),"\n",(0,r.jsx)(t.h2,{id:"schema-reference",children:"Schema reference"}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsx)(t.li,{children:(0,r.jsx)(t.a,{href:"/schema/reference/base/infrastructure",children:"Explore the schema for the infrastructure feature type"})}),"\n",(0,r.jsx)(t.li,{children:(0,r.jsx)(t.a,{href:"/schema/reference/base/land",children:"Explore the schema for the land feature type"})}),"\n",(0,r.jsx)(t.li,{children:(0,r.jsx)(t.a,{href:"/schema/reference/base/land_cover",children:"Explore the schema for the land_cover feature type"})}),"\n",(0,r.jsx)(t.li,{children:(0,r.jsx)(t.a,{href:"/schema/reference/base/land_use",children:"Explore the schema for the land_use type"})}),"\n",(0,r.jsx)(t.li,{children:(0,r.jsx)(t.a,{href:"/schema/reference/base/water",children:"Explore the schema for the water type"})}),"\n"]})]})}function W(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(p,{...e})}):p(e)}}}]);